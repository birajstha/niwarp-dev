{
  "version": {
    "workflow": 1,
    "nipype": "1.8.6"
  },
  "meta": {
    "pipeline_name": "pipeline_RBCv0",
    "stage": "pre",
    "time": "2024-10-10T17:54:44.894742+00:00"
  },
  "workflow": {
    "name": "cpac_pipeline_RBCv0_sub-PA001_ses-V1W1",
    "type": "workflow",
    "inputs": {
      "func_ingress_sub-PA001_ses-V1W1": "{'inputnode': {'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0', 'scan': '[Undefined]', 'subject': 'sub-PA001'}, 'check_func_scan': {'func_scan_dct': {'REST_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-REST_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'REST1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'REST1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916360926187292409.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'REST'\", 'TotalReadoutTime': 0.0478349}}, 'facesmatching_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-facesmatching_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'faces_matching'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'faces_matching'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.201710291618139195668993.0.0.0'\", 'SliceTiming': [0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'facesmatching'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916255274423358135.0.0.0'\", 'SliceTiming': [0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-2': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-2_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke2'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke2'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916304963921125272.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}}, 'function_str': 'CPAC.utils.datasource.check_func_scan'}, 'selectrest': {'function_str': 'CPAC.utils.datasource.get_rest', 'resource': 'scan', 'rest_dict': {'REST_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-REST_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'REST1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'REST1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916360926187292409.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'REST'\", 'TotalReadoutTime': 0.0478349}}, 'facesmatching_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-facesmatching_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'faces_matching'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'faces_matching'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.201710291618139195668993.0.0.0'\", 'SliceTiming': [0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'facesmatching'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916255274423358135.0.0.0'\", 'SliceTiming': [0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-2': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-2_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke2'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke2'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916304963921125272.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}}}, 'check_for_s3': {'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'func'}, 'outputspec': {'magnitude': '[Undefined]', 'phase_diff': '[Undefined]'}, 'select_scan_params': {'function_str': 'CPAC.utils.datasource.get_rest', 'resource': 'scan_parameters', 'rest_dict': {'REST_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-REST_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'REST1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'REST1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916360926187292409.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'REST'\", 'TotalReadoutTime': 0.0478349}}, 'facesmatching_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-facesmatching_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'faces_matching'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'faces_matching'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.201710291618139195668993.0.0.0'\", 'SliceTiming': [0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'facesmatching'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916255274423358135.0.0.0'\", 'SliceTiming': [0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-2': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-2_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke2'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke2'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916304963921125272.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}}}, 's3_scan_params': {'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': '[Undefined]'}}",
      "bold_scan_params_sub-PA001_ses-V1W1": "{'function_str': '@Function.sig_imports(\\n    [\\n        \"import json\",\\n        \"import os\",\\n        \"from typing import Literal, Optional\",\\n        \"from CPAC.utils.utils import ScanParameters, PE_DIRECTION, VALID_PATTERNS\",\\n    ]\\n)\\ndef get_scan_params(\\n    subject_id: str,\\n    scan: str,\\n    pipeconfig_start_indx: Optional[int | str],\\n    pipeconfig_stop_indx: Optional[int | str],\\n    data_config_scan_params: Optional[dict | str] = None,\\n) -> tuple[\\n    Optional[str],\\n    Optional[str],\\n    Optional[int],\\n    Optional[int],\\n    Optional[int],\\n    Optional[int],\\n    PE_DIRECTION,\\n    Optional[float],\\n]:\\n    \"\"\"Extract slice timing correction parameters and scan parameters.\\n\\n    Parameters\\n    ----------\\n    subject_id\\n        subject id\\n    scan\\n        scan id\\n    pipeconfig_start_indx\\n        starting volume index as provided in the pipeline config yaml file\\n    pipeconfig_stop_indx\\n        ending volume index as provided in the pipeline config yaml file\\n    data_config_scan_params\\n        file path to scan parameter JSON file listed in data config yaml file or loaded\\n        paramater dictionary\\n\\n    Returns\\n    -------\\n    tr\\n        TR value\\n    tpattern\\n        slice aquisition pattern string or file path\\n    ref_slice\\n        index of reference slice which is used to allign all other slices\\n    first_tr\\n        index of starting TR or starting volume index\\n    last_tr\\n        index of ending TR or ending volume index\\n    pe_direction\\n        https://bids-specification.readthedocs.io/en/stable/glossary.html#phaseencodingdirection-metadata\\n    effective_echo_spacing\\n        https://bids-specification.readthedocs.io/en/stable/glossary.html#effectiveechospacing-metadata\\n    \"\"\"\\n    unit: Literal[\"ms\", \"s\"] = \"s\"\\n\\n    if isinstance(pipeconfig_stop_indx, str):\\n        if \"End\" in pipeconfig_stop_indx or \"end\" in pipeconfig_stop_indx:\\n            pipeconfig_stop_indx = None\\n    params = ScanParameters(data_config_scan_params, subject_id, scan)\\n    # TODO: better handling of errant key values!!!\\n    # TODO: use schema validator to deal with it\\n    # get details from the configuration\\n    tr: float | Literal[\"\"] = params.fetch_and_convert(\\n        [\"RepetitionTime\", \"TR\"], float, \"\"\\n    )\\n    template: Optional[str] = params.fetch_and_convert([\"Template\", \"template\"], str)\\n    pattern: Optional[str] = params.fetch_and_convert(\\n        [\"acquisition\", \"SliceTiming\", \"SliceAcquisitionOrder\"],\\n        str,\\n        None,\\n    )\\n    ref_slice: Optional[int | str] = params.fetch_and_convert([\"reference\"], int, None)\\n    first_tr: Optional[int | str] = params.fetch_and_convert(\\n        [\"first_TR\"], int, pipeconfig_start_indx, False\\n    )\\n    last_tr: Optional[int | str] = params.fetch_and_convert(\\n        [\"last_TR\"], int, pipeconfig_stop_indx, False\\n    )\\n    pe_direction: PE_DIRECTION = params.fetch_and_convert(\\n        [\"PhaseEncodingDirection\"], str, \"\"\\n    )\\n    effective_echo_spacing: Optional[float] = params.fetch_and_convert(\\n        [\"EffectiveEchoSpacing\"], float\\n    )\\n\\n    \"\"\"\\n    if not pattern:\\n        if pipeconfig_tpattern:\\n            if \"Use NIFTI Header\" in pipeconfig_tpattern:\\n                pattern = \\'\\'\\n            else:\\n                pattern = pipeconfig_tpattern\\n    \"\"\"\\n\\n    # pattern can be one of a few keywords, a filename, or blank which\\n    # indicates that the images header information should be used\\n    tpattern_file = None\\n\\n    if pattern and pattern != \"\" and pattern not in VALID_PATTERNS:\\n        if isinstance(pattern, list) or (\\n            \"[\" in pattern and \"]\" in pattern and \",\" in pattern\\n        ):\\n            # if we got the slice timing as a list, from a BIDS-format scan\\n            # parameters JSON file\\n\\n            if not isinstance(pattern, list):\\n                pattern = pattern.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\")\\n\\n            slice_timings = [float(x) for x in pattern]\\n\\n            # write out a tpattern file for AFNI 3dTShift\\n            tpattern_file = os.path.join(os.getcwd(), \"tpattern.txt\")\\n            try:\\n                with open(tpattern_file, \"wt\") as f:\\n                    for time in slice_timings:\\n                        f.write(f\"{time}\\\\n\".replace(\" \", \"\"))\\n            except (OSError, TypeError) as e:\\n                err = (\\n                    \"\\\\n[!] Could not write the slice timing file meant as \"\\n                    \"an input for AFNI 3dTshift (slice timing correction):\"\\n                    f\"\\\\n{tpattern_file}\\\\n\\\\n\"\\n                )\\n                raise OSError(err) from e\\n\\n        elif \".txt\" in pattern and not os.path.exists(pattern):\\n            # if the user provided an acquisition pattern text file for\\n            # 3dTshift\\n            msg = (\\n                f\"Invalid Pattern file path {pattern}, Please provide \"\\n                \"the correct path\"\\n            )\\n            raise Exception(msg)\\n        elif \".txt\" in pattern:\\n            with open(pattern, \"r\") as f:\\n                lines = f.readlines()\\n            if len(lines) < 2:  # noqa: PLR2004\\n                msg = (\\n                    \"Invalid slice timing file format. The file should contain only one\"\\n                    \" value per row. Use new line char as delimiter\"\\n                )\\n                raise Exception(msg)\\n            tpattern_file = pattern\\n            slice_timings = [float(l.rstrip(\"\\\\r\\\\n\")) for l in lines]  # noqa: E741\\n        else:\\n            # this only happens if there is a non-path string set in the data\\n            # config dictionary for acquisition pattern (like \"alt+z\"), except\\n            # the pattern is not listed in that list\\n            err = (\\n                \"\\\\n[!] The slice timing acquisition pattern provided is \"\\n                \"not supported by AFNI 3dTshift:\\\\n\"\\n                f\"{pattern!s}\\\\n\"\\n            )\\n            raise Exception(err)\\n\\n        pattern = tpattern_file\\n\\n        slice_timings.sort()\\n        max_slice_offset = slice_timings[-1]\\n\\n        # checking if the unit of tr and slice timing match or not\\n        # if slice timing in ms convert tr to ms as well\\n        if tr and max_slice_offset > tr:\\n            WFLOGGER.warning(\\n                \"TR is in seconds and slice timings are in \"\\n                \"milliseconds. Converting TR into milliseconds\"\\n            )\\n            tr = tr * 1000\\n            WFLOGGER.info(\"New tr value %s ms\", tr)\\n            unit = \"ms\"\\n\\n    elif tr and tr > 10:  # noqa: PLR2004\\n        # check to see, if TR is in milliseconds, convert it into seconds\\n        WFLOGGER.warning(\"TR is in milliseconds, Converting it into seconds\")\\n        tr = tr / 1000.0\\n        WFLOGGER.info(\"New TR value %s s\", tr)\\n        unit = \"s\"\\n\\n    # swap back in\\n    tr = f\"{tr!s}{unit}\" if tr else \"\"\\n    tpattern = pattern\\n    start_indx = first_tr\\n    stop_indx = last_tr\\n\\n    return (\\n        tr if tr else None,\\n        tpattern if tpattern else None,\\n        template if template else None,\\n        ref_slice,\\n        start_indx,\\n        stop_indx,\\n        pe_direction,\\n        effective_echo_spacing,\\n    )\\n', 'pipeconfig_start_indx': 2, 'pipeconfig_stop_indx': None, 'pipeconfig_tpattern': '[Undefined]', 'pipeconfig_tr': '[Undefined]', 'subject_id': 'sub-PA001'}",
      "anat_T1w_gather_sub-PA001_ses-V1W1": "{'inputnode': {'anat': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/anat/sub-PA001_ses-V1W1_acq-MPR_rec-Norm_T1w.nii.gz', 'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0', 'img_type': 'anat', 'subject': 'sub-PA001'}, 'check_for_s3': {'function_str': 'CPAC.utils.datasource.check_for_s3'}, 'outputspec': {}}",
      "anat_deoblique_0": "{'args': '[Undefined]', 'atrcopy': '[Undefined]', 'atrfloat': '[Undefined]', 'atrint': '[Undefined]', 'atrstring': '[Undefined]', 'deoblique': True, 'duporigin_file': '[Undefined]', 'environ': {}, 'nosaveatr': '[Undefined]', 'saveatr': '[Undefined]', 'space': '[Undefined]', 'xdel': '[Undefined]', 'xorigin': '[Undefined]', 'xyzscale': '[Undefined]', 'ydel': '[Undefined]', 'yorigin': '[Undefined]', 'zdel': '[Undefined]', 'zorigin': '[Undefined]'}",
      "anat_reorient_0": "{'args': '[Undefined]', 'environ': {}, 'master': '[Undefined]', 'num_threads': 1, 'orientation': 'RPI', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'resample_mode': '[Undefined]', 'voxel_size': '[Undefined]'}",
      "anat_skullstrip_ants": "{'inputnode': {'in_files': '[Undefined]', 'in_mask': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}, 'truncate_images_': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '0.01 0.999 256', 'operation': 'TruncateImageIntensity', 'output_image': '[Undefined]'}, 'copy_xform': {}, 'inu_n4_final_': {'args': '[Undefined]', 'bias_image': '[Undefined]', 'bspline_fitting_distance': 200.0, 'bspline_order': '[Undefined]', 'convergence_threshold': 1e-07, 'copy_header': True, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'histogram_sharpening': '[Undefined]', 'mask_image': '[Undefined]', 'n_iterations': [50, 50, 50, 50, 50], 'num_threads': 1, 'output_image': '[Undefined]', 'rescale_intensities': False, 'save_bias': True, 'shrink_factor': 4}, 'init_aff': {'args': '[Undefined]', 'convergence': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e2a1c40>', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'metric': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d669af0>', 'moving_image_mask': '[Undefined]', 'num_threads': 1, 'output_transform': 'initialization.mat', 'principal_axes': False, 'search_factor': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d6698c0>', 'search_grid': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d669540>', 'transform': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d669d20>', 'verbose': True}, 'norm': {'args': '[Undefined]', 'collapse_output_transforms': True, 'convergence_threshold': [1e-08, 1e-08, 1e-09], 'convergence_window_size': [10, 10, 15], 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'fixed_image_mask': '[Undefined]', 'float': True, 'initial_moving_transform_com': '[Undefined]', 'initialize_transforms_per_stage': False, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_initial_moving_transform': '[Undefined]', 'metric': ['MI', 'MI', ['CC', 'CC']], 'metric_item_trait': '[Undefined]', 'metric_stage_trait': '[Undefined]', 'metric_weight': [1.0, 1.0, [0.5, 0.5]], 'metric_weight_item_trait': 1.0, 'metric_weight_stage_trait': '[Undefined]', 'moving_image_mask': '[Undefined]', 'moving_image_masks': '[Undefined]', 'num_threads': 1, 'number_of_iterations': [[1000, 500, 250, 100], [1000, 500, 250, 100], [50, 10, 0]], 'output_inverse_warped_image': '[Undefined]', 'output_transform_prefix': 'anat_to_template', 'output_warped_image': True, 'radius_bins_item_trait': 5, 'radius_bins_stage_trait': '[Undefined]', 'radius_or_number_of_bins': [32, 32, [4, 4]], 'random_seed': '[Undefined]', 'restore_state': '[Undefined]', 'restrict_deformation': '[Undefined]', 'sampling_percentage': [0.25, 0.25, [1.0, 1.0]], 'sampling_percentage_item_trait': '[Undefined]', 'sampling_percentage_stage_trait': '[Undefined]', 'sampling_strategy': ['Regular', 'Regular', ['None', 'None']], 'sampling_strategy_item_trait': '[Undefined]', 'sampling_strategy_stage_trait': '[Undefined]', 'save_state': '[Undefined]', 'shrink_factors': [[8, 4, 2, 1], [8, 4, 2, 1], [4, 2, 1]], 'sigma_units': ['vox', 'vox', 'vox'], 'smoothing_sigmas': [[4.0, 2.0, 1.0, 0.0], [4.0, 2.0, 1.0, 0.0], [2.0, 1.0, 0.0]], 'transform_parameters': ['<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d66a880>', '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d668900>', '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e038a50>'], 'transforms': ['Rigid', 'Affine', 'SyN'], 'use_estimate_learning_rate_once': '[Undefined]', 'use_histogram_matching': True, 'verbose': True, 'winsorize_lower_quantile': 0.025, 'winsorize_upper_quantile': 0.975, 'write_composite_transform': False}, 'map_brainmask': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': True, 'input_image': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'input_image_type': '[Undefined]', 'interpolation': 'Gaussian', 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}, 'inu_n4_': {'args': '[Undefined]', 'bias_image': '[Undefined]', 'bspline_fitting_distance': 200.0, 'bspline_order': '[Undefined]', 'convergence_threshold': 1e-07, 'copy_header': True, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'histogram_sharpening': '[Undefined]', 'mask_image': '[Undefined]', 'n_iterations': [50, 50, 50, 50], 'num_threads': 1, 'output_image': '[Undefined]', 'rescale_intensities': False, 'save_bias': False, 'shrink_factor': 4, 'weight_image': '[Undefined]'}, 'res_target': {'addvox': '[Undefined]', 'apply_smoothing': True, 'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'nn_interp': '[Undefined]', 'num_threads': 1, 'out_spacing': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e038660>', 'output_image': '[Undefined]'}, 'res_tmpl': {'addvox': '[Undefined]', 'apply_smoothing': True, 'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'input_image': '/ants_template/oasis/T_template0.nii.gz', 'nn_interp': '[Undefined]', 'num_threads': 1, 'out_spacing': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211dfa74c0>', 'output_image': '[Undefined]'}, 'thr_brainmask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'input_mask': '[Undefined]', 'inside_value': 1.0, 'mode': '[Undefined]', 'num_threads': 1, 'num_thresholds': '[Undefined]', 'output_image': '[Undefined]', 'outside_value': 0.0, 'th_high': 1.0, 'th_low': 0.5}, 'dil_brainmask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'MD', 'output_image': '[Undefined]'}, 'get_brainmask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, 'apply_mask_': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputnode': {}, 'lap_target': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '1.5 1', 'operation': 'Laplacian', 'output_image': '[Undefined]'}, 'lap_tmpl': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op1': '/ants_template/oasis/T_template0.nii.gz', 'op2': '1.5 1', 'operation': 'Laplacian', 'output_image': '[Undefined]'}, 'mrg_tmpl': {'axis': 'vstack', 'in1': '/ants_template/oasis/T_template0.nii.gz', 'no_flatten': False, 'ravel_inputs': False}, 'mrg_target': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'atropos_wf': {'inputnode': {'in_files': '[Undefined]', 'in_mask': '[Undefined]', 'in_mask_dilated': '[Undefined]'}, 'copy_xform': {}, '03_pad_mask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '01_atropos': {'args': '[Undefined]', 'convergence_threshold': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'icm_use_synchronous_update': '[Undefined]', 'initialization': 'KMeans', 'kmeans_init_centers': '[Undefined]', 'likelihood_model': 'Gaussian', 'maximum_number_of_icm_terations': '[Undefined]', 'mrf_radius': [1, 1, 1], 'mrf_smoothing_factor': 0.1, 'n_iterations': 3, 'num_threads': 1, 'number_of_tissue_classes': 3, 'out_classified_image_name': '[Undefined]', 'output_posteriors_name_template': 'POSTERIOR_%02d.nii.gz', 'posterior_formulation': '[Undefined]', 'prior_image': '[Undefined]', 'prior_probability_threshold': '[Undefined]', 'prior_weighting': '[Undefined]', 'save_posteriors': '[Undefined]', 'use_mixture_model_proportions': '[Undefined]', 'use_random_seed': False}, 'msk_conform': {'function_str': 'def _conform_mask(in_mask, in_reference):\\n    \"\"\"Ensure the mask headers make sense and match those of the T1w.\"\"\"\\n    from pathlib import Path\\n\\n    import nibabel as nib\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    ref = nib.load(in_reference)\\n    nii = nib.load(in_mask)\\n    hdr = nii.header.copy()\\n    hdr.set_data_dtype(\"int16\")\\n    hdr.set_slope_inter(1, 0)\\n\\n    qform, qcode = ref.header.get_qform(coded=True)\\n    if qcode is not None:\\n        hdr.set_qform(qform, int(qcode))\\n\\n    sform, scode = ref.header.get_sform(coded=True)\\n    if scode is not None:\\n        hdr.set_sform(sform, int(scode))\\n\\n    if \"_maths\" in in_mask:  # Cut the name at first _maths occurrence\\n        ext = \"\".join(Path(in_mask).suffixes)\\n        basename = Path(in_mask).name\\n        in_mask = basename.split(\"_maths\")[0] + ext\\n\\n    out_file = fname_presuffix(in_mask, suffix=\"_mask\", newpath=str(Path()))\\n    nii.__class__(nii.get_fdata().astype(\"int16\"), ref.affine, hdr).to_filename(\\n        out_file\\n    )\\n    return out_file\\n'}, '02_pad_segm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '04_sel_labels': {'function_str': 'def _select_labels(in_segm, labels):\\n    from os import getcwd\\n\\n    import numpy as np\\n    import nibabel as nib\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    out_files = []\\n\\n    cwd = getcwd()\\n    nii = nib.load(in_segm)\\n    for l in labels:  # noqa: E741\\n        data = (nii.get_fdata() == l).astype(np.uint8)\\n        newnii = nii.__class__(data, nii.affine, nii.header)\\n        newnii.set_data_dtype(\"uint8\")\\n        out_file = fname_presuffix(in_segm, suffix=\"_class-%02d\" % l, newpath=cwd)\\n        newnii.to_filename(out_file)\\n        out_files.append(out_file)\\n    return out_files\\n', 'labels': [3, 2, 1]}, '05_get_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, '06_get_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, '07_fill_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'FillHoles', 'output_image': '[Undefined]'}, '08_mult_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '08_mult_gm.nii.gz'}, '09_relabel_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '09_relabel_wm.nii.gz', 'second_input': 3.0}, '10_me_csf': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'ME', 'output_image': '[Undefined]'}, '11_add_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '12_relabel_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '12_relabel_gm.nii.gz', 'second_input': 2.0}, '13_add_gm_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '14_sel_labels2': {'function_str': 'def _select_labels(in_segm, labels):\\n    from os import getcwd\\n\\n    import numpy as np\\n    import nibabel as nib\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    out_files = []\\n\\n    cwd = getcwd()\\n    nii = nib.load(in_segm)\\n    for l in labels:  # noqa: E741\\n        data = (nii.get_fdata() == l).astype(np.uint8)\\n        newnii = nii.__class__(data, nii.affine, nii.header)\\n        newnii.set_data_dtype(\"uint8\")\\n        out_file = fname_presuffix(in_segm, suffix=\"_class-%02d\" % l, newpath=cwd)\\n        newnii.to_filename(out_file)\\n        out_files.append(out_file)\\n    return out_files\\n', 'labels': [2, 3]}, '15_add_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '16_me_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'ME', 'output_image': '[Undefined]'}, '17_comp_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, '18_md_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '4', 'operation': 'MD', 'output_image': '[Undefined]'}, '19_fill_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'FillHoles', 'output_image': '[Undefined]'}, '20_add_7_2': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '21_md_7_2': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '5', 'operation': 'MD', 'output_image': '[Undefined]'}, '22_me_7_2': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '5', 'operation': 'ME', 'output_image': '[Undefined]'}, '23_depad_mask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '24_depad_segm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '26_depad_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '25_depad_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '27_depad_csf': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, 'merge_tpms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'outputnode': {}}, 'sel_wm': {'index': [2]}}",
      "brain_extraction_36": "{'args': '[Undefined]', 'environ': {}, 'expr': 'a*step(b)', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}",
      "ANTS_T1_to_template_42": "{'inputspec': {'input_brain': '[Undefined]', 'input_head': '[Undefined]', 'input_mask': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'reference_brain': '[Undefined]', 'reference_head': '[Undefined]', 'reference_mask': '[Undefined]', 'transform': '[Undefined]'}, 'anat_mni_ants_register': {'inputspec': {'ants_para': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}, 'calc_ants_warp': {'function_str': 'def hardcoded_reg(\\n    moving_brain,\\n    reference_brain,\\n    moving_skull,\\n    reference_skull,\\n    ants_para,\\n    moving_mask=None,\\n    reference_mask=None,\\n    fixed_image_mask=None,\\n    interp=None,\\n    reg_with_skull=0,\\n):\\n    \"\"\"Run ANTs registration.\"\"\"\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \"dimensionality\":\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = (\\n                        \"Dimensionality specified in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 2, 3, or 4 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--dimensionality\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"verbose\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"Verbose output option in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--verbose\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"float\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"Float option in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--float\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"collapse-output-transforms\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"collapse-output-transforms specified in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--collapse-output-transforms\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"winsorize-image-intensities\":\\n                if (\\n                    ants_para[para_index][para_type][\"lowerQuantile\"] is None\\n                    or ants_para[para_index][para_type][\"upperQuantile\"] is None\\n                ):\\n                    err_msg = (\\n                        \"Please specifiy lowerQuantile and upperQuantile of ANTs\"\\n                        \" parameters --winsorize-image-intensities in pipeline config.\"\\n                    )\\n                    raise RequiredFieldInvalid(err_msg)\\n                regcmd.append(\"--winsorize-image-intensities\")\\n                _quantile = ants_para[para_index][para_type]\\n                regcmd.append(\\n                    f\"[{_quantile[\\'lowerQuantile\\']},{_quantile[\\'upperQuantile\\']}]\"\\n                )\\n\\n            elif para_type == \"initial-moving-transform\":\\n                if ants_para[para_index][para_type][\"initializationFeature\"] is None:\\n                    err_msg = (\\n                        \"Please specifiy initializationFeature of ANTs parameters in\"\\n                        \" pipeline config.\"\\n                    )\\n                    raise RequiredFieldInvalid(err_msg)\\n                regcmd.append(\"--initial-moving-transform\")\\n                initialization_feature = ants_para[para_index][para_type][\\n                    \"initializationFeature\"\\n                ]\\n                if reg_with_skull == 1:\\n                    regcmd.append(\\n                        f\"[{reference_skull},{moving_skull},{initialization_feature}]\"\\n                    )\\n                else:\\n                    regcmd.append(\\n                        f\"[{reference_brain},{moving_brain},{initialization_feature}]\"\\n                    )\\n\\n            elif para_type == \"transforms\":\\n                for trans_index in range(len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type in (\"Rigid\", \"Affine\"):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"gradientStep\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    f\"Please specifiy {trans_type} Gradient Step of\"\\n                                    \" ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            gradient_step = ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"gradientStep\"]\\n                            regcmd.append(f\"{trans_type}[{gradient_step}]\")\\n\\n                        if trans_type == \"SyN\":\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"gradientStep\"]\\n                                is None\\n                            ):\\n                                err_msg = f\"Please specifiy {trans_type} Gradient Step of ANTs parameters in pipeline config.\"\\n                                raise RequiredFieldInvalid(err_msg)\\n                            SyN_para = []\\n                            SyN_para.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"gradientStep\"]\\n                                )\\n                            )\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"updateFieldVarianceInVoxelSpace\"]\\n                                is not None\\n                            ):\\n                                SyN_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"updateFieldVarianceInVoxelSpace\"]\\n                                    )\\n                                )\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"totalFieldVarianceInVoxelSpace\"]\\n                                is not None\\n                            ):\\n                                SyN_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"totalFieldVarianceInVoxelSpace\"]\\n                                    )\\n                                )\\n                            SyN_para = \",\".join([str(elem) for elem in SyN_para])\\n                            regcmd.append(f\"{trans_type}[{SyN_para}]\")\\n\\n                        if (\\n                            ants_para[para_index][para_type][trans_index][trans_type][\\n                                \"metric\"\\n                            ][\"type\"]\\n                            == \"MI\"\\n                        ):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"metricWeight\"]\\n                                is None\\n                                or ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"numberOfBins\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy metricWeight and numberOfBins for\"\\n                                    \" metric MI of ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            MI_para = []\\n                            _metric = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"metric\"]\\n                            MI_para.append(\\n                                f\"{_metric[\\'metricWeight\\']},{_metric[\\'numberOfBins\\']}\"\\n                            )\\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"metric\"] and ants_para[para_index][\\n                                para_type\\n                            ][trans_index][trans_type][\"metric\"][\\n                                \"samplingStrategy\"\\n                            ] in [\"None\", \"Regular\", \"Random\"]:\\n                                MI_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingStrategy\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"samplingPercentage\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"samplingPercentage\"]\\n                                is not None\\n                            ):\\n                                MI_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingPercentage\"]\\n                                    )\\n                                )\\n                            MI_para = \",\".join([str(elem) for elem in MI_para])\\n                            regcmd.append(\"--metric\")\\n                            if reg_with_skull == 1:\\n                                regcmd.append(\\n                                    f\"MI[{reference_skull},{moving_skull},{MI_para}]\"\\n                                )\\n                            else:\\n                                regcmd.append(\\n                                    f\"MI[{reference_brain},{moving_brain},{MI_para}]\"\\n                                )\\n\\n                        if (\\n                            ants_para[para_index][para_type][trans_index][trans_type][\\n                                \"metric\"\\n                            ][\"type\"]\\n                            == \"CC\"\\n                        ):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"metricWeight\"]\\n                                is None\\n                                or ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"radius\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy metricWeight and radius for metric\"\\n                                    \" CC of ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            CC_para = []\\n                            _metric = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"metric\"]\\n                            CC_para.append(\\n                                f\"{_metric[\\'metricWeight\\']},{_metric[\\'radius\\']}\"\\n                            )\\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"metric\"] and ants_para[para_index][\\n                                para_type\\n                            ][trans_index][trans_type][\"metric\"][\\n                                \"samplingStrategy\"\\n                            ] in [\"None\", \"Regular\", \"Random\"]:\\n                                CC_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingStrategy\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"samplingPercentage\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"samplingPercentage\"]\\n                                is not None\\n                            ):\\n                                CC_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingPercentage\"]\\n                                    )\\n                                )\\n                            CC_para = \",\".join([str(elem) for elem in CC_para])\\n                            regcmd.append(\"--metric\")\\n                            regcmd.append(\\n                                f\"CC[{reference_skull},{moving_skull},{CC_para}]\"\\n                            )\\n\\n                        if (\\n                            \"convergence\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                        ):\\n                            convergence_para = []\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"iteration\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy convergence iteration of ANTs\"\\n                                    \" parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            convergence_para.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"convergence\"][\"iteration\"]\\n                                )\\n                            )\\n                            if (\\n                                \"convergenceThreshold\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"convergenceThreshold\"]\\n                                is not None\\n                            ):\\n                                convergence_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"convergence\"][\"convergenceThreshold\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"convergenceWindowSize\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"convergenceWindowSize\"]\\n                                is not None\\n                            ):\\n                                convergence_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"convergence\"][\"convergenceWindowSize\"]\\n                                    )\\n                                )\\n                            convergence_para = \",\".join(\\n                                [str(elem) for elem in convergence_para]\\n                            )\\n                            regcmd.append(\"--convergence\")\\n                            regcmd.append(f\"[{convergence_para}]\")\\n\\n                        if (\\n                            \"smoothing-sigmas\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"smoothing-sigmas\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"smoothing-sigmas\"]\\n                                )\\n                            )\\n\\n                        if (\\n                            \"shrink-factors\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"shrink-factors\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"shrink-factors\"]\\n                                )\\n                            )\\n\\n                        if (\\n                            \"use-histogram-matching\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                        ):\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"use-histogram-matching\"]:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if (\\n                            \"winsorize-image-intensities\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"][\"lowerQuantile\"]\\n                            is not None\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"][\"upperQuantile\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            _quantile = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"]\\n                            regcmd.append(\\n                                f\"[{_quantile[\\'lowerQuantile\\']},{_quantile[\\'upperQuantile\\']}]\"\\n                            )\\n\\n                        if (\\n                            \"masks\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"masks\"]\\n                            is not None\\n                        ):\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"masks\"]:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(f\"[{reference_mask},{moving_mask}]\")\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \"masks\":\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if (\\n                        not ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        err_msg = (\\n                            \"Masks option in ANTs parameters:\"\\n                            f\" {ants_para[para_index][para_type]} is not supported.\"\\n                            \" Please set `fixed_image_mask` as True. Or set both\"\\n                            \" `fixed_image_mask` and `moving_image_mask` as False\"\\n                        )\\n                        raise NotImplementedError(err_msg)\\n                    if (\\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\n                            \"[\" + str(reference_mask) + \",\" + str(moving_mask) + \"]\"\\n                        )\\n                    elif (\\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\"[\" + str(reference_mask) + \"]\")\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(f\"{interp}\")\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \"command.txt\")\\n    with open(command_file, \"wt\") as f:\\n        f.write(\" \".join(regcmd))\\n\\n    try:\\n        subprocess.check_output(regcmd)\\n    except Exception as e:\\n        msg = (\\n            \"[!] ANTS registration did not complete successfully.\"\\n            f\"\\\\n\\\\nError details:\\\\n{e}\\\\n{e.output}\\\\n\"\\n        )\\n        raise RuntimeError(msg)\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\".\") if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        msg = (\\n            \"\\\\n\\\\n[!] No registration output file found. ANTS registration may not have\"\\n            \" completed successfully.\\\\n\\\\n\"\\n        )\\n        raise RuntimeError(msg)\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': '[Undefined]'}, 'select_forward_initial': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Initial'}, 'select_forward_rigid': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Rigid'}, 'select_forward_affine': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Affine'}, 'select_forward_warp': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Warp'}, 'select_inverse_warp': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Inverse'}, 'outputspec': {'composite_transform': '[Undefined]', 'wait': '[Undefined]'}}, 'write_composite_linear_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-T1w_to-template_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'check_transforms': {'function_str': 'def check_transforms(transform_list):\\n    \"\"\"Check if the transform list is empty.\"\"\"\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in range(len(transform_number))], len(\\n        transform_number\\n    )\\n'}, 'write_composite_invlinear_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-T1w_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_inv_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'check_inv_transforms': {'function_str': 'def check_transforms(transform_list):\\n    \"\"\"Check if the transform list is empty.\"\"\"\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in range(len(transform_number))], len(\\n        transform_number\\n    )\\n'}, 'inverse_transform_flags': {'function_str': 'def generate_inverse_transform_flags(transform_list):\\n    \"\"\"List whether each transform has an inverse.\"\"\"\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if \"WARPINV\" in transform:\\n            inverse_transform_flags.append(False)\\n        if \"updated_affine\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"Initial\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"Rigid\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"Affine\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"InverseWarp\" in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n'}, 'write_composite_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-T1w_to-template_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_all_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'check_all_transforms': {'function_str': 'def check_transforms(transform_list):\\n    \"\"\"Check if the transform list is empty.\"\"\"\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in range(len(transform_number))], len(\\n        transform_number\\n    )\\n'}, 'write_composite_inv_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-T1w_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_all_inv_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'check_all_inv_transforms': {'function_str': 'def check_transforms(transform_list):\\n    \"\"\"Check if the transform list is empty.\"\"\"\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in range(len(transform_number))], len(\\n        transform_number\\n    )\\n'}, 'inverse_all_transform_flags': {'function_str': 'def generate_inverse_transform_flags(transform_list):\\n    \"\"\"List whether each transform has an inverse.\"\"\"\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if \"WARPINV\" in transform:\\n            inverse_transform_flags.append(False)\\n        if \"updated_affine\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"Initial\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"Rigid\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"Affine\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"InverseWarp\" in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n'}}",
      "resampled_T1w-brain-template": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '1mm', 'tag': 'resolution_for_anat', 'template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'template_name': 'T1w-brain-template'}",
      "resampled_T1w-template": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '1mm', 'tag': 'resolution_for_anat', 'template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'template_name': 'T1w-template'}",
      "resampled_T1w-brain-template-mask": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '1mm', 'tag': 'resolution_for_anat', 'template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain_mask.nii.gz', 'template_name': 'T1w-brain-template-mask'}",
      "warp_wholehead_T1w_to_T1template_55": "{'inputspec': {'input_image': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'reference': '[Undefined]', 'transform': '[Undefined]'}, 'apply_warp_warp_wholehead_T1w_to_T1template_55': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}, 'interp_string': {'function_str': 'def interpolation_string(interpolation, reg_tool):\\n    \"\"\"Translate interpolation string to reg_tool-specific string.\"\"\"\\n    if reg_tool == \"ants\":\\n        pass\\n    elif reg_tool == \"fsl\":\\n        # translate to FSL\\n        # warning: flirt requires \\'nearestneighbour\\', but FSL applywarp uses\\n        #          \\'nn\\', so this is designed for applywarp, as all FSL xfm\\'s\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace(\"NearestNeighbor\", \"nn\")\\n    return interpolation\\n', 'reg_tool': 'ants'}, 'single_ants_xfm_to_list': {'function_str': 'def single_ants_xfm_to_list(transform):\\n    \"\"\"Convert a single ANTs transform to a list.\"\"\"\\n    return [transform]\\n'}, 'outputspec': {}}",
      "write_composite_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image': '[Undefined]', 'input_image_type': 0, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-bold_to-template_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True, 'reference_image': '[Undefined]', 'transforms': '[Undefined]'}",
      "warp_T1mask_to_T1template_59": "{'inputspec': {'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}, 'apply_warp_warp_T1mask_to_T1template_59': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}, 'interp_string': {'function_str': 'def interpolation_string(interpolation, reg_tool):\\n    \"\"\"Translate interpolation string to reg_tool-specific string.\"\"\"\\n    if reg_tool == \"ants\":\\n        pass\\n    elif reg_tool == \"fsl\":\\n        # translate to FSL\\n        # warning: flirt requires \\'nearestneighbour\\', but FSL applywarp uses\\n        #          \\'nn\\', so this is designed for applywarp, as all FSL xfm\\'s\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace(\"NearestNeighbor\", \"nn\")\\n    return interpolation\\n', 'reg_tool': 'ants'}, 'single_ants_xfm_to_list': {'function_str': 'def single_ants_xfm_to_list(transform):\\n    \"\"\"Convert a single ANTs transform to a list.\"\"\"\\n    return [transform]\\n'}, 'outputspec': {}}",
      "segment_63": "{'args': '[Undefined]', 'bias_iters': '[Undefined]', 'bias_lowpass': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'hyper': '[Undefined]', 'img_type': 1, 'init_seg_smooth': '[Undefined]', 'init_transform': '[Undefined]', 'iters_afterbias': '[Undefined]', 'manual_seg': '[Undefined]', 'mixel_smooth': '[Undefined]', 'no_bias': '[Undefined]', 'no_pve': '[Undefined]', 'number_classes': '[Undefined]', 'other_priors': '[Undefined]', 'out_basename': 'segment', 'output_biascorrected': '[Undefined]', 'output_biasfield': '[Undefined]', 'output_type': 'NIFTI_GZ', 'probability_maps': True, 'segment_iters': '[Undefined]', 'segments': True, 'use_priors': '[Undefined]', 'verbose': '[Undefined]'}",
      "get_pve_csf_63": "{'args': '-thr 0.5 -uthr 1.5 -bin', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "get_pve_gm_63": "{'args': '-thr 1.5 -uthr 2.5 -bin', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "get_pve_wm_63": "{'args': '-thr 2.5 -uthr 3.5 -bin', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "CSF_63": "{'inputspec': {'brain': '[Undefined]', 'brain_mask': '[Undefined]', 'erosion_mm': '[Undefined]', 'erosion_prop': '[Undefined]', 'mask_erosion_mm': '[Undefined]', 'probability_tissue_map': '[Undefined]', 'template_to_T1_xfm': '[Undefined]', 'threshold': 0.95, 'tissue_class_file': '[Undefined]', 'tissue_prior': '[Undefined]'}, 'threshold_segmentmap_CSF_63': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'binarize_CSF_63': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-bin ', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'outputspec': {'probability_tissue_map': '[Undefined]'}}",
      "GM_63": "{'inputspec': {'brain': '[Undefined]', 'brain_mask': '[Undefined]', 'erosion_mm': '[Undefined]', 'erosion_prop': '[Undefined]', 'mask_erosion_mm': '[Undefined]', 'probability_tissue_map': '[Undefined]', 'template_to_T1_xfm': '[Undefined]', 'threshold': 0.95, 'tissue_class_file': '[Undefined]', 'tissue_prior': '[Undefined]'}, 'threshold_segmentmap_GM_63': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'binarize_GM_63': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-bin ', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'outputspec': {'probability_tissue_map': '[Undefined]'}}",
      "WM_63": "{'inputspec': {'brain': '[Undefined]', 'brain_mask': '[Undefined]', 'erosion_mm': '[Undefined]', 'erosion_prop': '[Undefined]', 'mask_erosion_mm': '[Undefined]', 'probability_tissue_map': '[Undefined]', 'template_to_T1_xfm': '[Undefined]', 'threshold': 0.95, 'tissue_class_file': '[Undefined]', 'tissue_prior': '[Undefined]'}, 'threshold_segmentmap_WM_63': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'binarize_WM_63': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-bin ', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'outputspec': {'probability_tissue_map': '[Undefined]'}}",
      "get_csf_63": "{'function_str': 'def pick_wm_prob_0(probability_maps):\\n    \"\"\"Returns the csf probability map from the list of segmented\\n    probability maps.\\n\\n    Parameters\\n    ----------\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n    \"\"\"\\n    if isinstance(probability_maps, list):\\n        if len(probability_maps) == 1:\\n            probability_maps = probability_maps[0]\\n        for filename in probability_maps:\\n            if filename.endswith(\"prob_0.nii.gz\"):\\n                return filename\\n    return None\\n'}",
      "func_deoblique_2": "{'args': '[Undefined]', 'atrcopy': '[Undefined]', 'atrfloat': '[Undefined]', 'atrint': '[Undefined]', 'atrstring': '[Undefined]', 'deoblique': True, 'duporigin_file': '[Undefined]', 'environ': {}, 'nosaveatr': '[Undefined]', 'saveatr': '[Undefined]', 'space': '[Undefined]', 'xdel': '[Undefined]', 'xorigin': '[Undefined]', 'xyzscale': '[Undefined]', 'ydel': '[Undefined]', 'yorigin': '[Undefined]', 'zdel': '[Undefined]', 'zorigin': '[Undefined]'}",
      "func_reorient_2": "{'args': '[Undefined]', 'environ': {}, 'master': '[Undefined]', 'num_threads': 1, 'orientation': 'RPI', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'resample_mode': '[Undefined]', 'voxel_size': '[Undefined]'}",
      "edit_func_81": "{'inputspec': {'func': '[Undefined]', 'start_idx': 2, 'stop_idx': None}, 'func_get_idx': {'function_str': 'def get_idx(in_files, stop_idx=None, start_idx=None):\\n    \"\"\"Get the first and the last slice for the functional run.\\n\\n    Verify the user specified first and last slice. If the values are not valid,\\n    calculate and return the very first and the last slice.\\n\\n    Parameters\\n    ----------\\n    in_file : str (nifti file)\\n       Path to input functional run\\n\\n    stop_idx : int\\n        Last volume to be considered, specified by user\\n        in the configuration file\\n\\n    stop_idx : int\\n        First volume to be considered, specified by user\\n        in the configuration file\\n\\n    Returns\\n    -------\\n    stop_idx :  int\\n        Value of first slice to consider for the functional run\\n\\n    start_idx : int\\n        Value of last slice to consider for the functional run\\n\\n    \"\"\"\\n    # Import packages\\n    from nibabel import load\\n\\n    # Init variables\\n    img = load(in_files)\\n    hdr = img.header\\n    shape = hdr.get_data_shape()\\n\\n    # Check to make sure the input file is 4-dimensional\\n    if len(shape) != 4:  # noqa: PLR2004\\n        raise TypeError(\"Input nifti file: %s is not a 4D file\" % in_files)\\n    # Grab the number of volumes\\n    nvols = int(hdr.get_data_shape()[3])\\n\\n    if (start_idx is None) or (int(start_idx) < 0) or (int(start_idx) > (nvols - 1)):\\n        startidx = 0\\n    else:\\n        startidx = int(start_idx)\\n\\n    if (stop_idx in [None, \"End\"]) or (int(stop_idx) > (nvols - 1)):\\n        stopidx = nvols - 1\\n    else:\\n        stopidx = int(stop_idx)\\n\\n    return stopidx, startidx\\n'}, 'func_drop_trs': {'args': '[Undefined]', 'environ': {}, 'expr': 'a', 'in_file_b': '[Undefined]', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]'}, 'outputspec': {}}",
      "func_get_fmriprep_ref_84": "{'function_str': 'def estimate_reference_image(in_file):\\n    \"\"\"fMRIPrep-style BOLD reference.\\n\\n        Generate a reference 3D map from BOLD and SBRef EPI images for BOLD datasets.\\n\\n        Given a 4D BOLD file[...], estimate a reference\\n        image for subsequent motion estimation and coregistration steps.\\n        For the case of BOLD datasets, it estimates a number of T1w saturated volumes\\n        (non-steady state at the beginning of the scan) and calculates the median\\n        across them.\\n        Otherwise (SBRefs or detected zero non-steady state frames), a median of\\n        of a subset of motion corrected volumes is used.\\n\\n    Ref: https://github.com/nipreps/niworkflows/blob/6d4f2b5/niworkflows/interfaces/registration.py#L446-L549\\n    \"\"\"\\n    # STATEMENT OF CHANGES:\\n    #     This function is derived from sources licensed under the Apache-2.0 terms,\\n    #     and this function has been changed.\\n\\n    # CHANGES:\\n    #     * Converted from a nipype.interfaces.base.SimpleInterface class to a function\\n    #     * Removed 3D image capabilities (now requires 4D image for in_file)\\n    #     * Modified docstring to reflect local changes\\n    #     * Updated style to match C-PAC codebase\\n\\n    # ORIGINAL WORK\\'S ATTRIBUTION NOTICE:\\n    #    Copyright (c) 2016, the CRN developers team.\\n    #    All rights reserved.\\n\\n    #    Redistribution and use in source and binary forms, with or without\\n    #    modification, are permitted provided that the following conditions are met:\\n\\n    #    * Redistributions of source code must retain the above copyright notice, this\\n    #      list of conditions and the following disclaimer.\\n\\n    #    * Redistributions in binary form must reproduce the above copyright notice,\\n    #      this list of conditions and the following disclaimer in the documentation\\n    #      and/or other materials provided with the distribution.\\n\\n    #   * Neither the name of niworkflows nor the names of its\\n    #      contributors may be used to endorse or promote products derived from\\n    #      this software without specific prior written permission.\\n\\n    #    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\\n    #    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n    #    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n    #    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n    #    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n    #    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n    #    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n    #    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n    #    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n    #    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\n    #    Licensed under the Apache License, Version 2.0 (the \"License\");\\n    #    you may not use this file except in compliance with the License.\\n    #    You may obtain a copy of the License at\\n\\n    #        http://www.apache.org/licenses/LICENSE-2.0\\n\\n    #    Unless required by applicable law or agreed to in writing, software\\n    #    distributed under the License is distributed on an \"AS IS\" BASIS,\\n    #    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    #    See the License for the specific language governing permissions and\\n    #    limitations under the License.\\n\\n    # Modifications copyright (C) 2021 - 2024  C-PAC Developers\\n    import os\\n\\n    import numpy as np\\n    import nibabel as nib\\n\\n    ref_input = [in_file]\\n    mc_out_file = \"bold_mc.nii.gz\"\\n\\n    # Build the nibabel spatial image we will work with\\n    ref_im = []\\n    for im_i in ref_input:\\n        max_new_volumes = 50 - len(ref_im)\\n        if max_new_volumes <= 0:\\n            break\\n        nib_i = nib.squeeze_image(nib.load(im_i))\\n        if nib_i.dataobj.ndim == 3:  # noqa: PLR2004\\n            ref_im.append(nib_i)\\n        elif nib_i.dataobj.ndim == 4:  # noqa: PLR2004\\n            ref_im += nib.four_to_three(nib_i.slicer[..., :max_new_volumes])\\n    ref_im = nib.squeeze_image(nib.concat_images(ref_im))\\n\\n    out_file = os.path.join(os.getcwd(), \"ref_bold.nii.gz\")\\n\\n    # Slicing may induce inconsistencies with shape-dependent values in extensions.\\n    # For now, remove all. If this turns out to be a mistake, we can select extensions\\n    # that don\\'t break pipeline stages.\\n    ref_im.header.extensions.clear()\\n\\n    if ref_im.shape[-1] > 40:  # noqa: PLR2004\\n        ref_im = nib.Nifti1Image(\\n            ref_im.dataobj[:, :, :, 20:40], ref_im.affine, ref_im.header\\n        )\\n\\n    ref_name = os.path.join(os.getcwd(), \"slice.nii.gz\")\\n    ref_im.to_filename(ref_name)\\n    os.system(f\"3dvolreg -Fourier -twopass -zpad 4 -prefix {mc_out_file} {ref_name}\")\\n\\n    mc_slice_nii = nib.load(mc_out_file)\\n\\n    median_image_data = np.median(mc_slice_nii.get_fdata(), axis=3)\\n\\n    nib.Nifti1Image(median_image_data, ref_im.affine, ref_im.header).to_filename(\\n        out_file\\n    )\\n\\n    return out_file\\n'}",
      "func_motion_correct_mcflirt_87": "{'args': '[Undefined]', 'bins': '[Undefined]', 'cost': '[Undefined]', 'dof': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'init': '[Undefined]', 'interpolation': '[Undefined]', 'mean_vol': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'ref_vol': '[Undefined]', 'rotation': '[Undefined]', 'save_mats': True, 'save_plots': True, 'save_rms': True, 'scaling': '[Undefined]', 'smooth': '[Undefined]', 'stages': '[Undefined]', 'stats_imgs': '[Undefined]', 'use_contour': '[Undefined]', 'use_gradient': '[Undefined]'}",
      "norm_motion_params_87": "{'function_str': 'def normalize_motion_parameters(in_file):\\n    \"\"\"Convert FSL mcflirt motion parameters to AFNI space.\"\"\"\\n    import os\\n\\n    import numpy as np\\n\\n    motion_params = np.genfromtxt(in_file).T\\n    motion_params = np.vstack(\\n        (\\n            motion_params[2, :] * 180 / np.pi,\\n            motion_params[0, :] * 180 / np.pi,\\n            -motion_params[1, :] * 180 / np.pi,\\n            motion_params[5, :],\\n            motion_params[3, :],\\n            -motion_params[4, :],\\n        )\\n    )\\n    motion_params = np.transpose(motion_params)\\n\\n    out_file = os.path.join(os.getcwd(), \"motion_params.tsv\")\\n    np.savetxt(out_file, motion_params)\\n\\n    return out_file\\n'}",
      "get_mcflirt_rms_abs_87": "{'function_str': 'def get_mcflirt_rms_abs(rms_files):\\n    for path in rms_files:\\n        if \"abs.rms\" in path:\\n            abs_file = path\\n        if \"rel.rms\" in path:\\n            rels_file = path\\n    return abs_file, rels_file\\n'}",
      "func_slice_timing_correction_94": "{'inputspec': {'func_ts': '[Undefined]', 'tpattern': '[Undefined]', 'tr': '[Undefined]'}, 'slice_timing': {'args': '[Undefined]', 'environ': {}, 'ignore': '[Undefined]', 'interp': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'rlt': '[Undefined]', 'rltplus': '[Undefined]', 'slice_encoding_direction': 'k', 'slice_timing': '[Undefined]', 'tslice': '[Undefined]', 'tzero': '[Undefined]'}, 'outputspec': {}}",
      "func_mean_97": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
      "func_motion_correct_mcflirt_100": "{'args': '[Undefined]', 'bins': '[Undefined]', 'cost': '[Undefined]', 'dof': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'init': '[Undefined]', 'interpolation': '[Undefined]', 'mean_vol': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'ref_vol': '[Undefined]', 'rotation': '[Undefined]', 'save_mats': True, 'save_plots': True, 'save_rms': True, 'scaling': '[Undefined]', 'smooth': '[Undefined]', 'stages': '[Undefined]', 'stats_imgs': '[Undefined]', 'use_contour': '[Undefined]', 'use_gradient': '[Undefined]'}",
      "norm_motion_params_100": "{'function_str': 'def normalize_motion_parameters(in_file):\\n    \"\"\"Convert FSL mcflirt motion parameters to AFNI space.\"\"\"\\n    import os\\n\\n    import numpy as np\\n\\n    motion_params = np.genfromtxt(in_file).T\\n    motion_params = np.vstack(\\n        (\\n            motion_params[2, :] * 180 / np.pi,\\n            motion_params[0, :] * 180 / np.pi,\\n            -motion_params[1, :] * 180 / np.pi,\\n            motion_params[5, :],\\n            motion_params[3, :],\\n            -motion_params[4, :],\\n        )\\n    )\\n    motion_params = np.transpose(motion_params)\\n\\n    out_file = os.path.join(os.getcwd(), \"motion_params.tsv\")\\n    np.savetxt(out_file, motion_params)\\n\\n    return out_file\\n'}",
      "get_mcflirt_rms_abs_100": "{'function_str': 'def get_mcflirt_rms_abs(rms_files):\\n    for path in rms_files:\\n        if \"abs.rms\" in path:\\n            abs_file = path\\n        if \"rel.rms\" in path:\\n            rels_file = path\\n    return abs_file, rels_file\\n'}",
      "resampled_FSL-AFNI-bold-ref": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '2mm', 'tag': 'func_preproc_outputs', 'template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'template_name': 'FSL-AFNI-bold-ref'}",
      "init_aff_104": "{'args': '[Undefined]', 'convergence': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e245cb0>', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'metric': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e245af0>', 'moving_image_mask': '[Undefined]', 'num_threads': 1, 'output_transform': 'initialization.mat', 'principal_axes': False, 'search_factor': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebf40>', 'search_grid': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebdf0>', 'transform': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebd80>', 'verbose': True}",
      "resampled_FSL-AFNI-brain-mask": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '2mm', 'tag': 'func_preproc_outputs', 'template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain_mask.nii.gz', 'template_name': 'FSL-AFNI-brain-mask'}",
      "norm_104": "{'args': '[Undefined]', 'collapse_output_transforms': True, 'convergence_threshold': [1e-09], 'convergence_window_size': [10], 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'fixed_image_mask': '[Undefined]', 'fixed_image_masks': '[Undefined]', 'float': True, 'initial_moving_transform_com': '[Undefined]', 'initialize_transforms_per_stage': False, 'interpolation': 'Linear', 'interpolation_parameters': '[Undefined]', 'invert_initial_moving_transform': '[Undefined]', 'metric': ['Mattes'], 'metric_item_trait': '[Undefined]', 'metric_stage_trait': '[Undefined]', 'metric_weight': [1.0], 'metric_weight_item_trait': 1.0, 'metric_weight_stage_trait': '[Undefined]', 'moving_image_mask': '[Undefined]', 'moving_image_masks': '[Undefined]', 'num_threads': 1, 'number_of_iterations': [[200]], 'output_inverse_warped_image': '[Undefined]', 'output_transform_prefix': 'transform', 'output_warped_image': '[Undefined]', 'radius_bins_item_trait': 5, 'radius_bins_stage_trait': '[Undefined]', 'radius_or_number_of_bins': [64], 'random_seed': '[Undefined]', 'restore_state': '[Undefined]', 'restrict_deformation': '[Undefined]', 'sampling_percentage': [0.2], 'sampling_percentage_item_trait': '[Undefined]', 'sampling_percentage_stage_trait': '[Undefined]', 'sampling_strategy': ['Random', 'Random'], 'sampling_strategy_item_trait': '[Undefined]', 'sampling_strategy_stage_trait': '[Undefined]', 'save_state': '[Undefined]', 'shrink_factors': [[2]], 'sigma_units': ['mm', 'mm', 'mm'], 'smoothing_sigmas': [[2.0]], 'transform_parameters': ['<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebd10>'], 'transforms': ['Affine'], 'use_estimate_learning_rate_once': '[Undefined]', 'use_histogram_matching': [True], 'verbose': False, 'winsorize_lower_quantile': 0.05, 'winsorize_upper_quantile': 0.98, 'write_composite_transform': False}",
      "resampled_FSL-AFNI-brain-probseg": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '2mm', 'tag': 'func_preproc_outputs', 'template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain_mask.nii.gz', 'template_name': 'FSL-AFNI-brain-probseg'}",
      "map_brainmask_104": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': True, 'input_image_type': '[Undefined]', 'interpolation': 'BSpline', 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
      "binarize_mask_104": "{'args': '-thr 0.85 -bin', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "pre_mask_dilate_104": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': 'char', 'kernel_file': '[Undefined]', 'kernel_shape': 'sphere', 'kernel_size': 3.0, 'nan2zeros': '[Undefined]', 'operation': 'max', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "print_header_104": "{'args': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'what_information': 4}",
      "set_direction_104": "{'args': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'num_threads': 1}",
      "n4_correct_104": "{'args': '[Undefined]', 'bias_image': '[Undefined]', 'bspline_fitting_distance': 200.0, 'bspline_order': '[Undefined]', 'convergence_threshold': '[Undefined]', 'copy_header': True, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'histogram_sharpening': '[Undefined]', 'n_iterations': '[Undefined]', 'num_threads': 1, 'output_image': '[Undefined]', 'rescale_intensities': False, 'save_bias': False, 'shrink_factor': '[Undefined]', 'weight_image': '[Undefined]'}",
      "skullstrip_first_pass_104": "{'args': '[Undefined]', 'center': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'frac': 0.2, 'functional': False, 'mask': True, 'mesh': '[Undefined]', 'no_output': '[Undefined]', 'out_file': '[Undefined]', 'outline': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding': '[Undefined]', 'radius': '[Undefined]', 'reduce_bias': '[Undefined]', 'remove_eyes': '[Undefined]', 'robust': '[Undefined]', 'skull': '[Undefined]', 'surfaces': '[Undefined]', 't2_guided': '[Undefined]', 'threshold': '[Undefined]', 'vertical_gradient': '[Undefined]'}",
      "skullstrip_first_dilate_104": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': 'char', 'kernel_file': '[Undefined]', 'kernel_shape': 'sphere', 'kernel_size': 6.0, 'nan2zeros': '[Undefined]', 'operation': 'max', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "skullstrip_first_mask_104": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "unifize_104": "{'args': '-clfrac 0.2 -rbt 18.3 65.0 90.0', 'cl_frac': '[Undefined]', 'environ': {}, 'epi': '[Undefined]', 'gm': '[Undefined]', 'no_duplo': '[Undefined]', 'num_threads': 1, 'out_file': 'uni.nii.gz', 'outputtype': 'NIFTI_GZ', 'quiet': '[Undefined]', 'rbt': '[Undefined]', 'scale_file': '[Undefined]', 't2': True, 't2_up': '[Undefined]', 'urad': '[Undefined]'}",
      "skullstrip_second_pass_104": "{'args': '[Undefined]', 'brain_file': '[Undefined]', 'clfrac': '[Undefined]', 'dilate': 1, 'environ': {}, 'erode': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
      "combine_masks_104": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'operand_value': '[Undefined]', 'operation': 'mul', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "extract_ref_brain_bold_104": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "func_extract_brain_111": "{'args': '[Undefined]', 'environ': {}, 'expr': 'a*b', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}",
      "gen_motion_stats_115": "{'inputspec': {'mask': '[Undefined]', 'max_displacement': '[Undefined]', 'motion_correct': '[Undefined]', 'movement_parameters': '[Undefined]', 'rels_displacement': '[Undefined]', 'transformations': '[Undefined]'}, 'cal_DVARS': {'args': '[Undefined]', 'environ': {}, 'method': 'dvars', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'AFNI'}, 'cal_DVARS_strip': {'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.DVARS_strip_t0'}, 'outputspec': {}, 'calculate_FD': {'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_P'}, 'calculate_FDJ': {'calc_from': 'rms', 'center': '[Undefined]', 'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_J'}, 'get_all_motion_parameters': {'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.get_allmotion'}, 'calc_motion_parameters': {'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.gen_motion_parameters', 'motion_correct_tool': 'mcflirt'}, 'calc_power_parameters': {'fdj': '[Undefined]', 'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.gen_power_parameters', 'motion_correct_tool': 'mcflirt'}}",
      "func_to_anat_FLIRT_132": "{'inputspec': {'anat': '[Undefined]', 'dof': 6, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'func': '[Undefined]', 'interp': 'trilinear'}, 'linear_func_to_anat': {'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': 'corratio', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'outputspec': {}}",
      "func_to_anat_bbreg_132": "{'inputspec': {'anat': '[Undefined]', 'anat_wm_segmentation': '[Undefined]', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch', 'bbr_wm_mask_args': '-bin', 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'func': '[Undefined]', 'linear_reg_matrix': '[Undefined]'}, 'wm_bb_mask': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'bbreg_func_to_anat': {'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': 6, 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'outputspec': {}}",
      "create_func_to_T1wtemplate_xfm_141": "{'inputspec': {'T1w-brain-template_funcreg': '[Undefined]', 'T1w_to_template_xfm': '[Undefined]', 'blip_warp': '[Undefined]', 'coreg_xfm': '[Undefined]', 'input_brain': '[Undefined]', 'mean_bold': '[Undefined]', 'template_to_T1w_xfm': '[Undefined]'}, 'fsl_reg_2_itk': {'args': '[Undefined]', 'environ': {}, 'fsl2ras': True, 'itk_transform': True}, 'change_transform_type': {'function_str': 'def change_itk_transform_type(input_affine_file):\\n    \"\"\"Produce an updated affine file for ANTs compatibility.\\n\\n    This function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt).\\n\\n    It then modifies the \\'Transform Type\\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \\'updated_affine.txt\\'\\n    \"\"\"\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n        for line in f:\\n            if \"Transform:\" in line:\\n                if \"MatrixOffsetTransformBase_double_3_3\" in line:\\n                    transform_line = \"Transform: AffineTransform_double_3_3\\\\n\"\\n                    new_file_lines.append(transform_line)\\n            else:\\n                new_file_lines.append(line)\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \"updated_affine.txt\")\\n\\n    with open(updated_affine_file, \"wt\") as f:\\n        for line in new_file_lines:\\n            f.write(line)\\n\\n    return updated_affine_file\\n'}, 'write_composite_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-bold_to-template_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_all_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'write_composite_inv_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': [True, False], 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-bold_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_inv_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}}",
      "resampled_T1w-brain-template-funcreg": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '2mm', 'tag': 'func_preproc_outputs', 'template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'template_name': 'T1w-brain-template-funcreg'}",
      "write_composite_inv_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image': '[Undefined]', 'input_image_type': 0, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': [True, False], 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-bold_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True, 'reference_image': '[Undefined]', 'transforms': '[Undefined]'}",
      "erode_T1w_mask_149": "{'inputspec': {'brain_mask': '[Undefined]', 'erode_mm': '[Undefined]', 'erode_prop': None, 'mask': '[Undefined]', 'mask_erode_mm': 30}, 'erode_skullstrip_mask': {'function_str': 'def mask_erosion(\\n    roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None, mask_erosion_prop=None\\n):\\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask.\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment mask\\n\\n    skullstrip_mask : string\\n        Path to skull-stripped brain mask\\n\\n    mask_erosion_prop : float\\n        Target volume ratio for skull-stripped brain mask\\n\\n    Returns\\n    -------\\n    output_roi_mask : string\\n        Path to eroded segment mask\\n\\n    eroded_skullstrip_mask : string\\n        Path to eroded skull-stripped brain mask\\n    \"\"\"\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L916-L935\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n    roi_mask_img = nib.load(roi_mask)\\n    roi_mask_data = roi_mask_img.get_fdata()\\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop\\n    )\\n\\n    if erode_in:\\n        # pylint: disable=invalid-unary-operand-type\\n        roi_mask_data[~skullstrip_mask_data] = 0\\n\\n    hdr = roi_mask_img.header\\n    output_roi_mask_img = nib.Nifti1Image(\\n        roi_mask_data, header=hdr, affine=roi_mask_img.affine\\n    )\\n    output_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_eroded_mask.nii.gz\")\\n    output_roi_mask_img.to_filename(output_roi_mask)\\n\\n    hdr = skullstrip_mask_img.header\\n    output_skullstrip_mask_img = nib.Nifti1Image(\\n        skullstrip_mask_data, header=hdr, affine=skullstrip_mask_img.affine\\n    )\\n    eroded_skullstrip_mask = os.path.join(os.getcwd(), \"eroded_skullstrip_mask.nii.gz\")\\n\\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\\n\\n    return output_roi_mask, eroded_skullstrip_mask\\n'}, 'outputspec': {}}",
      "erode_CSF_mask_152": "{'inputspec': {'brain_mask': '[Undefined]', 'erode_mm': None, 'erode_prop': 0.9, 'mask': '[Undefined]', 'mask_erode_mm': None}, 'erode_skullstrip_mask': {'function_str': 'def mask_erosion(\\n    roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None, mask_erosion_prop=None\\n):\\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask.\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment mask\\n\\n    skullstrip_mask : string\\n        Path to skull-stripped brain mask\\n\\n    mask_erosion_prop : float\\n        Target volume ratio for skull-stripped brain mask\\n\\n    Returns\\n    -------\\n    output_roi_mask : string\\n        Path to eroded segment mask\\n\\n    eroded_skullstrip_mask : string\\n        Path to eroded skull-stripped brain mask\\n    \"\"\"\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L916-L935\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n    roi_mask_img = nib.load(roi_mask)\\n    roi_mask_data = roi_mask_img.get_fdata()\\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop\\n    )\\n\\n    if erode_in:\\n        # pylint: disable=invalid-unary-operand-type\\n        roi_mask_data[~skullstrip_mask_data] = 0\\n\\n    hdr = roi_mask_img.header\\n    output_roi_mask_img = nib.Nifti1Image(\\n        roi_mask_data, header=hdr, affine=roi_mask_img.affine\\n    )\\n    output_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_eroded_mask.nii.gz\")\\n    output_roi_mask_img.to_filename(output_roi_mask)\\n\\n    hdr = skullstrip_mask_img.header\\n    output_skullstrip_mask_img = nib.Nifti1Image(\\n        skullstrip_mask_data, header=hdr, affine=skullstrip_mask_img.affine\\n    )\\n    eroded_skullstrip_mask = os.path.join(os.getcwd(), \"eroded_skullstrip_mask.nii.gz\")\\n\\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\\n\\n    return output_roi_mask, eroded_skullstrip_mask\\n'}, 'erode_mask': {'function_str': 'def erosion(roi_mask=None, erosion_mm=None, erosion_prop=None):\\n    \"\"\"Returns eroded tissue segment mask.\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment (ROI) mask\\n\\n    erosion_prop : float\\n        Target volume ratio for erosion segment mask\\n\\n    Returns\\n    -------\\n    eroded_roi_mask : string\\n        Path to eroded segment mask\\n    \"\"\"\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L937-L954\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n    roi_mask_img, _, roi_mask_data = _erode(roi_mask, erosion_mm, erosion_prop)\\n\\n    hdr = roi_mask_img.header\\n    output_img = nib.Nifti1Image(roi_mask_data, header=hdr, affine=roi_mask_img.affine)\\n    eroded_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_mask.nii.gz\")\\n\\n    output_img.to_filename(eroded_roi_mask)\\n\\n    return eroded_roi_mask\\n'}, 'outputspec': {}}",
      "erode_WM_mask_155": "{'inputspec': {'brain_mask': '[Undefined]', 'erode_mm': None, 'erode_prop': 0.6, 'mask': '[Undefined]', 'mask_erode_mm': None}, 'erode_skullstrip_mask': {'function_str': 'def mask_erosion(\\n    roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None, mask_erosion_prop=None\\n):\\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask.\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment mask\\n\\n    skullstrip_mask : string\\n        Path to skull-stripped brain mask\\n\\n    mask_erosion_prop : float\\n        Target volume ratio for skull-stripped brain mask\\n\\n    Returns\\n    -------\\n    output_roi_mask : string\\n        Path to eroded segment mask\\n\\n    eroded_skullstrip_mask : string\\n        Path to eroded skull-stripped brain mask\\n    \"\"\"\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L916-L935\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n    roi_mask_img = nib.load(roi_mask)\\n    roi_mask_data = roi_mask_img.get_fdata()\\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop\\n    )\\n\\n    if erode_in:\\n        # pylint: disable=invalid-unary-operand-type\\n        roi_mask_data[~skullstrip_mask_data] = 0\\n\\n    hdr = roi_mask_img.header\\n    output_roi_mask_img = nib.Nifti1Image(\\n        roi_mask_data, header=hdr, affine=roi_mask_img.affine\\n    )\\n    output_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_eroded_mask.nii.gz\")\\n    output_roi_mask_img.to_filename(output_roi_mask)\\n\\n    hdr = skullstrip_mask_img.header\\n    output_skullstrip_mask_img = nib.Nifti1Image(\\n        skullstrip_mask_data, header=hdr, affine=skullstrip_mask_img.affine\\n    )\\n    eroded_skullstrip_mask = os.path.join(os.getcwd(), \"eroded_skullstrip_mask.nii.gz\")\\n\\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\\n\\n    return output_roi_mask, eroded_skullstrip_mask\\n'}, 'erode_mask': {'function_str': 'def erosion(roi_mask=None, erosion_mm=None, erosion_prop=None):\\n    \"\"\"Returns eroded tissue segment mask.\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment (ROI) mask\\n\\n    erosion_prop : float\\n        Target volume ratio for erosion segment mask\\n\\n    Returns\\n    -------\\n    eroded_roi_mask : string\\n        Path to eroded segment mask\\n    \"\"\"\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L937-L954\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n    roi_mask_img, _, roi_mask_data = _erode(roi_mask, erosion_mm, erosion_prop)\\n\\n    hdr = roi_mask_img.header\\n    output_img = nib.Nifti1Image(roi_mask_data, header=hdr, affine=roi_mask_img.affine)\\n    eroded_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_mask.nii.gz\")\\n\\n    output_img.to_filename(eroded_roi_mask)\\n\\n    return eroded_roi_mask\\n'}, 'outputspec': {}}",
      "nuisance_regressors_36_parameter_158": "{'inputspec': {'anat_to_func_linear_xfm_file_path': '[Undefined]', 'anat_to_mni_linear_xfm_file_path': '[Undefined]', 'anatomical_eroded_brain_mask_file_path': '[Undefined]', 'anatomical_file_path': '[Undefined]', 'creds_path': '[Undefined]', 'csf_mask_file_path': '[Undefined]', 'dl_dir': '[Undefined]', 'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'func_to_anat_linear_xfm_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'gm_mask_file_path': '[Undefined]', 'lat_ventricles_mask_file_path': '[Undefined]', 'mni_to_anat_linear_xfm_file_path': '[Undefined]', 'motion_parameters_file_path': '[Undefined]', 'selector': '[Undefined]', 'tr': '[Undefined]', 'wm_mask_file_path': '[Undefined]'}, 'functional_mean': {'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'Anatomical_2mm_flirt': {'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'Functional_2mm_flirt': {'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': True, 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'WhiteMatter_2mm_flirt': {'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'WhiteMatter_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'WhiteMatter_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'WhiteMatter_mean': {'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}, 'CerebrospinalFluid_2mm_flirt': {'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'CerebrospinalFluid_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'CerebrospinalFluid_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'CerebrospinalFluid_mean': {'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}, 'GlobalSignal_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'GlobalSignal_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'GlobalSignal_mean': {'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}, 'build_nuisance_regressors': {'acompcor_file_path': '[Undefined]', 'censor_file_path': '[Undefined]', 'custom_file_paths': '[Undefined]', 'function_str': 'CPAC.nuisance.nuisance.gather_nuisance', 'grey_matter_summary_file_path': '[Undefined]', 'selector': {'Name': '36_parameter', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'GlobalSignal': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}}, 'tcompcor_file_path': '[Undefined]'}, 'outputspec': {}}",
      "anat_to_func_linear_xfm_36_parameter_158": "{'args': '[Undefined]', 'concat_xfm': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fix_scale_skew': '[Undefined]', 'in_file2': '[Undefined]', 'invert_xfm': True, 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "write_composite_invlinear_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image': '[Undefined]', 'input_image_type': 0, 'interpolation': 'Linear', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-T1w_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True, 'reference_image': '[Undefined]', 'transforms': '[Undefined]'}",
      "write_composite_linear_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image': '[Undefined]', 'input_image_type': 0, 'interpolation': 'Linear', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-T1w_to-template_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True, 'reference_image': '[Undefined]', 'transforms': '[Undefined]'}",
      "nuisance_regressors_aCompCor_158": "{'inputspec': {'anat_to_func_linear_xfm_file_path': '[Undefined]', 'anat_to_mni_linear_xfm_file_path': '[Undefined]', 'anatomical_eroded_brain_mask_file_path': '[Undefined]', 'anatomical_file_path': '[Undefined]', 'creds_path': '[Undefined]', 'csf_mask_file_path': '[Undefined]', 'dl_dir': '[Undefined]', 'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'func_to_anat_linear_xfm_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'gm_mask_file_path': '[Undefined]', 'lat_ventricles_mask_file_path': '[Undefined]', 'mni_to_anat_linear_xfm_file_path': '[Undefined]', 'motion_parameters_file_path': '[Undefined]', 'selector': '[Undefined]', 'tr': '[Undefined]', 'wm_mask_file_path': '[Undefined]'}, 'functional_mean': {'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'Anatomical_2mm_flirt': {'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'Functional_2mm_flirt': {'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': True, 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'WhiteMatter_2mm_flirt': {'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'WhiteMatter_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'WhiteMatter_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'WhiteMatter_mean': {'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}, 'CerebrospinalFluid_2mm_flirt': {'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'CerebrospinalFluid_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'CerebrospinalFluid_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'CerebrospinalFluid_mean': {'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}, 'aCompCor_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'aCompCor_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'aCompCor_DetrendPC': {'function_str': 'def calc_compcor_components(data_filename, num_components, mask_filename):\\n    if num_components < 1:\\n        msg = f\"Improper value for num_components ({num_components}), should be >= 1.\"\\n        raise ValueError(msg)\\n\\n    try:\\n        image_data = nib.load(data_filename).get_fdata().astype(np.float64)\\n    except (ImageFileError, MemoryError, OSError, TypeError, ValueError) as e:\\n        msg = f\"Unable to load data from {data_filename}\"\\n        raise ImageFileError(msg) from e\\n\\n    try:\\n        binary_mask = nib.load(mask_filename).get_fdata().astype(np.int16)\\n    except (ImageFileError, MemoryError, OSError, TypeError, ValueError) as e:\\n        msg = f\"Unable to load data from {mask_filename}\"\\n        raise ImageFileError(msg) from e\\n\\n    if not safe_shape(image_data, binary_mask):\\n        msg = (\\n            f\"The data in {data_filename} and {mask_filename} do not have a\"\\n            \" consistent shape\"\\n        )\\n        raise ValueError(msg)\\n\\n    # make sure that the values in binary_mask are binary\\n    binary_mask[binary_mask > 0] = 1\\n    binary_mask[binary_mask != 1] = 0\\n\\n    # reduce the image data to only the voxels in the binary mask\\n    image_data = image_data[binary_mask == 1, :]\\n\\n    # filter out any voxels whose variance equals 0\\n    IFLOGGER.info(\"Removing zero variance components\")\\n    image_data = image_data[image_data.std(1) != 0, :]\\n\\n    if image_data.shape.count(0):\\n        err = (\\n            \"\\\\n\\\\n[!] No wm or csf signals left after removing those \"\\n            \"with zero variance.\\\\n\\\\n\"\\n        )\\n        raise Exception(err)\\n\\n    IFLOGGER.info(\"Detrending and centering data\")\\n    Y = signal.detrend(image_data, axis=1, type=\"linear\").T\\n    Yc = Y - np.tile(Y.mean(0), (Y.shape[0], 1))\\n    Yc = Yc / np.tile(np.array(Yc.std(0)).reshape(1, Yc.shape[1]), (Yc.shape[0], 1))\\n    IFLOGGER.info(\"Calculating SVD decomposition of Y*Y\\'\")\\n    U, S, Vh = np.linalg.svd(Yc, full_matrices=False)\\n\\n    # write out the resulting regressor file\\n    regressor_file = os.path.join(os.getcwd(), \"compcor_regressors.1D\")\\n    np.savetxt(regressor_file, U[:, :num_components], delimiter=\"\\\\t\", fmt=\"%16g\")\\n\\n    return regressor_file\\n', 'num_components': 5}, 'build_nuisance_regressors': {'censor_file_path': '[Undefined]', 'custom_file_paths': '[Undefined]', 'function_str': 'CPAC.nuisance.nuisance.gather_nuisance', 'global_summary_file_path': '[Undefined]', 'grey_matter_summary_file_path': '[Undefined]', 'selector': {'Name': 'aCompCor', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'aCompCor': {'summary': {'method': 'DetrendPC', 'components': 5}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid'], 'extraction_resolution': 2}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}}, 'tcompcor_file_path': '[Undefined]'}, 'outputspec': {}}",
      "anat_to_func_linear_xfm_aCompCor_158": "{'args': '[Undefined]', 'concat_xfm': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fix_scale_skew': '[Undefined]', 'in_file2': '[Undefined]', 'invert_xfm': True, 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "convert_bbr2itk_190": "{'function_str': 'def run_c3d(reference_file, source_file, transform_file):\\n    \"\"\"Run c3d_affine_tool to convert an FSL FLIRT affine transform to ITK.\"\"\"\\n    import os\\n    import subprocess\\n\\n    itk_transform = os.path.join(os.getcwd(), \"affine.txt\")\\n\\n    cmd = [\\n        \"c3d_affine_tool\",\\n        \"-ref\",\\n        reference_file,\\n        \"-src\",\\n        source_file,\\n        transform_file,\\n        \"-fsl2ras\",\\n        \"-oitk\",\\n        itk_transform,\\n    ]\\n    subprocess.check_output(cmd)\\n\\n    return itk_transform\\n'}",
      "split_func_190": "{'args': '[Undefined]', 'dimension': 't', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'out_base_name': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "convert_motionxfm2itk_190_": "{'function_str': 'def run_c3d(reference_file, source_file, transform_file):\\n    \"\"\"Run c3d_affine_tool to convert an FSL FLIRT affine transform to ITK.\"\"\"\\n    import os\\n    import subprocess\\n\\n    itk_transform = os.path.join(os.getcwd(), \"affine.txt\")\\n\\n    cmd = [\\n        \"c3d_affine_tool\",\\n        \"-ref\",\\n        reference_file,\\n        \"-src\",\\n        source_file,\\n        transform_file,\\n        \"-fsl2ras\",\\n        \"-oitk\",\\n        itk_transform,\\n    ]\\n    subprocess.check_output(cmd)\\n\\n    return itk_transform\\n'}",
      "collectxfm_func_to_standard_190_": "{'axis': 'vstack', 'in3': 'identity', 'no_flatten': False, 'ravel_inputs': False}",
      "applyxfm_func_to_standard_190_": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': True, 'input_image_type': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
      "applyxfm_derivfunc_to_standard_190_": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': True, 'input_image_type': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
      "resampled_T1w-brain-template-deriv": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '2mm', 'tag': 'func_derivative_outputs', 'template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'template_name': 'T1w-brain-template-deriv'}",
      "merge_func_to_standard_190": "{'args': '[Undefined]', 'dimension': 't', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'merged_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'tr': '[Undefined]'}",
      "merge_derivfunc_to_standard_190": "{'args': '[Undefined]', 'dimension': 't', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'merged_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'tr': '[Undefined]'}",
      "applyxfm_func_mask_to_standard_190": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation': 'MultiLabel', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
      "collectxfm_func_mask_to_standard_190": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
      "applyxfm_deriv_mask_to_standard_190": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation': 'MultiLabel', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
      "collectxfm_deriv_mask_to_standard_190": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
      "get_func_brain_to_standard_190": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "warp_funcreg-sbref_to_T1wtemplate_208": "{'inputspec': {'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}, 'apply_warp_warp_funcreg-sbref_to_T1wtemplate_208': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}, 'interp_string': {'function_str': 'def interpolation_string(interpolation, reg_tool):\\n    \"\"\"Translate interpolation string to reg_tool-specific string.\"\"\"\\n    if reg_tool == \"ants\":\\n        pass\\n    elif reg_tool == \"fsl\":\\n        # translate to FSL\\n        # warning: flirt requires \\'nearestneighbour\\', but FSL applywarp uses\\n        #          \\'nn\\', so this is designed for applywarp, as all FSL xfm\\'s\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace(\"NearestNeighbor\", \"nn\")\\n    return interpolation\\n', 'reg_tool': 'ants'}, 'single_ants_xfm_to_list': {'function_str': 'def single_ants_xfm_to_list(transform):\\n    \"\"\"Convert a single ANTs transform to a list.\"\"\"\\n    return [transform]\\n'}, 'outputspec': {}}",
      "func_despiked_template_212": "{'args': '[Undefined]', 'environ': {}, 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
      "func_deriv_despiked_template_212": "{'args': '[Undefined]', 'environ': {}, 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
      "align_template_mask_to_template_data_space-template_reg-36_parameter_218": "{'args': '[Undefined]', 'environ': {}, 'num_threads': 1, 'orientation': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'resample_mode': 'Cu', 'voxel_size': '[Undefined]'}",
      "nuisance_regression_space-template_reg-36_parameter_218": "{'inputspec': {'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'regressor_file': '[Undefined]', 'selector': '[Undefined]'}, 'nuisance_regression': {'TR': '[Undefined]', 'args': '[Undefined]', 'automask': '[Undefined]', 'bandpass': '[Undefined]', 'blur': '[Undefined]', 'cenmode': '[Undefined]', 'censor': '[Undefined]', 'censortr': '[Undefined]', 'concat': '[Undefined]', 'dsort': '[Undefined]', 'environ': {}, 'noblock': '[Undefined]', 'norm': False, 'num_threads': 1, 'out_file': 'residuals.nii.gz', 'outputtype': 'NIFTI_GZ', 'polort': 0, 'stopband': '[Undefined]'}, 'outputspec': {}}",
      "filtering_bold_and_regressors_space-template_reg-36_parameter_218": "{'inputspec': {'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'nuisance_selectors': {'Name': '36_parameter', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'GlobalSignal': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}}, 'regressors_file_path': '[Undefined]', 'tr': '[Undefined]'}, 'frequency_filter': {'bandpass_freqs': [0.01, 0.1], 'function_str': 'CPAC.nuisance.bandpass.bandpass_voxels', 'sample_period': '[Undefined]'}, 'outputspec': {}}",
      "align_template_mask_to_template_data_space-template_res-derivative_reg-36_parameter_218": "{'args': '[Undefined]', 'environ': {}, 'num_threads': 1, 'orientation': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'resample_mode': 'Cu', 'voxel_size': '[Undefined]'}",
      "nuisance_regression_space-template_res-derivative_reg-36_parameter_218": "{'inputspec': {'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'regressor_file': '[Undefined]', 'selector': '[Undefined]'}, 'nuisance_regression': {'TR': '[Undefined]', 'args': '[Undefined]', 'automask': '[Undefined]', 'bandpass': '[Undefined]', 'blur': '[Undefined]', 'cenmode': '[Undefined]', 'censor': '[Undefined]', 'censortr': '[Undefined]', 'concat': '[Undefined]', 'dsort': '[Undefined]', 'environ': {}, 'noblock': '[Undefined]', 'norm': False, 'num_threads': 1, 'out_file': 'residuals.nii.gz', 'outputtype': 'NIFTI_GZ', 'polort': 0, 'stopband': '[Undefined]'}, 'outputspec': {}}",
      "filtering_bold_and_regressors_space-template_res-derivative_reg-36_parameter_218": "{'inputspec': {'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'nuisance_selectors': {'Name': '36_parameter', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'GlobalSignal': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}}, 'regressors_file_path': '[Undefined]', 'tr': '[Undefined]'}, 'frequency_filter': {'bandpass_freqs': [0.01, 0.1], 'function_str': 'CPAC.nuisance.bandpass.bandpass_voxels', 'sample_period': '[Undefined]'}, 'outputspec': {}}",
      "align_template_mask_to_template_data_space-template_reg-aCompCor_228": "{'args': '[Undefined]', 'environ': {}, 'num_threads': 1, 'orientation': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'resample_mode': 'Cu', 'voxel_size': '[Undefined]'}",
      "nuisance_regression_space-template_reg-aCompCor_228": "{'inputspec': {'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'regressor_file': '[Undefined]', 'selector': '[Undefined]'}, 'nuisance_regression': {'TR': '[Undefined]', 'args': '[Undefined]', 'automask': '[Undefined]', 'bandpass': '[Undefined]', 'blur': '[Undefined]', 'cenmode': '[Undefined]', 'censor': '[Undefined]', 'censortr': '[Undefined]', 'concat': '[Undefined]', 'dsort': '[Undefined]', 'environ': {}, 'noblock': '[Undefined]', 'norm': False, 'num_threads': 1, 'out_file': 'residuals.nii.gz', 'outputtype': 'NIFTI_GZ', 'polort': 0, 'stopband': '[Undefined]'}, 'outputspec': {}}",
      "filtering_bold_and_regressors_space-template_reg-aCompCor_228": "{'inputspec': {'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'nuisance_selectors': {'Name': 'aCompCor', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'aCompCor': {'summary': {'method': 'DetrendPC', 'components': 5}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid'], 'extraction_resolution': 2}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}}, 'regressors_file_path': '[Undefined]', 'tr': '[Undefined]'}, 'frequency_filter': {'bandpass_freqs': [0.01, 0.1], 'function_str': 'CPAC.nuisance.bandpass.bandpass_voxels', 'sample_period': '[Undefined]'}, 'outputspec': {}}",
      "align_template_mask_to_template_data_space-template_res-derivative_reg-aCompCor_228": "{'args': '[Undefined]', 'environ': {}, 'num_threads': 1, 'orientation': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'resample_mode': 'Cu', 'voxel_size': '[Undefined]'}",
      "nuisance_regression_space-template_res-derivative_reg-aCompCor_228": "{'inputspec': {'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'regressor_file': '[Undefined]', 'selector': '[Undefined]'}, 'nuisance_regression': {'TR': '[Undefined]', 'args': '[Undefined]', 'automask': '[Undefined]', 'bandpass': '[Undefined]', 'blur': '[Undefined]', 'cenmode': '[Undefined]', 'censor': '[Undefined]', 'censortr': '[Undefined]', 'concat': '[Undefined]', 'dsort': '[Undefined]', 'environ': {}, 'noblock': '[Undefined]', 'norm': False, 'num_threads': 1, 'out_file': 'residuals.nii.gz', 'outputtype': 'NIFTI_GZ', 'polort': 0, 'stopband': '[Undefined]'}, 'outputspec': {}}",
      "filtering_bold_and_regressors_space-template_res-derivative_reg-aCompCor_228": "{'inputspec': {'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'nuisance_selectors': {'Name': 'aCompCor', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'aCompCor': {'summary': {'method': 'DetrendPC', 'components': 5}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid'], 'extraction_resolution': 2}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}}, 'regressors_file_path': '[Undefined]', 'tr': '[Undefined]'}, 'frequency_filter': {'bandpass_freqs': [0.01, 0.1], 'function_str': 'CPAC.nuisance.bandpass.bandpass_voxels', 'sample_period': '[Undefined]'}, 'outputspec': {}}",
      "resample_functional_roi_252": "{'function_str': 'CPAC.utils.datasource.resample_func_roi', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat', 'realignment': 'ROI_to_func'}",
      "roi_dataflow_252": "{'inputspec': {'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0', 'mask': '[Undefined]', 'mask_file': '[Undefined]'}, 'check_for_s3': {'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'mask'}, 'outputspec': {}}",
      "roi_timeseries_252": "{'inputspec': {'rest': '[Undefined]'}, '3dROIstats': {'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}, 'input_roi': {'roi': '[Undefined]'}, 'clean_roi_csv': {'function_str': 'def clean_roi_csv(roi_csv):\\n    \"\"\"Remove file path comments from every other row of AFNI\\'s 3dROIstats output.\\n\\n    3dROIstats has a -nobriklab and a -quiet option, but neither remove the\\n    file path comments while retaining the ROI label header, which is needed.\\n\\n    If there are no file path comments to remove, this function simply\\n    passes the original file as output, instead of unnecessarily opening and\\n    re-writing it.\\n\\n    Parameters\\n    ----------\\n    roi_csv : str\\n        path to CSV\\n\\n    Returns\\n    -------\\n    roi_array : numpy.ndarray\\n\\n    edited_roi_csv: str\\n        path to CSV\\n    \"\"\"\\n    import os\\n\\n    import numpy as np\\n    import pandas as pd\\n\\n    with open(roi_csv, \"r\") as f:\\n        csv_lines = f.readlines()\\n\\n    # flag whether to re-write\\n    modified = False\\n\\n    edited_lines = []\\n    for line in csv_lines:\\n        line = line.replace(\"\\\\t\\\\t\\\\t\", \"\")\\n        line = line.replace(\"\\\\t\\\\t\", \"\")\\n        line = line.replace(\"\\\\t\", \",\")\\n        line = line.replace(\"#,\", \"#\")\\n        if \"#\" in line:\\n            if \"/\" in line and \".\" in line:\\n                modified = True\\n                continue\\n            if \"Sub-brick\" in line:\\n                modified = True\\n                continue\\n        edited_lines.append(line)\\n\\n    if modified:\\n        edited_roi_csv = os.path.join(os.getcwd(), os.path.basename(roi_csv))\\n        with open(edited_roi_csv, \"wt\") as f:\\n            for line in edited_lines:\\n                f.write(line)\\n    else:\\n        edited_roi_csv = roi_csv\\n\\n    data = pd.read_csv(edited_roi_csv, sep=\",\", header=1)\\n    data = data.dropna(axis=1)\\n    roi_array = np.transpose(data.values)\\n\\n    return roi_array, edited_roi_csv\\n'}, 'outputspec': {}}",
      "connectomeNilearnPearson_252": "{'inputspec': {'atlas_name': '[Undefined]', 'in_file': '[Undefined]', 'in_rois': '[Undefined]', 'method': 'Pearson'}, 'connectome': {'function_str': 'CPAC.connectome.connectivity_matrix.compute_connectome_nilearn'}, 'outputspec': {}}",
      "connectomeNilearnPartial_252": "{'inputspec': {'atlas_name': '[Undefined]', 'in_file': '[Undefined]', 'in_rois': '[Undefined]', 'method': 'Partial'}, 'connectome': {'function_str': 'CPAC.connectome.connectivity_matrix.compute_connectome_nilearn'}, 'outputspec': {}}",
      "resample_functional_roi_254": "{'function_str': 'CPAC.utils.datasource.resample_func_roi', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat', 'realignment': 'ROI_to_func'}",
      "roi_dataflow_254": "{'inputspec': {'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0', 'mask': '[Undefined]', 'mask_file': '[Undefined]'}, 'check_for_s3': {'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'mask'}, 'outputspec': {}}",
      "roi_timeseries_254": "{'inputspec': {'rest': '[Undefined]'}, '3dROIstats': {'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}, 'input_roi': {'roi': '[Undefined]'}, 'clean_roi_csv': {'function_str': 'def clean_roi_csv(roi_csv):\\n    \"\"\"Remove file path comments from every other row of AFNI\\'s 3dROIstats output.\\n\\n    3dROIstats has a -nobriklab and a -quiet option, but neither remove the\\n    file path comments while retaining the ROI label header, which is needed.\\n\\n    If there are no file path comments to remove, this function simply\\n    passes the original file as output, instead of unnecessarily opening and\\n    re-writing it.\\n\\n    Parameters\\n    ----------\\n    roi_csv : str\\n        path to CSV\\n\\n    Returns\\n    -------\\n    roi_array : numpy.ndarray\\n\\n    edited_roi_csv: str\\n        path to CSV\\n    \"\"\"\\n    import os\\n\\n    import numpy as np\\n    import pandas as pd\\n\\n    with open(roi_csv, \"r\") as f:\\n        csv_lines = f.readlines()\\n\\n    # flag whether to re-write\\n    modified = False\\n\\n    edited_lines = []\\n    for line in csv_lines:\\n        line = line.replace(\"\\\\t\\\\t\\\\t\", \"\")\\n        line = line.replace(\"\\\\t\\\\t\", \"\")\\n        line = line.replace(\"\\\\t\", \",\")\\n        line = line.replace(\"#,\", \"#\")\\n        if \"#\" in line:\\n            if \"/\" in line and \".\" in line:\\n                modified = True\\n                continue\\n            if \"Sub-brick\" in line:\\n                modified = True\\n                continue\\n        edited_lines.append(line)\\n\\n    if modified:\\n        edited_roi_csv = os.path.join(os.getcwd(), os.path.basename(roi_csv))\\n        with open(edited_roi_csv, \"wt\") as f:\\n            for line in edited_lines:\\n                f.write(line)\\n    else:\\n        edited_roi_csv = roi_csv\\n\\n    data = pd.read_csv(edited_roi_csv, sep=\",\", header=1)\\n    data = data.dropna(axis=1)\\n    roi_array = np.transpose(data.values)\\n\\n    return roi_array, edited_roi_csv\\n'}, 'outputspec': {}}",
      "connectomeNilearnPearson_254": "{'inputspec': {'atlas_name': '[Undefined]', 'in_file': '[Undefined]', 'in_rois': '[Undefined]', 'method': 'Pearson'}, 'connectome': {'function_str': 'CPAC.connectome.connectivity_matrix.compute_connectome_nilearn'}, 'outputspec': {}}",
      "connectomeNilearnPartial_254": "{'inputspec': {'atlas_name': '[Undefined]', 'in_file': '[Undefined]', 'in_rois': '[Undefined]', 'method': 'Partial'}, 'connectome': {'function_str': 'CPAC.connectome.connectivity_matrix.compute_connectome_nilearn'}, 'outputspec': {}}",
      "alff_falff_264": "{'hp_input': {'hp': [0.01]}, 'bandpass_filtering': {'args': '[Undefined]', 'automask': '[Undefined]', 'blur': '[Undefined]', 'despike': '[Undefined]', 'environ': {}, 'localPV': '[Undefined]', 'mask': '[Undefined]', 'nfft': '[Undefined]', 'no_detrend': '[Undefined]', 'normalize': '[Undefined]', 'notrans': '[Undefined]', 'num_threads': 1, 'orthogonalize_dset': '[Undefined]', 'orthogonalize_file': '[Undefined]', 'out_file': 'residual_filtered.nii.gz', 'outputtype': 'NIFTI_GZ', 'tr': '[Undefined]'}, 'lp_input': {'lp': [0.1]}, 'inputspec': {'rest_mask': '[Undefined]', 'rest_res': '[Undefined]'}, 'get_option_string': {'function_str': '@Function.sig_imports([\"from pathlib import Path\"])\\ndef get_opt_string(mask: Path | str) -> str:\\n    \"\"\"\\n    Return option string for 3dTstat.\\n\\n    Parameters\\n    ----------\\n    mask : string\\n        Path to mask file\\n\\n    Returns\\n    -------\\n    opt_str : string\\n        Command args\\n\\n    \"\"\"\\n    return f\" -stdev -mask {mask}\"\\n'}, 'stddev_filtered': {'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'out_file': 'alff.nii.gz', 'outputtype': 'NIFTI_GZ'}, 'outputspec': {}, 'stddev_unfiltered': {'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'out_file': 'residual_3dT.nii.gz', 'outputtype': 'NIFTI_GZ'}, 'falff': {'args': '-float', 'environ': {}, 'expr': '(1.0*bool(a))*((1.0*b)/(1.0*c))', 'num_threads': 1, 'other': '[Undefined]', 'out_file': 'falff.nii.gz', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}}",
      "space-template_alff_smooth_AFNI_264": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'smooth': {'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'fwhm_input': {'fwhm': '[Undefined]'}, 'outputspec': {}}",
      "space-template_alff_zstd_264": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_desc-sm_alff_zstd_264": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_falff_smooth_AFNI_264": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'smooth': {'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'fwhm_input': {'fwhm': '[Undefined]'}, 'outputspec': {}}",
      "space-template_falff_zstd_264": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_desc-sm_falff_zstd_264": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "alff_falff_268": "{'hp_input': {'hp': [0.01]}, 'bandpass_filtering': {'args': '[Undefined]', 'automask': '[Undefined]', 'blur': '[Undefined]', 'despike': '[Undefined]', 'environ': {}, 'localPV': '[Undefined]', 'mask': '[Undefined]', 'nfft': '[Undefined]', 'no_detrend': '[Undefined]', 'normalize': '[Undefined]', 'notrans': '[Undefined]', 'num_threads': 1, 'orthogonalize_dset': '[Undefined]', 'orthogonalize_file': '[Undefined]', 'out_file': 'residual_filtered.nii.gz', 'outputtype': 'NIFTI_GZ', 'tr': '[Undefined]'}, 'lp_input': {'lp': [0.1]}, 'inputspec': {'rest_mask': '[Undefined]', 'rest_res': '[Undefined]'}, 'get_option_string': {'function_str': '@Function.sig_imports([\"from pathlib import Path\"])\\ndef get_opt_string(mask: Path | str) -> str:\\n    \"\"\"\\n    Return option string for 3dTstat.\\n\\n    Parameters\\n    ----------\\n    mask : string\\n        Path to mask file\\n\\n    Returns\\n    -------\\n    opt_str : string\\n        Command args\\n\\n    \"\"\"\\n    return f\" -stdev -mask {mask}\"\\n'}, 'stddev_filtered': {'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'out_file': 'alff.nii.gz', 'outputtype': 'NIFTI_GZ'}, 'outputspec': {}, 'stddev_unfiltered': {'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'out_file': 'residual_3dT.nii.gz', 'outputtype': 'NIFTI_GZ'}, 'falff': {'args': '-float', 'environ': {}, 'expr': '(1.0*bool(a))*((1.0*b)/(1.0*c))', 'num_threads': 1, 'other': '[Undefined]', 'out_file': 'falff.nii.gz', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}}",
      "space-template_alff_smooth_AFNI_268": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'smooth': {'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'fwhm_input': {'fwhm': '[Undefined]'}, 'outputspec': {}}",
      "space-template_alff_zstd_268": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_desc-sm_alff_zstd_268": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_falff_smooth_AFNI_268": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'smooth': {'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'fwhm_input': {'fwhm': '[Undefined]'}, 'outputspec': {}}",
      "space-template_falff_zstd_268": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_desc-sm_falff_zstd_268": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "reho_290": "{'inputspec': {'cluster_size': 27, 'rest_mask': '[Undefined]', 'rest_res_filt': '[Undefined]'}, 'reho_map': {'function_str': 'def compute_reho(in_file, mask_file, cluster_size):\\n    \"\"\"\\n    Computes the ReHo Map, by computing tied ranks of the timepoints,\\n    followed by computing Kendall\\'s coefficient concordance(KCC) of a\\n    timeseries with its neighbours.\\n\\n    Parameters\\n    ----------\\n    in_file : nifti file\\n        4D EPI File\\n\\n    mask_file : nifti file\\n        Mask of the EPI File(Only Compute ReHo of voxels in the mask)\\n\\n    cluster_size : integer\\n        for a brain voxel the number of neighbouring brain voxels to use for\\n        KCC.\\n\\n\\n    Returns\\n    -------\\n    out_file : nifti file\\n        ReHo map of the input EPI image\\n\\n    \"\"\"\\n    res_fname = in_file\\n    res_mask_fname = mask_file\\n    CUTNUMBER = 10\\n\\n    if cluster_size not in (27, 19, 7):\\n        cluster_size = 27\\n\\n    nvoxel = cluster_size\\n\\n    res_img = nib.load(res_fname)\\n    res_mask_img = nib.load(res_mask_fname)\\n\\n    res_data = res_img.get_fdata()\\n    res_mask_data = res_mask_img.get_fdata()\\n\\n    IFLOGGER.info(res_data.shape)\\n    (n_x, n_y, n_z, n_t) = res_data.shape\\n\\n    # \"flatten\" each volume of the timeseries into one big array instead of\\n    # x,y,z - produces (timepoints, N voxels) shaped data array\\n    res_data = np.reshape(res_data, (n_x * n_y * n_z, n_t), order=\"F\").T\\n\\n    # create a blank array of zeroes of size n_voxels, one for each time point\\n    Ranks_res_data = np.tile(\\n        (np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1]\\n    )\\n\\n    # divide the number of total voxels by the cutnumber (set to 10)\\n    # ex. end up with a number in the thousands if there are tens of thousands\\n    # of voxels\\n    segment_length = np.ceil(float((res_data.shape)[1]) / float(CUTNUMBER))\\n\\n    for icut in range(0, CUTNUMBER):\\n        segment = None\\n\\n        # create a Numpy array of evenly spaced values from the segment\\n        # starting point up until the segment_length integer\\n        if not (icut == (CUTNUMBER - 1)):\\n            segment = np.array(\\n                np.arange(icut * segment_length, (icut + 1) * segment_length)\\n            )\\n        else:\\n            segment = np.array(np.arange(icut * segment_length, (res_data.shape[1])))\\n\\n        segment = np.int64(segment[np.newaxis])\\n\\n        # res_data_piece is a chunk of the original timeseries in_file, but\\n        # aligned with the current segment index spacing\\n        res_data_piece = res_data[:, segment[0]]\\n        nvoxels_piece = res_data_piece.shape[1]\\n\\n        # run a merge sort across the time axis, re-ordering the flattened\\n        # volume voxel arrays\\n        res_data_sorted = np.sort(res_data_piece, 0, kind=\"mergesort\")\\n        sort_index = np.argsort(res_data_piece, axis=0, kind=\"mergesort\")\\n\\n        # subtract each volume from each other\\n        db = np.diff(res_data_sorted, 1, 0)\\n\\n        # convert any zero voxels into \"True\" flag\\n        db = db == 0\\n\\n        # return an n_voxel (n voxels within the current segment) sized array\\n        # of values, each value being the sum total of TRUE values in \"db\"\\n        sumdb = np.sum(db, 0)\\n\\n        temp_array = np.array(np.arange(0, n_t))\\n        temp_array = temp_array[:, np.newaxis]\\n\\n        sorted_ranks = np.tile(temp_array, [1, nvoxels_piece])\\n\\n        if np.any(sumdb[:]):\\n            tie_adjust_index = np.flatnonzero(sumdb)\\n\\n            for i in range(0, len(tie_adjust_index)):\\n                ranks = sorted_ranks[:, tie_adjust_index[i]]\\n\\n                ties = db[:, tie_adjust_index[i]]\\n\\n                tieloc = np.append(np.flatnonzero(ties), n_t + 2)\\n                maxties = len(tieloc)\\n                tiecount = 0\\n\\n                while tiecount < maxties - 1:\\n                    tiestart = tieloc[tiecount]\\n                    ntied = 2\\n                    while tieloc[tiecount + 1] == (tieloc[tiecount] + 1):\\n                        tiecount += 1\\n                        ntied += 1\\n\\n                    ranks[tiestart : tiestart + ntied] = np.ceil(\\n                        np.float32(np.sum(ranks[tiestart : tiestart + ntied]))\\n                        / np.float32(ntied)\\n                    )\\n                    tiecount += 1\\n\\n                sorted_ranks[:, tie_adjust_index[i]] = ranks\\n\\n        del db, sumdb\\n        sort_index_base = np.tile(\\n            np.multiply(np.arange(0, nvoxels_piece), n_t), [n_t, 1]\\n        )\\n        sort_index += sort_index_base\\n        del sort_index_base\\n\\n        ranks_piece = np.zeros((n_t, nvoxels_piece))\\n\\n        ranks_piece = ranks_piece.flatten(order=\"F\")\\n        sort_index = sort_index.flatten(order=\"F\")\\n        sorted_ranks = sorted_ranks.flatten(order=\"F\")\\n\\n        ranks_piece[sort_index] = np.array(sorted_ranks)\\n\\n        ranks_piece = np.reshape(ranks_piece, (n_t, nvoxels_piece), order=\"F\")\\n\\n        del sort_index, sorted_ranks\\n\\n        Ranks_res_data[:, segment[0]] = ranks_piece\\n\\n        sys.stdout.write(\".\")\\n\\n    Ranks_res_data = np.reshape(Ranks_res_data, (n_t, n_x, n_y, n_z), order=\"F\")\\n\\n    K = np.zeros((n_x, n_y, n_z))\\n\\n    mask_cluster = np.ones((3, 3, 3))\\n\\n    if nvoxel == 19:\\n        mask_cluster[0, 0, 0] = 0\\n        mask_cluster[0, 2, 0] = 0\\n        mask_cluster[2, 0, 0] = 0\\n        mask_cluster[2, 2, 0] = 0\\n        mask_cluster[0, 0, 2] = 0\\n        mask_cluster[0, 2, 2] = 0\\n        mask_cluster[2, 0, 2] = 0\\n        mask_cluster[2, 2, 2] = 0\\n\\n    elif nvoxel == 7:\\n        mask_cluster[0, 0, 0] = 0\\n        mask_cluster[0, 1, 0] = 0\\n        mask_cluster[0, 2, 0] = 0\\n        mask_cluster[0, 0, 1] = 0\\n        mask_cluster[0, 2, 1] = 0\\n        mask_cluster[0, 0, 2] = 0\\n        mask_cluster[0, 1, 2] = 0\\n        mask_cluster[0, 2, 2] = 0\\n        mask_cluster[1, 0, 0] = 0\\n        mask_cluster[1, 2, 0] = 0\\n        mask_cluster[1, 0, 2] = 0\\n        mask_cluster[1, 2, 2] = 0\\n        mask_cluster[2, 0, 0] = 0\\n        mask_cluster[2, 1, 0] = 0\\n        mask_cluster[2, 2, 0] = 0\\n        mask_cluster[2, 0, 1] = 0\\n        mask_cluster[2, 2, 1] = 0\\n        mask_cluster[2, 0, 2] = 0\\n        mask_cluster[2, 1, 2] = 0\\n        mask_cluster[2, 2, 2] = 0\\n\\n    for i in range(1, n_x - 1):\\n        for j in range(1, n_y - 1):\\n            for k in range(1, n_z - 1):\\n                block = Ranks_res_data[:, i - 1 : i + 2, j - 1 : j + 2, k - 1 : k + 2]\\n                mask_block = res_mask_data[i - 1 : i + 2, j - 1 : j + 2, k - 1 : k + 2]\\n\\n                if not (int(mask_block[1, 1, 1]) == 0):\\n                    if nvoxel in (19, 7):\\n                        mask_block = np.multiply(mask_block, mask_cluster)\\n\\n                    R_block = np.reshape(block, (block.shape[0], 27), order=\"F\")\\n                    mask_R_block = R_block[\\n                        :,\\n                        np.argwhere(np.reshape(mask_block, (1, 27), order=\"F\") > 0)[\\n                            :, 1\\n                        ],\\n                    ]\\n\\n                    K[i, j, k] = f_kendall(mask_R_block)\\n\\n    img = nib.Nifti1Image(K, header=res_img.header, affine=res_img.affine)\\n    reho_file = os.path.join(os.getcwd(), \"ReHo.nii.gz\")\\n    img.to_filename(reho_file)\\n    return reho_file\\n'}, 'outputspec': {}}",
      "space-template_reho_smooth_AFNI_290": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'smooth': {'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'fwhm_input': {'fwhm': '[Undefined]'}, 'outputspec': {}}",
      "space-template_reho_zstd_290": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_desc-sm_reho_zstd_290": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "reho_292": "{'inputspec': {'cluster_size': 27, 'rest_mask': '[Undefined]', 'rest_res_filt': '[Undefined]'}, 'reho_map': {'function_str': 'def compute_reho(in_file, mask_file, cluster_size):\\n    \"\"\"\\n    Computes the ReHo Map, by computing tied ranks of the timepoints,\\n    followed by computing Kendall\\'s coefficient concordance(KCC) of a\\n    timeseries with its neighbours.\\n\\n    Parameters\\n    ----------\\n    in_file : nifti file\\n        4D EPI File\\n\\n    mask_file : nifti file\\n        Mask of the EPI File(Only Compute ReHo of voxels in the mask)\\n\\n    cluster_size : integer\\n        for a brain voxel the number of neighbouring brain voxels to use for\\n        KCC.\\n\\n\\n    Returns\\n    -------\\n    out_file : nifti file\\n        ReHo map of the input EPI image\\n\\n    \"\"\"\\n    res_fname = in_file\\n    res_mask_fname = mask_file\\n    CUTNUMBER = 10\\n\\n    if cluster_size not in (27, 19, 7):\\n        cluster_size = 27\\n\\n    nvoxel = cluster_size\\n\\n    res_img = nib.load(res_fname)\\n    res_mask_img = nib.load(res_mask_fname)\\n\\n    res_data = res_img.get_fdata()\\n    res_mask_data = res_mask_img.get_fdata()\\n\\n    IFLOGGER.info(res_data.shape)\\n    (n_x, n_y, n_z, n_t) = res_data.shape\\n\\n    # \"flatten\" each volume of the timeseries into one big array instead of\\n    # x,y,z - produces (timepoints, N voxels) shaped data array\\n    res_data = np.reshape(res_data, (n_x * n_y * n_z, n_t), order=\"F\").T\\n\\n    # create a blank array of zeroes of size n_voxels, one for each time point\\n    Ranks_res_data = np.tile(\\n        (np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1]\\n    )\\n\\n    # divide the number of total voxels by the cutnumber (set to 10)\\n    # ex. end up with a number in the thousands if there are tens of thousands\\n    # of voxels\\n    segment_length = np.ceil(float((res_data.shape)[1]) / float(CUTNUMBER))\\n\\n    for icut in range(0, CUTNUMBER):\\n        segment = None\\n\\n        # create a Numpy array of evenly spaced values from the segment\\n        # starting point up until the segment_length integer\\n        if not (icut == (CUTNUMBER - 1)):\\n            segment = np.array(\\n                np.arange(icut * segment_length, (icut + 1) * segment_length)\\n            )\\n        else:\\n            segment = np.array(np.arange(icut * segment_length, (res_data.shape[1])))\\n\\n        segment = np.int64(segment[np.newaxis])\\n\\n        # res_data_piece is a chunk of the original timeseries in_file, but\\n        # aligned with the current segment index spacing\\n        res_data_piece = res_data[:, segment[0]]\\n        nvoxels_piece = res_data_piece.shape[1]\\n\\n        # run a merge sort across the time axis, re-ordering the flattened\\n        # volume voxel arrays\\n        res_data_sorted = np.sort(res_data_piece, 0, kind=\"mergesort\")\\n        sort_index = np.argsort(res_data_piece, axis=0, kind=\"mergesort\")\\n\\n        # subtract each volume from each other\\n        db = np.diff(res_data_sorted, 1, 0)\\n\\n        # convert any zero voxels into \"True\" flag\\n        db = db == 0\\n\\n        # return an n_voxel (n voxels within the current segment) sized array\\n        # of values, each value being the sum total of TRUE values in \"db\"\\n        sumdb = np.sum(db, 0)\\n\\n        temp_array = np.array(np.arange(0, n_t))\\n        temp_array = temp_array[:, np.newaxis]\\n\\n        sorted_ranks = np.tile(temp_array, [1, nvoxels_piece])\\n\\n        if np.any(sumdb[:]):\\n            tie_adjust_index = np.flatnonzero(sumdb)\\n\\n            for i in range(0, len(tie_adjust_index)):\\n                ranks = sorted_ranks[:, tie_adjust_index[i]]\\n\\n                ties = db[:, tie_adjust_index[i]]\\n\\n                tieloc = np.append(np.flatnonzero(ties), n_t + 2)\\n                maxties = len(tieloc)\\n                tiecount = 0\\n\\n                while tiecount < maxties - 1:\\n                    tiestart = tieloc[tiecount]\\n                    ntied = 2\\n                    while tieloc[tiecount + 1] == (tieloc[tiecount] + 1):\\n                        tiecount += 1\\n                        ntied += 1\\n\\n                    ranks[tiestart : tiestart + ntied] = np.ceil(\\n                        np.float32(np.sum(ranks[tiestart : tiestart + ntied]))\\n                        / np.float32(ntied)\\n                    )\\n                    tiecount += 1\\n\\n                sorted_ranks[:, tie_adjust_index[i]] = ranks\\n\\n        del db, sumdb\\n        sort_index_base = np.tile(\\n            np.multiply(np.arange(0, nvoxels_piece), n_t), [n_t, 1]\\n        )\\n        sort_index += sort_index_base\\n        del sort_index_base\\n\\n        ranks_piece = np.zeros((n_t, nvoxels_piece))\\n\\n        ranks_piece = ranks_piece.flatten(order=\"F\")\\n        sort_index = sort_index.flatten(order=\"F\")\\n        sorted_ranks = sorted_ranks.flatten(order=\"F\")\\n\\n        ranks_piece[sort_index] = np.array(sorted_ranks)\\n\\n        ranks_piece = np.reshape(ranks_piece, (n_t, nvoxels_piece), order=\"F\")\\n\\n        del sort_index, sorted_ranks\\n\\n        Ranks_res_data[:, segment[0]] = ranks_piece\\n\\n        sys.stdout.write(\".\")\\n\\n    Ranks_res_data = np.reshape(Ranks_res_data, (n_t, n_x, n_y, n_z), order=\"F\")\\n\\n    K = np.zeros((n_x, n_y, n_z))\\n\\n    mask_cluster = np.ones((3, 3, 3))\\n\\n    if nvoxel == 19:\\n        mask_cluster[0, 0, 0] = 0\\n        mask_cluster[0, 2, 0] = 0\\n        mask_cluster[2, 0, 0] = 0\\n        mask_cluster[2, 2, 0] = 0\\n        mask_cluster[0, 0, 2] = 0\\n        mask_cluster[0, 2, 2] = 0\\n        mask_cluster[2, 0, 2] = 0\\n        mask_cluster[2, 2, 2] = 0\\n\\n    elif nvoxel == 7:\\n        mask_cluster[0, 0, 0] = 0\\n        mask_cluster[0, 1, 0] = 0\\n        mask_cluster[0, 2, 0] = 0\\n        mask_cluster[0, 0, 1] = 0\\n        mask_cluster[0, 2, 1] = 0\\n        mask_cluster[0, 0, 2] = 0\\n        mask_cluster[0, 1, 2] = 0\\n        mask_cluster[0, 2, 2] = 0\\n        mask_cluster[1, 0, 0] = 0\\n        mask_cluster[1, 2, 0] = 0\\n        mask_cluster[1, 0, 2] = 0\\n        mask_cluster[1, 2, 2] = 0\\n        mask_cluster[2, 0, 0] = 0\\n        mask_cluster[2, 1, 0] = 0\\n        mask_cluster[2, 2, 0] = 0\\n        mask_cluster[2, 0, 1] = 0\\n        mask_cluster[2, 2, 1] = 0\\n        mask_cluster[2, 0, 2] = 0\\n        mask_cluster[2, 1, 2] = 0\\n        mask_cluster[2, 2, 2] = 0\\n\\n    for i in range(1, n_x - 1):\\n        for j in range(1, n_y - 1):\\n            for k in range(1, n_z - 1):\\n                block = Ranks_res_data[:, i - 1 : i + 2, j - 1 : j + 2, k - 1 : k + 2]\\n                mask_block = res_mask_data[i - 1 : i + 2, j - 1 : j + 2, k - 1 : k + 2]\\n\\n                if not (int(mask_block[1, 1, 1]) == 0):\\n                    if nvoxel in (19, 7):\\n                        mask_block = np.multiply(mask_block, mask_cluster)\\n\\n                    R_block = np.reshape(block, (block.shape[0], 27), order=\"F\")\\n                    mask_R_block = R_block[\\n                        :,\\n                        np.argwhere(np.reshape(mask_block, (1, 27), order=\"F\") > 0)[\\n                            :, 1\\n                        ],\\n                    ]\\n\\n                    K[i, j, k] = f_kendall(mask_R_block)\\n\\n    img = nib.Nifti1Image(K, header=res_img.header, affine=res_img.affine)\\n    reho_file = os.path.join(os.getcwd(), \"ReHo.nii.gz\")\\n    img.to_filename(reho_file)\\n    return reho_file\\n'}, 'outputspec': {}}",
      "space-template_reho_smooth_AFNI_292": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'smooth': {'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'fwhm_input': {'fwhm': '[Undefined]'}, 'outputspec': {}}",
      "space-template_reho_zstd_292": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_desc-sm_reho_zstd_292": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "resample_functional_to_template_304": "{'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': True, 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat', 'in_weight': '[Undefined]', 'interp': 'trilinear', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
      "gather_template-specification-file": "{'inputnode': {'creds_path': None, 'data': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'dl_dir': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0', 'scan': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}, 'check_for_s3': {'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'other'}, 'outputspec': {}}",
      "afni_centrality_degree_centrality_304": "{'afni_centrality': {'args': '[Undefined]', 'autoclip': '[Undefined]', 'automask': '[Undefined]', 'environ': {'OMP_NUM_THREADS': '2'}, 'num_threads': 2, 'oned_file': '[Undefined]', 'out_file': 'degree_centrality_merged.nii.gz', 'outputtype': 'AFNI', 'polort': '[Undefined]', 'thresh': '[Undefined]'}, 'sep_nifti_subbriks': {'function_str': '@Function.sig_imports(\\n    [\\n        \"from collections.abc import Iterable\",\\n        \"import os\",\\n        \"from pathlib import Path\",\\n        \"import nibabel as nib\",\\n        \"from CPAC.pipeline.schema import valid_options\",\\n        \"from CPAC.utils.docs import docstring_parameter\",\\n    ]\\n)\\n@docstring_parameter(\\n    weight_options=tuple(valid_options[\"centrality\"][\"weight_options\"])\\n)\\ndef sep_nifti_subbriks(nifti_file: Path | str, out_names: Iterable[str]) -> list[str]:\\n    \"\"\"Separate sub-briks of niftis and save specified out\\n\\n    Parameters\\n    ----------\\n    nifti_file : ~pathlib.Path or str\\n        path to NIfTI output of an AFNI centrality tool\\n\\n    out_names : iterable of str\\n        an iterable of strings, each ending with one of {weight_options}\\n\\n    Returns\\n    -------\\n    list of str\\n        paths to each of the specified outputs as its own file\\n    \"\"\"\\n    output_niftis = []\\n    weight_options = valid_options[\"centrality\"][\"weight_options\"]\\n    selected_options = {_[::-1].split(\"_\", 1)[0][::-1]: _ for _ in out_names}\\n\\n    nii_img = nib.load(nifti_file)\\n    nii_arr = nii_img.get_fdata()\\n    nii_affine = nii_img.affine\\n    nii_dims = nii_arr.shape\\n\\n    if nii_dims[-1] != len(weight_options):\\n        if len(nii_dims) == 3 and len(out_names) == 1:  # noqa: PLR2004\\n            pass\\n        else:\\n            err_msg = \"out_names must have same number of elements as nifti sub-briks\"\\n            raise Exception(err_msg)\\n\\n    for brik, option in enumerate(weight_options):\\n        if option in selected_options:\\n            if len(nii_dims) == 3:  # noqa: PLR2004\\n                brik_arr = nii_arr\\n            elif len(nii_dims) > 3:  # noqa: PLR2004\\n                brik_arr = nii_arr[:, :, :, 0, brik]\\n            out_file = os.path.join(os.getcwd(), selected_options[option] + \".nii.gz\")\\n            out_img = nib.Nifti1Image(brik_arr, nii_affine)\\n            out_img.to_filename(out_file)\\n            output_niftis.append(out_file)\\n\\n    return output_niftis\\n', 'out_names': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebc30>'}, 'outputspec': {}, 'inputspec': {'in_file': '[Undefined]', 'template': '[Undefined]', 'threshold': 0.1}}",
      "centrality_merge_node_304": "{'eig_list': '[Undefined]', 'function_str': 'CPAC.network_centrality.utils.merge_lists'}",
      "afni_centrality_local_functional_connectivity_density_304": "{'afni_centrality': {'args': '[Undefined]', 'autoclip': '[Undefined]', 'automask': '[Undefined]', 'environ': {'OMP_NUM_THREADS': '2'}, 'num_threads': 2, 'out_file': 'lfcd_merged.nii.gz', 'outputtype': 'AFNI', 'polort': '[Undefined]'}, 'sep_nifti_subbriks': {'function_str': '@Function.sig_imports(\\n    [\\n        \"from collections.abc import Iterable\",\\n        \"import os\",\\n        \"from pathlib import Path\",\\n        \"import nibabel as nib\",\\n        \"from CPAC.pipeline.schema import valid_options\",\\n        \"from CPAC.utils.docs import docstring_parameter\",\\n    ]\\n)\\n@docstring_parameter(\\n    weight_options=tuple(valid_options[\"centrality\"][\"weight_options\"])\\n)\\ndef sep_nifti_subbriks(nifti_file: Path | str, out_names: Iterable[str]) -> list[str]:\\n    \"\"\"Separate sub-briks of niftis and save specified out\\n\\n    Parameters\\n    ----------\\n    nifti_file : ~pathlib.Path or str\\n        path to NIfTI output of an AFNI centrality tool\\n\\n    out_names : iterable of str\\n        an iterable of strings, each ending with one of {weight_options}\\n\\n    Returns\\n    -------\\n    list of str\\n        paths to each of the specified outputs as its own file\\n    \"\"\"\\n    output_niftis = []\\n    weight_options = valid_options[\"centrality\"][\"weight_options\"]\\n    selected_options = {_[::-1].split(\"_\", 1)[0][::-1]: _ for _ in out_names}\\n\\n    nii_img = nib.load(nifti_file)\\n    nii_arr = nii_img.get_fdata()\\n    nii_affine = nii_img.affine\\n    nii_dims = nii_arr.shape\\n\\n    if nii_dims[-1] != len(weight_options):\\n        if len(nii_dims) == 3 and len(out_names) == 1:  # noqa: PLR2004\\n            pass\\n        else:\\n            err_msg = \"out_names must have same number of elements as nifti sub-briks\"\\n            raise Exception(err_msg)\\n\\n    for brik, option in enumerate(weight_options):\\n        if option in selected_options:\\n            if len(nii_dims) == 3:  # noqa: PLR2004\\n                brik_arr = nii_arr\\n            elif len(nii_dims) > 3:  # noqa: PLR2004\\n                brik_arr = nii_arr[:, :, :, 0, brik]\\n            out_file = os.path.join(os.getcwd(), selected_options[option] + \".nii.gz\")\\n            out_img = nib.Nifti1Image(brik_arr, nii_affine)\\n            out_img.to_filename(out_file)\\n            output_niftis.append(out_file)\\n\\n    return output_niftis\\n', 'out_names': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebbc0>'}, 'outputspec': {}, 'inputspec': {'in_file': '[Undefined]', 'template': '[Undefined]', 'threshold': 0.001}, 'convert_threshold': {'function_str': 'def convert_pvalue_to_r(datafile, p_value, two_tailed=False):\\n    \"\"\"\\n    Calculate correlation threshold from p_value.\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        filepath to dataset to extract number of time pts from\\n    p_value : float\\n        significance threshold p-value\\n    two_tailed : boolean (optional); default=False\\n        flag to indicate whether to calculate the two-tailed t-test\\n        threshold for the returned correlation value\\n\\n    Returns\\n    -------\\n    r_value : float\\n        correlation threshold value\\n    \"\"\"\\n    import numpy as np\\n    import nibabel as nib\\n    import scipy.stats\\n\\n    # Get two-tailed distribution\\n    if two_tailed:\\n        p_value = p_value / 2\\n\\n    # Load in data and number of time pts\\n    img = nib.load(datafile).get_fdata()\\n    t_pts = img.shape[-1]\\n\\n    # N-2 degrees of freedom with Pearson correlation (two sample means)\\n    deg_freedom = t_pts - 2\\n\\n    # Inverse Survival Function (Inverse of SF)\\n    # Note: survival function (SF) is also known as the complementary\\n    # cumulative distribution function (CCDF): F_(x) = p = P(X > x) = 1 - F(x)\\n    # The inverse will yield: x = F_^-1(p) = F_^-1(P(X > x))\\n    # where x is a value under the distribution of the random variable X\\n    # such that the probability of getting greater than x, is p\\n    t_value = scipy.stats.t.isf(p_value, deg_freedom)\\n    return np.sqrt(t_value**2 / (deg_freedom + t_value**2))\\n\\n    # Return correlation coefficient\\n', 'two_tailed': '[Undefined]'}}",
      "space-template_dcb_smooth_AFNI_304": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'smooth': {'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'fwhm_input': {'fwhm': '[Undefined]'}, 'outputspec': {}}",
      "space-template_dcb_zstd_304": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_desc-sm_dcb_zstd_304": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_lfcdb_smooth_AFNI_304": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'smooth': {'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'fwhm_input': {'fwhm': '[Undefined]'}, 'outputspec': {}}",
      "space-template_lfcdb_zstd_304": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_desc-sm_lfcdb_zstd_304": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_lfcdw_smooth_AFNI_304": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'smooth': {'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'fwhm_input': {'fwhm': '[Undefined]'}, 'outputspec': {}}",
      "space-template_lfcdw_zstd_304": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_desc-sm_lfcdw_zstd_304": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "resample_functional_to_template_307": "{'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': True, 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat', 'in_weight': '[Undefined]', 'interp': 'trilinear', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
      "afni_centrality_degree_centrality_307": "{'afni_centrality': {'args': '[Undefined]', 'autoclip': '[Undefined]', 'automask': '[Undefined]', 'environ': {'OMP_NUM_THREADS': '2'}, 'num_threads': 2, 'oned_file': '[Undefined]', 'out_file': 'degree_centrality_merged.nii.gz', 'outputtype': 'AFNI', 'polort': '[Undefined]', 'thresh': '[Undefined]'}, 'sep_nifti_subbriks': {'function_str': '@Function.sig_imports(\\n    [\\n        \"from collections.abc import Iterable\",\\n        \"import os\",\\n        \"from pathlib import Path\",\\n        \"import nibabel as nib\",\\n        \"from CPAC.pipeline.schema import valid_options\",\\n        \"from CPAC.utils.docs import docstring_parameter\",\\n    ]\\n)\\n@docstring_parameter(\\n    weight_options=tuple(valid_options[\"centrality\"][\"weight_options\"])\\n)\\ndef sep_nifti_subbriks(nifti_file: Path | str, out_names: Iterable[str]) -> list[str]:\\n    \"\"\"Separate sub-briks of niftis and save specified out\\n\\n    Parameters\\n    ----------\\n    nifti_file : ~pathlib.Path or str\\n        path to NIfTI output of an AFNI centrality tool\\n\\n    out_names : iterable of str\\n        an iterable of strings, each ending with one of {weight_options}\\n\\n    Returns\\n    -------\\n    list of str\\n        paths to each of the specified outputs as its own file\\n    \"\"\"\\n    output_niftis = []\\n    weight_options = valid_options[\"centrality\"][\"weight_options\"]\\n    selected_options = {_[::-1].split(\"_\", 1)[0][::-1]: _ for _ in out_names}\\n\\n    nii_img = nib.load(nifti_file)\\n    nii_arr = nii_img.get_fdata()\\n    nii_affine = nii_img.affine\\n    nii_dims = nii_arr.shape\\n\\n    if nii_dims[-1] != len(weight_options):\\n        if len(nii_dims) == 3 and len(out_names) == 1:  # noqa: PLR2004\\n            pass\\n        else:\\n            err_msg = \"out_names must have same number of elements as nifti sub-briks\"\\n            raise Exception(err_msg)\\n\\n    for brik, option in enumerate(weight_options):\\n        if option in selected_options:\\n            if len(nii_dims) == 3:  # noqa: PLR2004\\n                brik_arr = nii_arr\\n            elif len(nii_dims) > 3:  # noqa: PLR2004\\n                brik_arr = nii_arr[:, :, :, 0, brik]\\n            out_file = os.path.join(os.getcwd(), selected_options[option] + \".nii.gz\")\\n            out_img = nib.Nifti1Image(brik_arr, nii_affine)\\n            out_img.to_filename(out_file)\\n            output_niftis.append(out_file)\\n\\n    return output_niftis\\n', 'out_names': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebb50>'}, 'outputspec': {}, 'inputspec': {'in_file': '[Undefined]', 'template': '[Undefined]', 'threshold': 0.1}}",
      "centrality_merge_node_307": "{'eig_list': '[Undefined]', 'function_str': 'CPAC.network_centrality.utils.merge_lists'}",
      "afni_centrality_local_functional_connectivity_density_307": "{'afni_centrality': {'args': '[Undefined]', 'autoclip': '[Undefined]', 'automask': '[Undefined]', 'environ': {'OMP_NUM_THREADS': '2'}, 'num_threads': 2, 'out_file': 'lfcd_merged.nii.gz', 'outputtype': 'AFNI', 'polort': '[Undefined]'}, 'sep_nifti_subbriks': {'function_str': '@Function.sig_imports(\\n    [\\n        \"from collections.abc import Iterable\",\\n        \"import os\",\\n        \"from pathlib import Path\",\\n        \"import nibabel as nib\",\\n        \"from CPAC.pipeline.schema import valid_options\",\\n        \"from CPAC.utils.docs import docstring_parameter\",\\n    ]\\n)\\n@docstring_parameter(\\n    weight_options=tuple(valid_options[\"centrality\"][\"weight_options\"])\\n)\\ndef sep_nifti_subbriks(nifti_file: Path | str, out_names: Iterable[str]) -> list[str]:\\n    \"\"\"Separate sub-briks of niftis and save specified out\\n\\n    Parameters\\n    ----------\\n    nifti_file : ~pathlib.Path or str\\n        path to NIfTI output of an AFNI centrality tool\\n\\n    out_names : iterable of str\\n        an iterable of strings, each ending with one of {weight_options}\\n\\n    Returns\\n    -------\\n    list of str\\n        paths to each of the specified outputs as its own file\\n    \"\"\"\\n    output_niftis = []\\n    weight_options = valid_options[\"centrality\"][\"weight_options\"]\\n    selected_options = {_[::-1].split(\"_\", 1)[0][::-1]: _ for _ in out_names}\\n\\n    nii_img = nib.load(nifti_file)\\n    nii_arr = nii_img.get_fdata()\\n    nii_affine = nii_img.affine\\n    nii_dims = nii_arr.shape\\n\\n    if nii_dims[-1] != len(weight_options):\\n        if len(nii_dims) == 3 and len(out_names) == 1:  # noqa: PLR2004\\n            pass\\n        else:\\n            err_msg = \"out_names must have same number of elements as nifti sub-briks\"\\n            raise Exception(err_msg)\\n\\n    for brik, option in enumerate(weight_options):\\n        if option in selected_options:\\n            if len(nii_dims) == 3:  # noqa: PLR2004\\n                brik_arr = nii_arr\\n            elif len(nii_dims) > 3:  # noqa: PLR2004\\n                brik_arr = nii_arr[:, :, :, 0, brik]\\n            out_file = os.path.join(os.getcwd(), selected_options[option] + \".nii.gz\")\\n            out_img = nib.Nifti1Image(brik_arr, nii_affine)\\n            out_img.to_filename(out_file)\\n            output_niftis.append(out_file)\\n\\n    return output_niftis\\n', 'out_names': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebae0>'}, 'outputspec': {}, 'inputspec': {'in_file': '[Undefined]', 'template': '[Undefined]', 'threshold': 0.001}, 'convert_threshold': {'function_str': 'def convert_pvalue_to_r(datafile, p_value, two_tailed=False):\\n    \"\"\"\\n    Calculate correlation threshold from p_value.\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        filepath to dataset to extract number of time pts from\\n    p_value : float\\n        significance threshold p-value\\n    two_tailed : boolean (optional); default=False\\n        flag to indicate whether to calculate the two-tailed t-test\\n        threshold for the returned correlation value\\n\\n    Returns\\n    -------\\n    r_value : float\\n        correlation threshold value\\n    \"\"\"\\n    import numpy as np\\n    import nibabel as nib\\n    import scipy.stats\\n\\n    # Get two-tailed distribution\\n    if two_tailed:\\n        p_value = p_value / 2\\n\\n    # Load in data and number of time pts\\n    img = nib.load(datafile).get_fdata()\\n    t_pts = img.shape[-1]\\n\\n    # N-2 degrees of freedom with Pearson correlation (two sample means)\\n    deg_freedom = t_pts - 2\\n\\n    # Inverse Survival Function (Inverse of SF)\\n    # Note: survival function (SF) is also known as the complementary\\n    # cumulative distribution function (CCDF): F_(x) = p = P(X > x) = 1 - F(x)\\n    # The inverse will yield: x = F_^-1(p) = F_^-1(P(X > x))\\n    # where x is a value under the distribution of the random variable X\\n    # such that the probability of getting greater than x, is p\\n    t_value = scipy.stats.t.isf(p_value, deg_freedom)\\n    return np.sqrt(t_value**2 / (deg_freedom + t_value**2))\\n\\n    # Return correlation coefficient\\n', 'two_tailed': '[Undefined]'}}",
      "space-template_dcb_smooth_AFNI_307": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'smooth': {'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'fwhm_input': {'fwhm': '[Undefined]'}, 'outputspec': {}}",
      "space-template_dcb_zstd_307": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_desc-sm_dcb_zstd_307": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_lfcdb_smooth_AFNI_307": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'smooth': {'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'fwhm_input': {'fwhm': '[Undefined]'}, 'outputspec': {}}",
      "space-template_lfcdb_zstd_307": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_desc-sm_lfcdb_zstd_307": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_lfcdw_smooth_AFNI_307": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'smooth': {'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'fwhm_input': {'fwhm': '[Undefined]'}, 'outputspec': {}}",
      "space-template_lfcdw_zstd_307": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "space-template_desc-sm_lfcdw_zstd_307": "{'inputspec': {'in_file': '[Undefined]', 'mask': '[Undefined]'}, 'z_score_std': {'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}, 'outputspec': {}}",
      "id_string_desc-preproc_T1w_39": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-preproc_T1w', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_desc-preproc_T1w_39": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-preproc_T1w_39": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_desc-preproc_T1w_39": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-head_T1w_41": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-head_T1w', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_desc-head_T1w_41": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-head_T1w_41": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_desc-head_T1w_41": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-T1w_desc-brain_mask_34": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-T1w_desc-brain_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-T1w_desc-brain_mask_34": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-T1w_desc-brain_mask_34": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-T1w_desc-brain_mask_34": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-preproc_T1w_48": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-preproc_T1w', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_desc-preproc_T1w_48": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "anat_mni_ants_register": "{'inputspec': {'ants_para': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}, 'calc_ants_warp': {'function_str': 'def hardcoded_reg(\\n    moving_brain,\\n    reference_brain,\\n    moving_skull,\\n    reference_skull,\\n    ants_para,\\n    moving_mask=None,\\n    reference_mask=None,\\n    fixed_image_mask=None,\\n    interp=None,\\n    reg_with_skull=0,\\n):\\n    \"\"\"Run ANTs registration.\"\"\"\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \"dimensionality\":\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = (\\n                        \"Dimensionality specified in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 2, 3, or 4 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--dimensionality\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"verbose\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"Verbose output option in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--verbose\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"float\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"Float option in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--float\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"collapse-output-transforms\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"collapse-output-transforms specified in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--collapse-output-transforms\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"winsorize-image-intensities\":\\n                if (\\n                    ants_para[para_index][para_type][\"lowerQuantile\"] is None\\n                    or ants_para[para_index][para_type][\"upperQuantile\"] is None\\n                ):\\n                    err_msg = (\\n                        \"Please specifiy lowerQuantile and upperQuantile of ANTs\"\\n                        \" parameters --winsorize-image-intensities in pipeline config.\"\\n                    )\\n                    raise RequiredFieldInvalid(err_msg)\\n                regcmd.append(\"--winsorize-image-intensities\")\\n                _quantile = ants_para[para_index][para_type]\\n                regcmd.append(\\n                    f\"[{_quantile[\\'lowerQuantile\\']},{_quantile[\\'upperQuantile\\']}]\"\\n                )\\n\\n            elif para_type == \"initial-moving-transform\":\\n                if ants_para[para_index][para_type][\"initializationFeature\"] is None:\\n                    err_msg = (\\n                        \"Please specifiy initializationFeature of ANTs parameters in\"\\n                        \" pipeline config.\"\\n                    )\\n                    raise RequiredFieldInvalid(err_msg)\\n                regcmd.append(\"--initial-moving-transform\")\\n                initialization_feature = ants_para[para_index][para_type][\\n                    \"initializationFeature\"\\n                ]\\n                if reg_with_skull == 1:\\n                    regcmd.append(\\n                        f\"[{reference_skull},{moving_skull},{initialization_feature}]\"\\n                    )\\n                else:\\n                    regcmd.append(\\n                        f\"[{reference_brain},{moving_brain},{initialization_feature}]\"\\n                    )\\n\\n            elif para_type == \"transforms\":\\n                for trans_index in range(len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type in (\"Rigid\", \"Affine\"):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"gradientStep\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    f\"Please specifiy {trans_type} Gradient Step of\"\\n                                    \" ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            gradient_step = ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"gradientStep\"]\\n                            regcmd.append(f\"{trans_type}[{gradient_step}]\")\\n\\n                        if trans_type == \"SyN\":\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"gradientStep\"]\\n                                is None\\n                            ):\\n                                err_msg = f\"Please specifiy {trans_type} Gradient Step of ANTs parameters in pipeline config.\"\\n                                raise RequiredFieldInvalid(err_msg)\\n                            SyN_para = []\\n                            SyN_para.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"gradientStep\"]\\n                                )\\n                            )\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"updateFieldVarianceInVoxelSpace\"]\\n                                is not None\\n                            ):\\n                                SyN_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"updateFieldVarianceInVoxelSpace\"]\\n                                    )\\n                                )\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"totalFieldVarianceInVoxelSpace\"]\\n                                is not None\\n                            ):\\n                                SyN_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"totalFieldVarianceInVoxelSpace\"]\\n                                    )\\n                                )\\n                            SyN_para = \",\".join([str(elem) for elem in SyN_para])\\n                            regcmd.append(f\"{trans_type}[{SyN_para}]\")\\n\\n                        if (\\n                            ants_para[para_index][para_type][trans_index][trans_type][\\n                                \"metric\"\\n                            ][\"type\"]\\n                            == \"MI\"\\n                        ):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"metricWeight\"]\\n                                is None\\n                                or ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"numberOfBins\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy metricWeight and numberOfBins for\"\\n                                    \" metric MI of ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            MI_para = []\\n                            _metric = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"metric\"]\\n                            MI_para.append(\\n                                f\"{_metric[\\'metricWeight\\']},{_metric[\\'numberOfBins\\']}\"\\n                            )\\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"metric\"] and ants_para[para_index][\\n                                para_type\\n                            ][trans_index][trans_type][\"metric\"][\\n                                \"samplingStrategy\"\\n                            ] in [\"None\", \"Regular\", \"Random\"]:\\n                                MI_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingStrategy\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"samplingPercentage\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"samplingPercentage\"]\\n                                is not None\\n                            ):\\n                                MI_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingPercentage\"]\\n                                    )\\n                                )\\n                            MI_para = \",\".join([str(elem) for elem in MI_para])\\n                            regcmd.append(\"--metric\")\\n                            if reg_with_skull == 1:\\n                                regcmd.append(\\n                                    f\"MI[{reference_skull},{moving_skull},{MI_para}]\"\\n                                )\\n                            else:\\n                                regcmd.append(\\n                                    f\"MI[{reference_brain},{moving_brain},{MI_para}]\"\\n                                )\\n\\n                        if (\\n                            ants_para[para_index][para_type][trans_index][trans_type][\\n                                \"metric\"\\n                            ][\"type\"]\\n                            == \"CC\"\\n                        ):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"metricWeight\"]\\n                                is None\\n                                or ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"radius\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy metricWeight and radius for metric\"\\n                                    \" CC of ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            CC_para = []\\n                            _metric = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"metric\"]\\n                            CC_para.append(\\n                                f\"{_metric[\\'metricWeight\\']},{_metric[\\'radius\\']}\"\\n                            )\\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"metric\"] and ants_para[para_index][\\n                                para_type\\n                            ][trans_index][trans_type][\"metric\"][\\n                                \"samplingStrategy\"\\n                            ] in [\"None\", \"Regular\", \"Random\"]:\\n                                CC_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingStrategy\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"samplingPercentage\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"samplingPercentage\"]\\n                                is not None\\n                            ):\\n                                CC_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingPercentage\"]\\n                                    )\\n                                )\\n                            CC_para = \",\".join([str(elem) for elem in CC_para])\\n                            regcmd.append(\"--metric\")\\n                            regcmd.append(\\n                                f\"CC[{reference_skull},{moving_skull},{CC_para}]\"\\n                            )\\n\\n                        if (\\n                            \"convergence\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                        ):\\n                            convergence_para = []\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"iteration\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy convergence iteration of ANTs\"\\n                                    \" parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            convergence_para.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"convergence\"][\"iteration\"]\\n                                )\\n                            )\\n                            if (\\n                                \"convergenceThreshold\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"convergenceThreshold\"]\\n                                is not None\\n                            ):\\n                                convergence_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"convergence\"][\"convergenceThreshold\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"convergenceWindowSize\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"convergenceWindowSize\"]\\n                                is not None\\n                            ):\\n                                convergence_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"convergence\"][\"convergenceWindowSize\"]\\n                                    )\\n                                )\\n                            convergence_para = \",\".join(\\n                                [str(elem) for elem in convergence_para]\\n                            )\\n                            regcmd.append(\"--convergence\")\\n                            regcmd.append(f\"[{convergence_para}]\")\\n\\n                        if (\\n                            \"smoothing-sigmas\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"smoothing-sigmas\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"smoothing-sigmas\"]\\n                                )\\n                            )\\n\\n                        if (\\n                            \"shrink-factors\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"shrink-factors\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"shrink-factors\"]\\n                                )\\n                            )\\n\\n                        if (\\n                            \"use-histogram-matching\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                        ):\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"use-histogram-matching\"]:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if (\\n                            \"winsorize-image-intensities\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"][\"lowerQuantile\"]\\n                            is not None\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"][\"upperQuantile\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            _quantile = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"]\\n                            regcmd.append(\\n                                f\"[{_quantile[\\'lowerQuantile\\']},{_quantile[\\'upperQuantile\\']}]\"\\n                            )\\n\\n                        if (\\n                            \"masks\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"masks\"]\\n                            is not None\\n                        ):\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"masks\"]:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(f\"[{reference_mask},{moving_mask}]\")\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \"masks\":\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if (\\n                        not ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        err_msg = (\\n                            \"Masks option in ANTs parameters:\"\\n                            f\" {ants_para[para_index][para_type]} is not supported.\"\\n                            \" Please set `fixed_image_mask` as True. Or set both\"\\n                            \" `fixed_image_mask` and `moving_image_mask` as False\"\\n                        )\\n                        raise NotImplementedError(err_msg)\\n                    if (\\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\n                            \"[\" + str(reference_mask) + \",\" + str(moving_mask) + \"]\"\\n                        )\\n                    elif (\\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\"[\" + str(reference_mask) + \"]\")\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(f\"{interp}\")\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \"command.txt\")\\n    with open(command_file, \"wt\") as f:\\n        f.write(\" \".join(regcmd))\\n\\n    try:\\n        subprocess.check_output(regcmd)\\n    except Exception as e:\\n        msg = (\\n            \"[!] ANTS registration did not complete successfully.\"\\n            f\"\\\\n\\\\nError details:\\\\n{e}\\\\n{e.output}\\\\n\"\\n        )\\n        raise RuntimeError(msg)\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\".\") if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        msg = (\\n            \"\\\\n\\\\n[!] No registration output file found. ANTS registration may not have\"\\n            \" completed successfully.\\\\n\\\\n\"\\n        )\\n        raise RuntimeError(msg)\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': '[Undefined]'}, 'select_forward_initial': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Initial'}, 'select_forward_rigid': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Rigid'}, 'select_forward_affine': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Affine'}, 'select_forward_warp': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Warp'}, 'select_inverse_warp': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Inverse'}, 'outputspec': {'composite_transform': '[Undefined]', 'wait': '[Undefined]'}}",
      "json_space-template_desc-preproc_T1w_48": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_desc-preproc_T1w_48": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-T1w_to-template_mode-image_xfm_49": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-T1w_to-template_mode-image_xfm', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_from-T1w_to-template_mode-image_xfm_49": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-T1w_to-template_mode-image_xfm_49": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_from-T1w_to-template_mode-image_xfm_49": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-template_to-T1w_mode-image_xfm_50": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-template_to-T1w_mode-image_xfm', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_from-template_to-T1w_mode-image_xfm_50": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-template_to-T1w_mode-image_xfm_50": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_from-template_to-T1w_mode-image_xfm_50": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-T1w_to-template_mode-image_desc-linear_xfm_51": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-T1w_to-template_mode-image_desc-linear_xfm', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_from-T1w_to-template_mode-image_desc-linear_xfm_51": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-T1w_to-template_mode-image_desc-linear_xfm_51": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_from-T1w_to-template_mode-image_desc-linear_xfm_51": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-template_to-T1w_mode-image_desc-linear_xfm_52": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-template_to-T1w_mode-image_desc-linear_xfm', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_from-template_to-T1w_mode-image_desc-linear_xfm_52": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-template_to-T1w_mode-image_desc-linear_xfm_52": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_from-template_to-T1w_mode-image_desc-linear_xfm_52": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-T1w_to-template_mode-image_desc-nonlinear_xfm', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-template_to-T1w_mode-image_desc-nonlinear_xfm', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-head_T1w_58": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-head_T1w', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_desc-head_T1w_58": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_desc-head_T1w_58": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_desc-head_T1w_58": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-brain_mask_62": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-brain_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_desc-brain_mask_62": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_desc-brain_mask_62": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_desc-brain_mask_62": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-CSF_probseg_69": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-CSF_probseg', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_label-CSF_probseg_69": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-CSF_probseg_69": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_label-CSF_probseg_69": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-GM_probseg_70": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-GM_probseg', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_label-GM_probseg_70": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-GM_probseg_70": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_label-GM_probseg_70": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-WM_probseg_71": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-WM_probseg', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_label-WM_probseg_71": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-WM_probseg_71": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_label-WM_probseg_71": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-CSF_mask_72": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-CSF_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_label-CSF_mask_72": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-CSF_mask_72": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_label-CSF_mask_72": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-GM_mask_73": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-GM_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_label-GM_mask_73": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-GM_mask_73": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_label-GM_mask_73": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-WM_mask_74": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-WM_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_label-WM_mask_74": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-WM_mask_74": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_label-WM_mask_74": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-CSF_desc-preproc_mask_75": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-CSF_desc-preproc_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_label-CSF_desc-preproc_mask_75": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-CSF_desc-preproc_mask_75": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_label-CSF_desc-preproc_mask_75": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-GM_desc-preproc_mask_76": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-GM_desc-preproc_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_label-GM_desc-preproc_mask_76": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-GM_desc-preproc_mask_76": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_label-GM_desc-preproc_mask_76": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-WM_desc-preproc_mask_77": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-WM_desc-preproc_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_label-WM_desc-preproc_mask_77": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-WM_desc-preproc_mask_77": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_label-WM_desc-preproc_mask_77": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-preproc_bold_189": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-preproc_bold', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_desc-preproc_bold_189": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-preproc_bold_189": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_desc-preproc_bold_189": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-movementParameters_motion_92": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-movementParameters_motion', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_desc-movementParameters_motion_92": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-movementParameters_motion_92": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_desc-movementParameters_motion_92": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-mean_bold_99": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-mean_bold', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_desc-mean_bold_99": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-mean_bold_99": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_desc-mean_bold_99": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-bold_desc-brain_mask_109": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-bold_desc-brain_mask', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-bold_desc-brain_mask_109": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-bold_desc-brain_mask_109": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-bold_desc-brain_mask_109": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_motion_129": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'motion', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_motion_129": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_motion_129": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_motion_129": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-summary_motion_130": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-summary_motion', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_desc-summary_motion_130": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-summary_motion_130": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_desc-summary_motion_130": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_sbref_131": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'sbref', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_sbref_131": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_sbref_131": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_sbref_131": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-T1w_sbref_139": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-T1w_sbref', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-T1w_sbref_139": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-T1w_sbref_139": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-T1w_sbref_139": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-bold_to-T1w_mode-image_desc-linear_xfm_140": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_from-bold_to-T1w_mode-image_desc-linear_xfm_140": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-bold_to-T1w_mode-image_desc-linear_xfm_140": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_from-bold_to-T1w_mode-image_desc-linear_xfm_140": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-bold_to-template_mode-image_xfm_147": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-bold_to-template_mode-image_xfm', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_from-bold_to-template_mode-image_xfm_147": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-bold_to-template_mode-image_xfm_147": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_from-bold_to-template_mode-image_xfm_147": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-template_to-bold_mode-image_xfm_148": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-template_to-bold_mode-image_xfm', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_from-template_to-bold_mode-image_xfm_148": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-template_to-bold_mode-image_xfm_148": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_from-template_to-bold_mode-image_xfm_148": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-T1w_desc-eroded_mask_151": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-T1w_desc-eroded_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-T1w_desc-eroded_mask_151": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-T1w_desc-eroded_mask_151": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-T1w_desc-eroded_mask_151": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-CSF_desc-eroded_mask_154": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-CSF_desc-eroded_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_label-CSF_desc-eroded_mask_154": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-CSF_desc-eroded_mask_154": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_label-CSF_desc-eroded_mask_154": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-WM_desc-eroded_mask_157": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-WM_desc-eroded_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_label-WM_desc-eroded_mask_157": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-WM_desc-eroded_mask_157": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_label-WM_desc-eroded_mask_157": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_reg-parameter_desc-confounds-1_timeseries_241": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'reg-parameter_desc-confounds-1_timeseries', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_reg-parameter_desc-confounds-1_timeseries_241": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_reg-parameter_desc-confounds-1_timeseries_241": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_reg-parameter_desc-confounds-1_timeseries_241": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_reg-aCompCor_desc-confounds-2_timeseries_248": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'reg-aCompCor_desc-confounds-2_timeseries', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_reg-aCompCor_desc-confounds-2_timeseries_248": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_reg-aCompCor_desc-confounds-2_timeseries_248": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_reg-aCompCor_desc-confounds-2_timeseries_248": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-head_bold_202": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-head_bold', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_desc-head_bold_202": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_desc-head_bold_202": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_desc-head_bold_202": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-preproc-1_bold_238": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-preproc-1_bold', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-preproc-1_bold_238": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-preproc-1_bold_238": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-preproc-1_bold_238": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-preproc-2_bold_245": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-preproc-2_bold', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-preproc-2_bold_245": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-preproc-2_bold_245": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-preproc-2_bold_245": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-bold_mask_205": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-bold_mask', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_desc-bold_mask_205": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_desc-bold_mask_205": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_desc-bold_mask_205": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_res-derivative_desc-bold_mask_207": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_res-derivative_desc-bold_mask', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired functional derivative resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_res-derivative_desc-bold_mask_207": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_res-derivative_desc-bold_mask_207": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_res-derivative_desc-bold_mask_207": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_sbref_211": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_sbref', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_sbref_211": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_sbref_211": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_sbref_211": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-Mean-1_timeseries_256": "{'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-Mean-1_timeseries', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-Mean-1_timeseries_256": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-Mean-1_timeseries_256": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-Mean-1_timeseries_256": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-Mean-2_timeseries_260": "{'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-Mean-2_timeseries', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-Mean-2_timeseries_260": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-Mean-2_timeseries_260": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-Mean-2_timeseries_260": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258": "{'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-PearsonNilearn-1_correlations', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262": "{'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259": "{'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-PartialNilearn-1_correlations', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263": "{'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-PartialNilearn-2_correlations', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-1_alff_272": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-1_alff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-1_alff_272": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-1_alff_272": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-1_alff_272": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-2_alff_281": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-2_alff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-2_alff_281": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-2_alff_281": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-2_alff_281": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-sm-1_alff_273": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'resource': 'space-template_reg-parameter_desc-sm-1_alff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-sm-1_alff_273": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-sm-1_alff_273": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-sm-1_alff_273": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-sm-2_alff_282": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'resource': 'space-template_reg-aCompCor_desc-sm-2_alff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-sm-2_alff_282": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-sm-2_alff_282": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-sm-2_alff_282": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-zstd-1_alff_275": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-zstd-1_alff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-zstd-1_alff_275": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-zstd-1_alff_275": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-zstd-1_alff_275": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-zstd-2_alff_284": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-zstd-2_alff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-zstd-2_alff_284": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-zstd-2_alff_284": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-zstd-2_alff_284": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-sm-zstd-1_alff_276": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-sm-zstd-1_alff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-sm-zstd-1_alff_276": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-sm-zstd-1_alff_276": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-sm-zstd-1_alff_276": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-sm-zstd-2_alff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-1_falff_277": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-1_falff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-1_falff_277": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-1_falff_277": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-1_falff_277": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-2_falff_286": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-2_falff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-2_falff_286": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-2_falff_286": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-2_falff_286": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-sm-1_falff_278": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'resource': 'space-template_reg-parameter_desc-sm-1_falff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-sm-1_falff_278": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-sm-1_falff_278": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-sm-1_falff_278": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-sm-2_falff_287": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'resource': 'space-template_reg-aCompCor_desc-sm-2_falff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-sm-2_falff_287": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-sm-2_falff_287": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-sm-2_falff_287": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-zstd-1_falff_279": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-zstd-1_falff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-zstd-1_falff_279": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-zstd-1_falff_279": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-zstd-1_falff_279": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-zstd-2_falff_288": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-zstd-2_falff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-zstd-2_falff_288": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-zstd-2_falff_288": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-zstd-2_falff_288": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-sm-zstd-1_falff_280": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-sm-zstd-1_falff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-sm-zstd-1_falff_280": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-sm-zstd-1_falff_280": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-sm-zstd-1_falff_280": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-sm-zstd-2_falff', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-1_reho_294": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-1_reho', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-1_reho_294": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-1_reho_294": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-1_reho_294": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-2_reho_299": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-2_reho', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-2_reho_299": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-2_reho_299": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-2_reho_299": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-sm-1_reho_295": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'resource': 'space-template_reg-parameter_desc-sm-1_reho', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-sm-1_reho_295": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-sm-1_reho_295": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-sm-1_reho_295": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-sm-2_reho_300": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'resource': 'space-template_reg-aCompCor_desc-sm-2_reho', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-sm-2_reho_300": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-sm-2_reho_300": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-sm-2_reho_300": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-zstd-1_reho_297": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-zstd-1_reho', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-zstd-1_reho_297": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-zstd-1_reho_297": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-zstd-1_reho_297": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-zstd-2_reho_302": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-zstd-2_reho', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-zstd-2_reho_302": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-zstd-2_reho_302": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-zstd-2_reho_302": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-sm-zstd-1_reho_298": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-sm-zstd-1_reho', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-sm-zstd-1_reho_298": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-sm-zstd-1_reho_298": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-sm-zstd-1_reho_298": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-sm-zstd-2_reho', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-1_dcb_310": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-1_dcb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-1_dcb_310": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-1_dcb_310": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-1_dcb_310": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-2_dcb_323": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-2_dcb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-2_dcb_323": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-2_dcb_323": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-2_dcb_323": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-sm-1_dcb_311": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'resource': 'space-template_reg-parameter_desc-sm-1_dcb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-sm-1_dcb_311": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-sm-1_dcb_311": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-sm-1_dcb_311": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-sm-2_dcb_324": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'resource': 'space-template_reg-aCompCor_desc-sm-2_dcb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-sm-2_dcb_324": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-sm-2_dcb_324": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-sm-2_dcb_324": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-zstd-1_dcb_313": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-zstd-1_dcb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-zstd-1_dcb_313": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-zstd-1_dcb_313": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-zstd-1_dcb_313": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-zstd-2_dcb_326": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-zstd-2_dcb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-zstd-2_dcb_326": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-zstd-2_dcb_326": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-zstd-2_dcb_326": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-sm-zstd-1_dcb_314": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-sm-zstd-1_dcb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-sm-zstd-1_dcb_314": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-sm-zstd-1_dcb_314": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-sm-zstd-1_dcb_314": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-sm-zstd-2_dcb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-1_lfcdb_315": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-1_lfcdb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-1_lfcdb_315": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-1_lfcdb_315": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-1_lfcdb_315": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-2_lfcdb_328": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-2_lfcdb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-2_lfcdb_328": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-2_lfcdb_328": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-2_lfcdb_328": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-sm-1_lfcdb_316": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'resource': 'space-template_reg-parameter_desc-sm-1_lfcdb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-sm-1_lfcdb_316": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-sm-1_lfcdb_316": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-sm-1_lfcdb_316": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdb_329": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'resource': 'space-template_reg-aCompCor_desc-sm-2_lfcdb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-sm-2_lfcdb_329": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-sm-2_lfcdb_329": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-sm-2_lfcdb_329": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-zstd-1_lfcdb_317": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-zstd-1_lfcdb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-zstd-1_lfcdb_317": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-zstd-1_lfcdb_317": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-zstd-1_lfcdb_317": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-zstd-2_lfcdb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-sm-zstd-1_lfcdb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-1_lfcdw_319": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-1_lfcdw', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-1_lfcdw_319": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-1_lfcdw_319": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-1_lfcdw_319": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-2_lfcdw_332": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-2_lfcdw', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-2_lfcdw_332": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-2_lfcdw_332": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-2_lfcdw_332": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-sm-1_lfcdw_320": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'resource': 'space-template_reg-parameter_desc-sm-1_lfcdw', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-sm-1_lfcdw_320": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-sm-1_lfcdw_320": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-sm-1_lfcdw_320": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdw_333": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'resource': 'space-template_reg-aCompCor_desc-sm-2_lfcdw', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-sm-2_lfcdw_333": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-sm-2_lfcdw_333": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-sm-2_lfcdw_333": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-zstd-1_lfcdw_321": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-zstd-1_lfcdw', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-zstd-1_lfcdw_321": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-zstd-1_lfcdw_321": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-zstd-1_lfcdw_321": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-zstd-2_lfcdw', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-parameter_desc-sm-zstd-1_lfcdw', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335": "{'atlas_id': '[Undefined]', 'cfg': '[C-PAC config]', 'extension': '[Undefined]', 'function_str': 'def create_id_string(\\n    cfg,\\n    unique_id,\\n    resource,\\n    scan_id=None,\\n    template_desc=None,\\n    atlas_id=None,\\n    fwhm=None,\\n    subdir=None,\\n    extension=None,\\n):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\\n\\n    if atlas_id:\\n        if \"_desc-\" in atlas_id:\\n            atlas, desc = atlas_id.split(\"_desc-\")\\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\\n            else:\\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\\n        resource = f\"atlas-{atlas_id}_{resource}\"\\n\\n    part_id = unique_id.split(\"_\")[0]\\n    ses_id = unique_id.split(\"_\")[1]\\n    if \"sub-\" not in part_id:\\n        part_id = f\"sub-{part_id}\"\\n    if \"ses-\" not in ses_id:\\n        ses_id = f\"ses-{ses_id}\"\\n    if scan_id:\\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\\n    else:\\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\\n\\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\\n        for bidstag in out_filename.split(\"_\"):\\n            if prefix in bidstag and \"template\" in bidstag:\\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\\n\\n    if fwhm:\\n        for tag in resource.split(\"_\"):\\n            if \"desc-\" in tag and \"-sm\" in tag:\\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            msg = \"\\\\n[!] FWHM provided but no desc-sm?\\\\n\"\\n            raise Exception(msg)\\n\\n    if extension is not None:\\n        out_filename = out_filename + \".\" + str(extension)\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \"anat\":\\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\\n    if subdir == \"func\":\\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw', 'subdir': 'func', 'template_desc': 'MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz', 'unique_id': 'sub-PA001_ses-V1W1'}",
      "nii_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335": "{'function_str': 'def write_output_json(json_data, filename, indent=3, basedir=None):\\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if \".gii\" in filename:\\n        filename = os.path.splitext(filename)[0]\\n        filename = f\"{filename}.json\"\\n    if \".json\" not in filename:\\n        filename = f\"{filename}.json\"\\n\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, \"wt\") as f:\\n        f.write(json_data)\\n    return json_file\\n', 'json_data': '[Truncated]'}",
      "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_RBCv0/sub-PA001/ses-V1W1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}"
    },
    "outputs": {
      "func_ingress_sub-PA001_ses-V1W1": "{'inputnode': {'creds_path': None, 'dl_dir': None, 'scan': None, 'subject': None}, 'check_func_scan': {}, 'selectrest': {'file_path': None}, 'check_for_s3': {'local_path': None}, 'outputspec': {'magnitude': None, 'phase_diff': None, 'rest': None, 'scan': None, 'scan_params': None, 'subject': None}, 'select_scan_params': {'file_path': None}, 's3_scan_params': {'local_path': None}}",
      "bold_scan_params_sub-PA001_ses-V1W1": "{'effective_echo_spacing': None, 'pe_direction': None, 'ref_slice': None, 'start_indx': None, 'stop_indx': None, 'template': None, 'tpattern': None, 'tr': None}",
      "anat_T1w_gather_sub-PA001_ses-V1W1": "{'inputnode': {'anat': None, 'creds_path': None, 'dl_dir': None, 'img_type': None, 'subject': None}, 'check_for_s3': {'local_path': None}, 'outputspec': {'anat': None, 'subject': None}}",
      "anat_deoblique_0": "{'out_file': None}",
      "anat_reorient_0": "{'out_file': None}",
      "anat_skullstrip_ants": "{'inputnode': {'in_files': None, 'in_mask': None}, 'truncate_images_': {'output_image': None}, 'copy_xform': {'bias_corrected': None, 'bias_image': None, 'out_file': None, 'out_mask': None}, 'inu_n4_final_': {'output_image': None, 'bias_image': None}, 'init_aff': {'output_transform': None}, 'norm': {'composite_transform': None, 'elapsed_time': None, 'forward_invert_flags': None, 'forward_transforms': None, 'inverse_composite_transform': None, 'inverse_warped_image': None, 'metric_value': None, 'reverse_forward_invert_flags': None, 'reverse_forward_transforms': None, 'reverse_invert_flags': None, 'reverse_transforms': None, 'save_state': None, 'warped_image': None}, 'map_brainmask': {'output_image': None}, 'inu_n4_': {'output_image': None, 'bias_image': None}, 'res_target': {'output_image': None}, 'res_tmpl': {'output_image': None}, 'thr_brainmask': {'output_image': None}, 'dil_brainmask': {'output_image': None}, 'get_brainmask': {'output_image': None}, 'apply_mask_': {'out_file': None}, 'outputnode': {'bias_corrected': None, 'bias_image': None, 'out_file': None, 'out_mask': None, 'out_segm': None, 'out_tpms': None}, 'lap_target': {'output_image': None}, 'lap_tmpl': {'output_image': None}, 'mrg_tmpl': {'out': None}, 'mrg_target': {'out': None}, 'atropos_wf': {'inputnode': {'in_files': None, 'in_mask': None, 'in_mask_dilated': None}, 'copy_xform': {'out_mask': None, 'out_segm': None, 'out_tpms': None}, '03_pad_mask': {'output_image': None}, '01_atropos': {'classified_image': None, 'posteriors': None}, 'msk_conform': {'out': None}, '02_pad_segm': {'output_image': None}, '04_sel_labels': {'out_csf': None, 'out_gm': None, 'out_wm': None}, '05_get_wm': {'output_image': None}, '06_get_gm': {'output_image': None}, '07_fill_gm': {'output_image': None}, '08_mult_gm': {'output_product_image': None}, '09_relabel_wm': {'output_product_image': None}, '10_me_csf': {'output_image': None}, '11_add_gm': {'output_image': None}, '12_relabel_gm': {'output_product_image': None}, '13_add_gm_wm': {'output_image': None}, '14_sel_labels2': {'out_gm': None, 'out_wm': None}, '15_add_7': {'output_image': None}, '16_me_7': {'output_image': None}, '17_comp_7': {'output_image': None}, '18_md_7': {'output_image': None}, '19_fill_7': {'output_image': None}, '20_add_7_2': {'output_image': None}, '21_md_7_2': {'output_image': None}, '22_me_7_2': {'output_image': None}, '23_depad_mask': {'output_image': None}, '24_depad_segm': {'output_image': None}, '26_depad_wm': {'output_image': None}, '25_depad_gm': {'output_image': None}, '27_depad_csf': {'output_image': None}, 'merge_tpms': {'out': None}, 'outputnode': {'out_mask': None, 'out_segm': None, 'out_tpms': None}}, 'sel_wm': {'out': None}}",
      "brain_extraction_36": "{'out_file': None}",
      "ANTS_T1_to_template_42": "{'inputspec': {'input_brain': None, 'input_head': None, 'input_mask': None, 'interpolation': None, 'reference_brain': None, 'reference_head': None, 'reference_mask': None, 'transform': None}, 'anat_mni_ants_register': {'inputspec': {'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}, 'calc_ants_warp': {'warp_list': None, 'warped_image': None}, 'select_forward_initial': {'selected_warp': None}, 'select_forward_rigid': {'selected_warp': None}, 'select_forward_affine': {'selected_warp': None}, 'select_forward_warp': {'selected_warp': None}, 'select_inverse_warp': {'selected_warp': None}, 'outputspec': {'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}}, 'write_composite_linear_xfm': {'output_image': None}, 'collect_transforms': {'out': None}, 'check_transforms': {'checked_transform_list': None, 'list_length': None}, 'write_composite_invlinear_xfm': {'output_image': None}, 'collect_inv_transforms': {'out': None}, 'check_inv_transforms': {'checked_transform_list': None, 'list_length': None}, 'inverse_transform_flags': {'inverse_transform_flags': None}, 'write_composite_xfm': {'output_image': None}, 'collect_all_transforms': {'out': None}, 'check_all_transforms': {'checked_transform_list': None, 'list_length': None}, 'write_composite_inv_xfm': {'output_image': None}, 'collect_all_inv_transforms': {'out': None}, 'check_all_inv_transforms': {'checked_transform_list': None, 'list_length': None}, 'inverse_all_transform_flags': {'inverse_transform_flags': None}}",
      "resampled_T1w-brain-template": "{'resampled_template': None}",
      "resampled_T1w-template": "{'resampled_template': None}",
      "resampled_T1w-brain-template-mask": "{'resampled_template': None}",
      "warp_wholehead_T1w_to_T1template_55": "{'inputspec': {'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}, 'apply_warp_warp_wholehead_T1w_to_T1template_55': {'output_image': None}, 'interp_string': {'interpolation': None}, 'single_ants_xfm_to_list': {'transform_list': None}, 'outputspec': {'output_image': None}}",
      "write_composite_xfm": "{'output_image': None}",
      "warp_T1mask_to_T1template_59": "{'inputspec': {'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}, 'apply_warp_warp_T1mask_to_T1template_59': {'output_image': None}, 'interp_string': {'interpolation': None}, 'single_ants_xfm_to_list': {'transform_list': None}, 'outputspec': {'output_image': None}}",
      "segment_63": "{'bias_field': None, 'mixeltype': None, 'partial_volume_files': None, 'partial_volume_map': None, 'probability_maps': None, 'restored_image': None, 'tissue_class_files': None, 'tissue_class_map': None}",
      "get_pve_csf_63": "{'out_file': None}",
      "get_pve_gm_63": "{'out_file': None}",
      "get_pve_wm_63": "{'out_file': None}",
      "CSF_63": "{'inputspec': {'brain': None, 'brain_mask': None, 'erosion_mm': None, 'erosion_prop': None, 'mask_erosion_mm': None, 'probability_tissue_map': None, 'template_to_T1_xfm': None, 'threshold': None, 'tissue_class_file': None, 'tissue_prior': None}, 'threshold_segmentmap_CSF_63': {'out_file': None}, 'binarize_CSF_63': {'out_file': None}, 'outputspec': {'probability_tissue_map': None, 'segment_mask': None}}",
      "GM_63": "{'inputspec': {'brain': None, 'brain_mask': None, 'erosion_mm': None, 'erosion_prop': None, 'mask_erosion_mm': None, 'probability_tissue_map': None, 'template_to_T1_xfm': None, 'threshold': None, 'tissue_class_file': None, 'tissue_prior': None}, 'threshold_segmentmap_GM_63': {'out_file': None}, 'binarize_GM_63': {'out_file': None}, 'outputspec': {'probability_tissue_map': None, 'segment_mask': None}}",
      "WM_63": "{'inputspec': {'brain': None, 'brain_mask': None, 'erosion_mm': None, 'erosion_prop': None, 'mask_erosion_mm': None, 'probability_tissue_map': None, 'template_to_T1_xfm': None, 'threshold': None, 'tissue_class_file': None, 'tissue_prior': None}, 'threshold_segmentmap_WM_63': {'out_file': None}, 'binarize_WM_63': {'out_file': None}, 'outputspec': {'probability_tissue_map': None, 'segment_mask': None}}",
      "get_csf_63": "{'filename': None}",
      "func_deoblique_2": "{'out_file': None}",
      "func_reorient_2": "{'out_file': None}",
      "edit_func_81": "{'inputspec': {'func': None, 'start_idx': None, 'stop_idx': None}, 'func_get_idx': {'startidx': None, 'stopidx': None}, 'func_drop_trs': {'out_file': None}, 'outputspec': {'edited_func': None}}",
      "func_get_fmriprep_ref_84": "{'out_file': None}",
      "func_motion_correct_mcflirt_87": "{'mat_file': None, 'mean_img': None, 'out_file': None, 'par_file': None, 'rms_files': None, 'std_img': None, 'variance_img': None}",
      "norm_motion_params_87": "{'out_file': None}",
      "get_mcflirt_rms_abs_87": "{'abs_file': None, 'rels_file': None}",
      "func_slice_timing_correction_94": "{'inputspec': {'func_ts': None, 'tpattern': None, 'tr': None}, 'slice_timing': {'out_file': None, 'timing_file': None}, 'outputspec': {'slice_time_corrected': None}}",
      "func_mean_97": "{'out_file': None}",
      "func_motion_correct_mcflirt_100": "{'mat_file': None, 'mean_img': None, 'out_file': None, 'par_file': None, 'rms_files': None, 'std_img': None, 'variance_img': None}",
      "norm_motion_params_100": "{'out_file': None}",
      "get_mcflirt_rms_abs_100": "{'abs_file': None, 'rels_file': None}",
      "resampled_FSL-AFNI-bold-ref": "{'resampled_template': None}",
      "init_aff_104": "{'output_transform': None}",
      "resampled_FSL-AFNI-brain-mask": "{'resampled_template': None}",
      "norm_104": "{'composite_transform': None, 'elapsed_time': None, 'forward_invert_flags': None, 'forward_transforms': None, 'inverse_composite_transform': None, 'inverse_warped_image': None, 'metric_value': None, 'reverse_forward_invert_flags': None, 'reverse_forward_transforms': None, 'reverse_invert_flags': None, 'reverse_transforms': None, 'save_state': None, 'warped_image': None}",
      "resampled_FSL-AFNI-brain-probseg": "{'resampled_template': None}",
      "map_brainmask_104": "{'output_image': None}",
      "binarize_mask_104": "{'out_file': None}",
      "pre_mask_dilate_104": "{'out_file': None}",
      "print_header_104": "{'header': None}",
      "set_direction_104": "{'outfile': None}",
      "n4_correct_104": "{'bias_image': None, 'output_image': None}",
      "skullstrip_first_pass_104": "{'inskull_mask_file': None, 'inskull_mesh_file': None, 'mask_file': None, 'meshfile': None, 'out_file': None, 'outline_file': None, 'outskin_mask_file': None, 'outskin_mesh_file': None, 'outskull_mask_file': None, 'outskull_mesh_file': None, 'skull_file': None, 'skull_mask_file': None}",
      "skullstrip_first_dilate_104": "{'out_file': None}",
      "skullstrip_first_mask_104": "{'out_file': None}",
      "unifize_104": "{'out_file': None, 'scale_file': None}",
      "skullstrip_second_pass_104": "{'brain_file': None, 'out_file': None}",
      "combine_masks_104": "{'out_file': None}",
      "extract_ref_brain_bold_104": "{'out_file': None}",
      "func_extract_brain_111": "{'out_file': None}",
      "gen_motion_stats_115": "{'inputspec': {'mask': None, 'max_displacement': None, 'motion_correct': None, 'movement_parameters': None, 'rels_displacement': None, 'transformations': None}, 'cal_DVARS': {'out_file': None}, 'cal_DVARS_strip': {'DVARS_val': None, 'out_file': None}, 'outputspec': {'DVARS_1D': None, 'FDJ_1D': None, 'FDP_1D': None, 'desc-summary_motion': None, 'motion': None, 'motion_params': None, 'power_params': None}, 'calculate_FD': {'fd': None, 'out_file': None}, 'calculate_FDJ': {'fd': None, 'out_file': None}, 'get_all_motion_parameters': {'all_motion_val': None, 'summary_motion_power': None}, 'calc_motion_parameters': {'info': None, 'maxdisp': None, 'out_file': None, 'relsdisp': None}, 'calc_power_parameters': {'info': None, 'out_file': None}}",
      "func_to_anat_FLIRT_132": "{'inputspec': {'anat': None, 'dof': None, 'fieldmap': None, 'fieldmapmask': None, 'func': None, 'interp': None}, 'linear_func_to_anat': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'outputspec': {'anat_func_nobbreg': None, 'func_to_anat_linear_xfm_nobbreg': None}}",
      "func_to_anat_bbreg_132": "{'inputspec': {'anat': None, 'anat_wm_segmentation': None, 'bbr_schedule': None, 'bbr_wm_mask_args': None, 'fieldmap': None, 'fieldmapmask': None, 'func': None, 'linear_reg_matrix': None}, 'wm_bb_mask': {'out_file': None}, 'bbreg_func_to_anat': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'outputspec': {'anat_func': None, 'func_to_anat_linear_xfm': None}}",
      "create_func_to_T1wtemplate_xfm_141": "{'inputspec': {'T1w-brain-template_funcreg': None, 'T1w_to_template_xfm': None, 'blip_warp': None, 'coreg_xfm': None, 'input_brain': None, 'mean_bold': None, 'template_to_T1w_xfm': None}, 'fsl_reg_2_itk': {'itk_transform': None}, 'change_transform_type': {'updated_affine_file': None}, 'write_composite_xfm': {'output_image': None}, 'collect_all_transforms': {'out': None}, 'write_composite_inv_xfm': {'output_image': None}, 'collect_inv_transforms': {'out': None}}",
      "resampled_T1w-brain-template-funcreg": "{'resampled_template': None}",
      "write_composite_inv_xfm": "{'output_image': None}",
      "erode_T1w_mask_149": "{'inputspec': {'brain_mask': None, 'erode_mm': None, 'erode_prop': None, 'mask': None, 'mask_erode_mm': None}, 'erode_skullstrip_mask': {'eroded_skullstrip_mask': None, 'output_roi_mask': None}, 'outputspec': {'eroded_mask': None}}",
      "erode_CSF_mask_152": "{'inputspec': {'brain_mask': None, 'erode_mm': None, 'erode_prop': None, 'mask': None, 'mask_erode_mm': None}, 'erode_skullstrip_mask': {'eroded_skullstrip_mask': None, 'output_roi_mask': None}, 'erode_mask': {'eroded_roi_mask': None}, 'outputspec': {'eroded_mask': None}}",
      "erode_WM_mask_155": "{'inputspec': {'brain_mask': None, 'erode_mm': None, 'erode_prop': None, 'mask': None, 'mask_erode_mm': None}, 'erode_skullstrip_mask': {'eroded_skullstrip_mask': None, 'output_roi_mask': None}, 'erode_mask': {'eroded_roi_mask': None}, 'outputspec': {'eroded_mask': None}}",
      "nuisance_regressors_36_parameter_158": "{'inputspec': {'anat_to_func_linear_xfm_file_path': None, 'anat_to_mni_linear_xfm_file_path': None, 'anatomical_eroded_brain_mask_file_path': None, 'anatomical_file_path': None, 'creds_path': None, 'csf_mask_file_path': None, 'dl_dir': None, 'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'func_to_anat_linear_xfm_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'gm_mask_file_path': None, 'lat_ventricles_mask_file_path': None, 'mni_to_anat_linear_xfm_file_path': None, 'motion_parameters_file_path': None, 'selector': None, 'tr': None, 'wm_mask_file_path': None}, 'functional_mean': {'out_file': None}, 'Anatomical_2mm_flirt': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'Functional_2mm_flirt': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'WhiteMatter_2mm_flirt': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'WhiteMatter_merge_masks': {'out': None}, 'WhiteMatter_union_masks': {'out_file': None}, 'WhiteMatter_mean': {'out_file': None}, 'CerebrospinalFluid_2mm_flirt': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'CerebrospinalFluid_merge_masks': {'out': None}, 'CerebrospinalFluid_union_masks': {'out_file': None}, 'CerebrospinalFluid_mean': {'out_file': None}, 'GlobalSignal_merge_masks': {'out': None}, 'GlobalSignal_union_masks': {'out_file': None}, 'GlobalSignal_mean': {'out_file': None}, 'build_nuisance_regressors': {'censor_indices': None, 'out_file': None}, 'outputspec': {'censor_indices': None, 'regressors_file_path': None}}",
      "anat_to_func_linear_xfm_36_parameter_158": "{'out_file': None}",
      "write_composite_invlinear_xfm": "{'output_image': None}",
      "write_composite_linear_xfm": "{'output_image': None}",
      "nuisance_regressors_aCompCor_158": "{'inputspec': {'anat_to_func_linear_xfm_file_path': None, 'anat_to_mni_linear_xfm_file_path': None, 'anatomical_eroded_brain_mask_file_path': None, 'anatomical_file_path': None, 'creds_path': None, 'csf_mask_file_path': None, 'dl_dir': None, 'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'func_to_anat_linear_xfm_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'gm_mask_file_path': None, 'lat_ventricles_mask_file_path': None, 'mni_to_anat_linear_xfm_file_path': None, 'motion_parameters_file_path': None, 'selector': None, 'tr': None, 'wm_mask_file_path': None}, 'functional_mean': {'out_file': None}, 'Anatomical_2mm_flirt': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'Functional_2mm_flirt': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'WhiteMatter_2mm_flirt': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'WhiteMatter_merge_masks': {'out': None}, 'WhiteMatter_union_masks': {'out_file': None}, 'WhiteMatter_mean': {'out_file': None}, 'CerebrospinalFluid_2mm_flirt': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'CerebrospinalFluid_merge_masks': {'out': None}, 'CerebrospinalFluid_union_masks': {'out_file': None}, 'CerebrospinalFluid_mean': {'out_file': None}, 'aCompCor_merge_masks': {'out': None}, 'aCompCor_union_masks': {'out_file': None}, 'aCompCor_DetrendPC': {'compcor_file': None}, 'build_nuisance_regressors': {'censor_indices': None, 'out_file': None}, 'outputspec': {'censor_indices': None, 'regressors_file_path': None}}",
      "anat_to_func_linear_xfm_aCompCor_158": "{'out_file': None}",
      "convert_bbr2itk_190": "{'itk_transform': None}",
      "split_func_190": "{'out_files': None}",
      "convert_motionxfm2itk_190_": "{'itk_transform': None}",
      "collectxfm_func_to_standard_190_": "{'out': None}",
      "applyxfm_func_to_standard_190_": "{'output_image': None}",
      "applyxfm_derivfunc_to_standard_190_": "{'output_image': None}",
      "resampled_T1w-brain-template-deriv": "{'resampled_template': None}",
      "merge_func_to_standard_190": "{'merged_file': None}",
      "merge_derivfunc_to_standard_190": "{'merged_file': None}",
      "applyxfm_func_mask_to_standard_190": "{'output_image': None}",
      "collectxfm_func_mask_to_standard_190": "{'out': None}",
      "applyxfm_deriv_mask_to_standard_190": "{'output_image': None}",
      "collectxfm_deriv_mask_to_standard_190": "{'out': None}",
      "get_func_brain_to_standard_190": "{'out_file': None}",
      "warp_funcreg-sbref_to_T1wtemplate_208": "{'inputspec': {'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}, 'apply_warp_warp_funcreg-sbref_to_T1wtemplate_208': {'output_image': None}, 'interp_string': {'interpolation': None}, 'single_ants_xfm_to_list': {'transform_list': None}, 'outputspec': {'output_image': None}}",
      "func_despiked_template_212": "{'out_file': None}",
      "func_deriv_despiked_template_212": "{'out_file': None}",
      "align_template_mask_to_template_data_space-template_reg-36_parameter_218": "{'out_file': None}",
      "nuisance_regression_space-template_reg-36_parameter_218": "{'inputspec': {'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'regressor_file': None, 'selector': None}, 'nuisance_regression': {'out_file': None}, 'outputspec': {'residual_file_path': None}}",
      "filtering_bold_and_regressors_space-template_reg-36_parameter_218": "{'inputspec': {'functional_brain_mask_file_path': None, 'functional_file_path': None, 'nuisance_selectors': None, 'regressors_file_path': None, 'tr': None}, 'frequency_filter': {'bandpassed_file': None, 'regressor_file': None}, 'outputspec': {'residual_file_path': None, 'residual_regressor': None}}",
      "align_template_mask_to_template_data_space-template_res-derivative_reg-36_parameter_218": "{'out_file': None}",
      "nuisance_regression_space-template_res-derivative_reg-36_parameter_218": "{'inputspec': {'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'regressor_file': None, 'selector': None}, 'nuisance_regression': {'out_file': None}, 'outputspec': {'residual_file_path': None}}",
      "filtering_bold_and_regressors_space-template_res-derivative_reg-36_parameter_218": "{'inputspec': {'functional_brain_mask_file_path': None, 'functional_file_path': None, 'nuisance_selectors': None, 'regressors_file_path': None, 'tr': None}, 'frequency_filter': {'bandpassed_file': None, 'regressor_file': None}, 'outputspec': {'residual_file_path': None, 'residual_regressor': None}}",
      "align_template_mask_to_template_data_space-template_reg-aCompCor_228": "{'out_file': None}",
      "nuisance_regression_space-template_reg-aCompCor_228": "{'inputspec': {'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'regressor_file': None, 'selector': None}, 'nuisance_regression': {'out_file': None}, 'outputspec': {'residual_file_path': None}}",
      "filtering_bold_and_regressors_space-template_reg-aCompCor_228": "{'inputspec': {'functional_brain_mask_file_path': None, 'functional_file_path': None, 'nuisance_selectors': None, 'regressors_file_path': None, 'tr': None}, 'frequency_filter': {'bandpassed_file': None, 'regressor_file': None}, 'outputspec': {'residual_file_path': None, 'residual_regressor': None}}",
      "align_template_mask_to_template_data_space-template_res-derivative_reg-aCompCor_228": "{'out_file': None}",
      "nuisance_regression_space-template_res-derivative_reg-aCompCor_228": "{'inputspec': {'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'regressor_file': None, 'selector': None}, 'nuisance_regression': {'out_file': None}, 'outputspec': {'residual_file_path': None}}",
      "filtering_bold_and_regressors_space-template_res-derivative_reg-aCompCor_228": "{'inputspec': {'functional_brain_mask_file_path': None, 'functional_file_path': None, 'nuisance_selectors': None, 'regressors_file_path': None, 'tr': None}, 'frequency_filter': {'bandpassed_file': None, 'regressor_file': None}, 'outputspec': {'residual_file_path': None, 'residual_regressor': None}}",
      "resample_functional_roi_252": "{'out_func': None, 'out_roi': None}",
      "roi_dataflow_252": "{'inputspec': {'creds_path': None, 'dl_dir': None, 'mask': None, 'mask_file': None}, 'check_for_s3': {'local_path': None}, 'outputspec': {'out_file': None, 'out_name': None}}",
      "roi_timeseries_252": "{'inputspec': {'rest': None}, '3dROIstats': {'out_file': None}, 'input_roi': {'roi': None}, 'clean_roi_csv': {'edited_roi_csv': None, 'roi_array': None}, 'outputspec': {'roi_csv': None, 'roi_ts': None}}",
      "connectomeNilearnPearson_252": "{'inputspec': {'atlas_name': None, 'in_file': None, 'in_rois': None, 'method': None}, 'connectome': {'out_file': None}, 'outputspec': {'out_file': None}}",
      "connectomeNilearnPartial_252": "{'inputspec': {'atlas_name': None, 'in_file': None, 'in_rois': None, 'method': None}, 'connectome': {'out_file': None}, 'outputspec': {'out_file': None}}",
      "resample_functional_roi_254": "{'out_func': None, 'out_roi': None}",
      "roi_dataflow_254": "{'inputspec': {'creds_path': None, 'dl_dir': None, 'mask': None, 'mask_file': None}, 'check_for_s3': {'local_path': None}, 'outputspec': {'out_file': None, 'out_name': None}}",
      "roi_timeseries_254": "{'inputspec': {'rest': None}, '3dROIstats': {'out_file': None}, 'input_roi': {'roi': None}, 'clean_roi_csv': {'edited_roi_csv': None, 'roi_array': None}, 'outputspec': {'roi_csv': None, 'roi_ts': None}}",
      "connectomeNilearnPearson_254": "{'inputspec': {'atlas_name': None, 'in_file': None, 'in_rois': None, 'method': None}, 'connectome': {'out_file': None}, 'outputspec': {'out_file': None}}",
      "connectomeNilearnPartial_254": "{'inputspec': {'atlas_name': None, 'in_file': None, 'in_rois': None, 'method': None}, 'connectome': {'out_file': None}, 'outputspec': {'out_file': None}}",
      "alff_falff_264": "{'hp_input': {'hp': None}, 'bandpass_filtering': {'out_file': None}, 'lp_input': {'lp': None}, 'inputspec': {'rest_mask': None, 'rest_res': None}, 'get_option_string': {'option_string': None}, 'stddev_filtered': {'out_file': None}, 'outputspec': {'alff_img': None, 'falff_img': None}, 'stddev_unfiltered': {'out_file': None}, 'falff': {'out_file': None}}",
      "space-template_alff_smooth_AFNI_264": "{'inputspec': {'in_file': None, 'mask': None}, 'smooth': {'out_file': None}, 'fwhm_input': {'fwhm': None}, 'outputspec': {'fwhm': None, 'out_file': None}}",
      "space-template_alff_zstd_264": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_desc-sm_alff_zstd_264": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_falff_smooth_AFNI_264": "{'inputspec': {'in_file': None, 'mask': None}, 'smooth': {'out_file': None}, 'fwhm_input': {'fwhm': None}, 'outputspec': {'fwhm': None, 'out_file': None}}",
      "space-template_falff_zstd_264": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_desc-sm_falff_zstd_264": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "alff_falff_268": "{'hp_input': {'hp': None}, 'bandpass_filtering': {'out_file': None}, 'lp_input': {'lp': None}, 'inputspec': {'rest_mask': None, 'rest_res': None}, 'get_option_string': {'option_string': None}, 'stddev_filtered': {'out_file': None}, 'outputspec': {'alff_img': None, 'falff_img': None}, 'stddev_unfiltered': {'out_file': None}, 'falff': {'out_file': None}}",
      "space-template_alff_smooth_AFNI_268": "{'inputspec': {'in_file': None, 'mask': None}, 'smooth': {'out_file': None}, 'fwhm_input': {'fwhm': None}, 'outputspec': {'fwhm': None, 'out_file': None}}",
      "space-template_alff_zstd_268": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_desc-sm_alff_zstd_268": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_falff_smooth_AFNI_268": "{'inputspec': {'in_file': None, 'mask': None}, 'smooth': {'out_file': None}, 'fwhm_input': {'fwhm': None}, 'outputspec': {'fwhm': None, 'out_file': None}}",
      "space-template_falff_zstd_268": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_desc-sm_falff_zstd_268": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "reho_290": "{'inputspec': {'cluster_size': None, 'rest_mask': None, 'rest_res_filt': None}, 'reho_map': {'out_file': None}, 'outputspec': {'raw_reho_map': None}}",
      "space-template_reho_smooth_AFNI_290": "{'inputspec': {'in_file': None, 'mask': None}, 'smooth': {'out_file': None}, 'fwhm_input': {'fwhm': None}, 'outputspec': {'fwhm': None, 'out_file': None}}",
      "space-template_reho_zstd_290": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_desc-sm_reho_zstd_290": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "reho_292": "{'inputspec': {'cluster_size': None, 'rest_mask': None, 'rest_res_filt': None}, 'reho_map': {'out_file': None}, 'outputspec': {'raw_reho_map': None}}",
      "space-template_reho_smooth_AFNI_292": "{'inputspec': {'in_file': None, 'mask': None}, 'smooth': {'out_file': None}, 'fwhm_input': {'fwhm': None}, 'outputspec': {'fwhm': None, 'out_file': None}}",
      "space-template_reho_zstd_292": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_desc-sm_reho_zstd_292": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "resample_functional_to_template_304": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
      "gather_template-specification-file": "{'inputnode': {'creds_path': None, 'data': None, 'dl_dir': None, 'scan': None, 'unique_id': None}, 'check_for_s3': {'local_path': None}, 'outputspec': {'data': None, 'scan': None, 'unique_id': None}}",
      "afni_centrality_degree_centrality_304": "{'afni_centrality': {'oned_file': None, 'out_file': None}, 'sep_nifti_subbriks': {'output_niftis': None}, 'outputspec': {'outfile_list': None}, 'inputspec': {'in_file': None, 'template': None, 'threshold': None}}",
      "centrality_merge_node_304": "{'degree_binarized': None, 'degree_weighted': None, 'eigen_binarized': None, 'eigen_weighted': None, 'lfcd_binarized': None, 'lfcd_weighted': None}",
      "afni_centrality_local_functional_connectivity_density_304": "{'afni_centrality': {'out_file': None}, 'sep_nifti_subbriks': {'output_niftis': None}, 'outputspec': {'outfile_list': None}, 'inputspec': {'in_file': None, 'template': None, 'threshold': None}, 'convert_threshold': {'rvalue_threshold': None}}",
      "space-template_dcb_smooth_AFNI_304": "{'inputspec': {'in_file': None, 'mask': None}, 'smooth': {'out_file': None}, 'fwhm_input': {'fwhm': None}, 'outputspec': {'fwhm': None, 'out_file': None}}",
      "space-template_dcb_zstd_304": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_desc-sm_dcb_zstd_304": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_lfcdb_smooth_AFNI_304": "{'inputspec': {'in_file': None, 'mask': None}, 'smooth': {'out_file': None}, 'fwhm_input': {'fwhm': None}, 'outputspec': {'fwhm': None, 'out_file': None}}",
      "space-template_lfcdb_zstd_304": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_desc-sm_lfcdb_zstd_304": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_lfcdw_smooth_AFNI_304": "{'inputspec': {'in_file': None, 'mask': None}, 'smooth': {'out_file': None}, 'fwhm_input': {'fwhm': None}, 'outputspec': {'fwhm': None, 'out_file': None}}",
      "space-template_lfcdw_zstd_304": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_desc-sm_lfcdw_zstd_304": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "resample_functional_to_template_307": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
      "afni_centrality_degree_centrality_307": "{'afni_centrality': {'oned_file': None, 'out_file': None}, 'sep_nifti_subbriks': {'output_niftis': None}, 'outputspec': {'outfile_list': None}, 'inputspec': {'in_file': None, 'template': None, 'threshold': None}}",
      "centrality_merge_node_307": "{'degree_binarized': None, 'degree_weighted': None, 'eigen_binarized': None, 'eigen_weighted': None, 'lfcd_binarized': None, 'lfcd_weighted': None}",
      "afni_centrality_local_functional_connectivity_density_307": "{'afni_centrality': {'out_file': None}, 'sep_nifti_subbriks': {'output_niftis': None}, 'outputspec': {'outfile_list': None}, 'inputspec': {'in_file': None, 'template': None, 'threshold': None}, 'convert_threshold': {'rvalue_threshold': None}}",
      "space-template_dcb_smooth_AFNI_307": "{'inputspec': {'in_file': None, 'mask': None}, 'smooth': {'out_file': None}, 'fwhm_input': {'fwhm': None}, 'outputspec': {'fwhm': None, 'out_file': None}}",
      "space-template_dcb_zstd_307": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_desc-sm_dcb_zstd_307": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_lfcdb_smooth_AFNI_307": "{'inputspec': {'in_file': None, 'mask': None}, 'smooth': {'out_file': None}, 'fwhm_input': {'fwhm': None}, 'outputspec': {'fwhm': None, 'out_file': None}}",
      "space-template_lfcdb_zstd_307": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_desc-sm_lfcdb_zstd_307": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_lfcdw_smooth_AFNI_307": "{'inputspec': {'in_file': None, 'mask': None}, 'smooth': {'out_file': None}, 'fwhm_input': {'fwhm': None}, 'outputspec': {'fwhm': None, 'out_file': None}}",
      "space-template_lfcdw_zstd_307": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "space-template_desc-sm_lfcdw_zstd_307": "{'inputspec': {'in_file': None, 'mask': None}, 'z_score_std': {'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}, 'outputspec': {'out_file': None}}",
      "id_string_desc-preproc_T1w_39": "{'out_filename': None}",
      "nii_desc-preproc_T1w_39": "{'out_file': None}",
      "json_desc-preproc_T1w_39": "{'json_file': None}",
      "sinker_desc-preproc_T1w_39": "{'out_file': None}",
      "id_string_desc-head_T1w_41": "{'out_filename': None}",
      "nii_desc-head_T1w_41": "{'out_file': None}",
      "json_desc-head_T1w_41": "{'json_file': None}",
      "sinker_desc-head_T1w_41": "{'out_file': None}",
      "id_string_space-T1w_desc-brain_mask_34": "{'out_filename': None}",
      "nii_space-T1w_desc-brain_mask_34": "{'out_file': None}",
      "json_space-T1w_desc-brain_mask_34": "{'json_file': None}",
      "sinker_space-T1w_desc-brain_mask_34": "{'out_file': None}",
      "id_string_space-template_desc-preproc_T1w_48": "{'out_filename': None}",
      "nii_space-template_desc-preproc_T1w_48": "{'out_file': None}",
      "anat_mni_ants_register": "{'inputspec': {'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}, 'calc_ants_warp': {'warp_list': None, 'warped_image': None}, 'select_forward_initial': {'selected_warp': None}, 'select_forward_rigid': {'selected_warp': None}, 'select_forward_affine': {'selected_warp': None}, 'select_forward_warp': {'selected_warp': None}, 'select_inverse_warp': {'selected_warp': None}, 'outputspec': {'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}}",
      "json_space-template_desc-preproc_T1w_48": "{'json_file': None}",
      "sinker_space-template_desc-preproc_T1w_48": "{'out_file': None}",
      "id_string_from-T1w_to-template_mode-image_xfm_49": "{'out_filename': None}",
      "nii_from-T1w_to-template_mode-image_xfm_49": "{'out_file': None}",
      "json_from-T1w_to-template_mode-image_xfm_49": "{'json_file': None}",
      "sinker_from-T1w_to-template_mode-image_xfm_49": "{'out_file': None}",
      "id_string_from-template_to-T1w_mode-image_xfm_50": "{'out_filename': None}",
      "nii_from-template_to-T1w_mode-image_xfm_50": "{'out_file': None}",
      "json_from-template_to-T1w_mode-image_xfm_50": "{'json_file': None}",
      "sinker_from-template_to-T1w_mode-image_xfm_50": "{'out_file': None}",
      "id_string_from-T1w_to-template_mode-image_desc-linear_xfm_51": "{'out_filename': None}",
      "nii_from-T1w_to-template_mode-image_desc-linear_xfm_51": "{'out_file': None}",
      "json_from-T1w_to-template_mode-image_desc-linear_xfm_51": "{'json_file': None}",
      "sinker_from-T1w_to-template_mode-image_desc-linear_xfm_51": "{'out_file': None}",
      "id_string_from-template_to-T1w_mode-image_desc-linear_xfm_52": "{'out_filename': None}",
      "nii_from-template_to-T1w_mode-image_desc-linear_xfm_52": "{'out_file': None}",
      "json_from-template_to-T1w_mode-image_desc-linear_xfm_52": "{'json_file': None}",
      "sinker_from-template_to-T1w_mode-image_desc-linear_xfm_52": "{'out_file': None}",
      "id_string_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53": "{'out_filename': None}",
      "nii_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53": "{'out_file': None}",
      "json_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53": "{'json_file': None}",
      "sinker_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53": "{'out_file': None}",
      "id_string_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54": "{'out_filename': None}",
      "nii_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54": "{'out_file': None}",
      "json_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54": "{'json_file': None}",
      "sinker_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54": "{'out_file': None}",
      "id_string_space-template_desc-head_T1w_58": "{'out_filename': None}",
      "nii_space-template_desc-head_T1w_58": "{'out_file': None}",
      "json_space-template_desc-head_T1w_58": "{'json_file': None}",
      "sinker_space-template_desc-head_T1w_58": "{'out_file': None}",
      "id_string_space-template_desc-brain_mask_62": "{'out_filename': None}",
      "nii_space-template_desc-brain_mask_62": "{'out_file': None}",
      "json_space-template_desc-brain_mask_62": "{'json_file': None}",
      "sinker_space-template_desc-brain_mask_62": "{'out_file': None}",
      "id_string_label-CSF_probseg_69": "{'out_filename': None}",
      "nii_label-CSF_probseg_69": "{'out_file': None}",
      "json_label-CSF_probseg_69": "{'json_file': None}",
      "sinker_label-CSF_probseg_69": "{'out_file': None}",
      "id_string_label-GM_probseg_70": "{'out_filename': None}",
      "nii_label-GM_probseg_70": "{'out_file': None}",
      "json_label-GM_probseg_70": "{'json_file': None}",
      "sinker_label-GM_probseg_70": "{'out_file': None}",
      "id_string_label-WM_probseg_71": "{'out_filename': None}",
      "nii_label-WM_probseg_71": "{'out_file': None}",
      "json_label-WM_probseg_71": "{'json_file': None}",
      "sinker_label-WM_probseg_71": "{'out_file': None}",
      "id_string_label-CSF_mask_72": "{'out_filename': None}",
      "nii_label-CSF_mask_72": "{'out_file': None}",
      "json_label-CSF_mask_72": "{'json_file': None}",
      "sinker_label-CSF_mask_72": "{'out_file': None}",
      "id_string_label-GM_mask_73": "{'out_filename': None}",
      "nii_label-GM_mask_73": "{'out_file': None}",
      "json_label-GM_mask_73": "{'json_file': None}",
      "sinker_label-GM_mask_73": "{'out_file': None}",
      "id_string_label-WM_mask_74": "{'out_filename': None}",
      "nii_label-WM_mask_74": "{'out_file': None}",
      "json_label-WM_mask_74": "{'json_file': None}",
      "sinker_label-WM_mask_74": "{'out_file': None}",
      "id_string_label-CSF_desc-preproc_mask_75": "{'out_filename': None}",
      "nii_label-CSF_desc-preproc_mask_75": "{'out_file': None}",
      "json_label-CSF_desc-preproc_mask_75": "{'json_file': None}",
      "sinker_label-CSF_desc-preproc_mask_75": "{'out_file': None}",
      "id_string_label-GM_desc-preproc_mask_76": "{'out_filename': None}",
      "nii_label-GM_desc-preproc_mask_76": "{'out_file': None}",
      "json_label-GM_desc-preproc_mask_76": "{'json_file': None}",
      "sinker_label-GM_desc-preproc_mask_76": "{'out_file': None}",
      "id_string_label-WM_desc-preproc_mask_77": "{'out_filename': None}",
      "nii_label-WM_desc-preproc_mask_77": "{'out_file': None}",
      "json_label-WM_desc-preproc_mask_77": "{'json_file': None}",
      "sinker_label-WM_desc-preproc_mask_77": "{'out_file': None}",
      "id_string_desc-preproc_bold_189": "{'out_filename': None}",
      "nii_desc-preproc_bold_189": "{'out_file': None}",
      "json_desc-preproc_bold_189": "{'json_file': None}",
      "sinker_desc-preproc_bold_189": "{'out_file': None}",
      "id_string_desc-movementParameters_motion_92": "{'out_filename': None}",
      "nii_desc-movementParameters_motion_92": "{'out_file': None}",
      "json_desc-movementParameters_motion_92": "{'json_file': None}",
      "sinker_desc-movementParameters_motion_92": "{'out_file': None}",
      "id_string_desc-mean_bold_99": "{'out_filename': None}",
      "nii_desc-mean_bold_99": "{'out_file': None}",
      "json_desc-mean_bold_99": "{'json_file': None}",
      "sinker_desc-mean_bold_99": "{'out_file': None}",
      "id_string_space-bold_desc-brain_mask_109": "{'out_filename': None}",
      "nii_space-bold_desc-brain_mask_109": "{'out_file': None}",
      "json_space-bold_desc-brain_mask_109": "{'json_file': None}",
      "sinker_space-bold_desc-brain_mask_109": "{'out_file': None}",
      "id_string_motion_129": "{'out_filename': None}",
      "nii_motion_129": "{'out_file': None}",
      "json_motion_129": "{'json_file': None}",
      "sinker_motion_129": "{'out_file': None}",
      "id_string_desc-summary_motion_130": "{'out_filename': None}",
      "nii_desc-summary_motion_130": "{'out_file': None}",
      "json_desc-summary_motion_130": "{'json_file': None}",
      "sinker_desc-summary_motion_130": "{'out_file': None}",
      "id_string_sbref_131": "{'out_filename': None}",
      "nii_sbref_131": "{'out_file': None}",
      "json_sbref_131": "{'json_file': None}",
      "sinker_sbref_131": "{'out_file': None}",
      "id_string_space-T1w_sbref_139": "{'out_filename': None}",
      "nii_space-T1w_sbref_139": "{'out_file': None}",
      "json_space-T1w_sbref_139": "{'json_file': None}",
      "sinker_space-T1w_sbref_139": "{'out_file': None}",
      "id_string_from-bold_to-T1w_mode-image_desc-linear_xfm_140": "{'out_filename': None}",
      "nii_from-bold_to-T1w_mode-image_desc-linear_xfm_140": "{'out_file': None}",
      "json_from-bold_to-T1w_mode-image_desc-linear_xfm_140": "{'json_file': None}",
      "sinker_from-bold_to-T1w_mode-image_desc-linear_xfm_140": "{'out_file': None}",
      "id_string_from-bold_to-template_mode-image_xfm_147": "{'out_filename': None}",
      "nii_from-bold_to-template_mode-image_xfm_147": "{'out_file': None}",
      "json_from-bold_to-template_mode-image_xfm_147": "{'json_file': None}",
      "sinker_from-bold_to-template_mode-image_xfm_147": "{'out_file': None}",
      "id_string_from-template_to-bold_mode-image_xfm_148": "{'out_filename': None}",
      "nii_from-template_to-bold_mode-image_xfm_148": "{'out_file': None}",
      "json_from-template_to-bold_mode-image_xfm_148": "{'json_file': None}",
      "sinker_from-template_to-bold_mode-image_xfm_148": "{'out_file': None}",
      "id_string_space-T1w_desc-eroded_mask_151": "{'out_filename': None}",
      "nii_space-T1w_desc-eroded_mask_151": "{'out_file': None}",
      "json_space-T1w_desc-eroded_mask_151": "{'json_file': None}",
      "sinker_space-T1w_desc-eroded_mask_151": "{'out_file': None}",
      "id_string_label-CSF_desc-eroded_mask_154": "{'out_filename': None}",
      "nii_label-CSF_desc-eroded_mask_154": "{'out_file': None}",
      "json_label-CSF_desc-eroded_mask_154": "{'json_file': None}",
      "sinker_label-CSF_desc-eroded_mask_154": "{'out_file': None}",
      "id_string_label-WM_desc-eroded_mask_157": "{'out_filename': None}",
      "nii_label-WM_desc-eroded_mask_157": "{'out_file': None}",
      "json_label-WM_desc-eroded_mask_157": "{'json_file': None}",
      "sinker_label-WM_desc-eroded_mask_157": "{'out_file': None}",
      "id_string_reg-parameter_desc-confounds-1_timeseries_241": "{'out_filename': None}",
      "nii_reg-parameter_desc-confounds-1_timeseries_241": "{'out_file': None}",
      "json_reg-parameter_desc-confounds-1_timeseries_241": "{'json_file': None}",
      "sinker_reg-parameter_desc-confounds-1_timeseries_241": "{'out_file': None}",
      "id_string_reg-aCompCor_desc-confounds-2_timeseries_248": "{'out_filename': None}",
      "nii_reg-aCompCor_desc-confounds-2_timeseries_248": "{'out_file': None}",
      "json_reg-aCompCor_desc-confounds-2_timeseries_248": "{'json_file': None}",
      "sinker_reg-aCompCor_desc-confounds-2_timeseries_248": "{'out_file': None}",
      "id_string_space-template_desc-head_bold_202": "{'out_filename': None}",
      "nii_space-template_desc-head_bold_202": "{'out_file': None}",
      "json_space-template_desc-head_bold_202": "{'json_file': None}",
      "sinker_space-template_desc-head_bold_202": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-preproc-1_bold_238": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-preproc-1_bold_238": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-preproc-1_bold_238": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-preproc-1_bold_238": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-preproc-2_bold_245": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-preproc-2_bold_245": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-preproc-2_bold_245": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-preproc-2_bold_245": "{'out_file': None}",
      "id_string_space-template_desc-bold_mask_205": "{'out_filename': None}",
      "nii_space-template_desc-bold_mask_205": "{'out_file': None}",
      "json_space-template_desc-bold_mask_205": "{'json_file': None}",
      "sinker_space-template_desc-bold_mask_205": "{'out_file': None}",
      "id_string_space-template_res-derivative_desc-bold_mask_207": "{'out_filename': None}",
      "nii_space-template_res-derivative_desc-bold_mask_207": "{'out_file': None}",
      "json_space-template_res-derivative_desc-bold_mask_207": "{'json_file': None}",
      "sinker_space-template_res-derivative_desc-bold_mask_207": "{'out_file': None}",
      "id_string_space-template_sbref_211": "{'out_filename': None}",
      "nii_space-template_sbref_211": "{'out_file': None}",
      "json_space-template_sbref_211": "{'json_file': None}",
      "sinker_space-template_sbref_211": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-Mean-1_timeseries_256": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-Mean-1_timeseries_256": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-Mean-1_timeseries_256": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-Mean-1_timeseries_256": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-Mean-2_timeseries_260": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-Mean-2_timeseries_260": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-Mean-2_timeseries_260": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-Mean-2_timeseries_260": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-1_alff_272": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-1_alff_272": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-1_alff_272": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-1_alff_272": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-2_alff_281": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-2_alff_281": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-2_alff_281": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-2_alff_281": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-sm-1_alff_273": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-sm-1_alff_273": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-sm-1_alff_273": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-sm-1_alff_273": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-sm-2_alff_282": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-sm-2_alff_282": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-sm-2_alff_282": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-sm-2_alff_282": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-zstd-1_alff_275": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-zstd-1_alff_275": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-zstd-1_alff_275": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-zstd-1_alff_275": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-zstd-2_alff_284": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-zstd-2_alff_284": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-zstd-2_alff_284": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-zstd-2_alff_284": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-sm-zstd-1_alff_276": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-sm-zstd-1_alff_276": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-sm-zstd-1_alff_276": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-sm-zstd-1_alff_276": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-1_falff_277": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-1_falff_277": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-1_falff_277": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-1_falff_277": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-2_falff_286": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-2_falff_286": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-2_falff_286": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-2_falff_286": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-sm-1_falff_278": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-sm-1_falff_278": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-sm-1_falff_278": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-sm-1_falff_278": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-sm-2_falff_287": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-sm-2_falff_287": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-sm-2_falff_287": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-sm-2_falff_287": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-zstd-1_falff_279": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-zstd-1_falff_279": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-zstd-1_falff_279": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-zstd-1_falff_279": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-zstd-2_falff_288": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-zstd-2_falff_288": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-zstd-2_falff_288": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-zstd-2_falff_288": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-sm-zstd-1_falff_280": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-sm-zstd-1_falff_280": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-sm-zstd-1_falff_280": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-sm-zstd-1_falff_280": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-1_reho_294": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-1_reho_294": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-1_reho_294": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-1_reho_294": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-2_reho_299": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-2_reho_299": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-2_reho_299": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-2_reho_299": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-sm-1_reho_295": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-sm-1_reho_295": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-sm-1_reho_295": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-sm-1_reho_295": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-sm-2_reho_300": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-sm-2_reho_300": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-sm-2_reho_300": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-sm-2_reho_300": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-zstd-1_reho_297": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-zstd-1_reho_297": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-zstd-1_reho_297": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-zstd-1_reho_297": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-zstd-2_reho_302": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-zstd-2_reho_302": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-zstd-2_reho_302": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-zstd-2_reho_302": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-sm-zstd-1_reho_298": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-sm-zstd-1_reho_298": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-sm-zstd-1_reho_298": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-sm-zstd-1_reho_298": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-1_dcb_310": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-1_dcb_310": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-1_dcb_310": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-1_dcb_310": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-2_dcb_323": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-2_dcb_323": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-2_dcb_323": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-2_dcb_323": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-sm-1_dcb_311": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-sm-1_dcb_311": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-sm-1_dcb_311": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-sm-1_dcb_311": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-sm-2_dcb_324": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-sm-2_dcb_324": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-sm-2_dcb_324": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-sm-2_dcb_324": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-zstd-1_dcb_313": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-zstd-1_dcb_313": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-zstd-1_dcb_313": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-zstd-1_dcb_313": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-zstd-2_dcb_326": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-zstd-2_dcb_326": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-zstd-2_dcb_326": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-zstd-2_dcb_326": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-sm-zstd-1_dcb_314": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-sm-zstd-1_dcb_314": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-sm-zstd-1_dcb_314": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-sm-zstd-1_dcb_314": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-1_lfcdb_315": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-1_lfcdb_315": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-1_lfcdb_315": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-1_lfcdb_315": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-2_lfcdb_328": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-2_lfcdb_328": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-2_lfcdb_328": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-2_lfcdb_328": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-sm-1_lfcdb_316": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-sm-1_lfcdb_316": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-sm-1_lfcdb_316": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-sm-1_lfcdb_316": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdb_329": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-sm-2_lfcdb_329": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-sm-2_lfcdb_329": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-sm-2_lfcdb_329": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-zstd-1_lfcdb_317": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-zstd-1_lfcdb_317": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-zstd-1_lfcdb_317": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-zstd-1_lfcdb_317": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-1_lfcdw_319": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-1_lfcdw_319": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-1_lfcdw_319": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-1_lfcdw_319": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-2_lfcdw_332": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-2_lfcdw_332": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-2_lfcdw_332": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-2_lfcdw_332": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-sm-1_lfcdw_320": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-sm-1_lfcdw_320": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-sm-1_lfcdw_320": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-sm-1_lfcdw_320": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdw_333": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-sm-2_lfcdw_333": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-sm-2_lfcdw_333": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-sm-2_lfcdw_333": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-zstd-1_lfcdw_321": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-zstd-1_lfcdw_321": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-zstd-1_lfcdw_321": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-zstd-1_lfcdw_321": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334": "{'out_file': None}",
      "id_string_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322": "{'out_filename': None}",
      "nii_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322": "{'out_file': None}",
      "json_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322": "{'json_file': None}",
      "sinker_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322": "{'out_file': None}",
      "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335": "{'out_filename': None}",
      "nii_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335": "{'out_file': None}",
      "json_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335": "{'json_file': None}",
      "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335": "{'out_file': None}"
    },
    "result": null,
    "nodes": [
      {
        "name": "func_ingress_sub-PA001_ses-V1W1",
        "type": "workflow",
        "inputs": {
          "inputnode": "{'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0', 'scan': '[Undefined]', 'subject': 'sub-PA001'}",
          "check_func_scan": "{'func_scan_dct': {'REST_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-REST_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'REST1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'REST1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916360926187292409.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'REST'\", 'TotalReadoutTime': 0.0478349}}, 'facesmatching_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-facesmatching_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'faces_matching'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'faces_matching'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.201710291618139195668993.0.0.0'\", 'SliceTiming': [0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'facesmatching'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916255274423358135.0.0.0'\", 'SliceTiming': [0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-2': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-2_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke2'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke2'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916304963921125272.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}}, 'function_str': 'CPAC.utils.datasource.check_func_scan'}",
          "selectrest": "{'function_str': 'CPAC.utils.datasource.get_rest', 'resource': 'scan', 'rest_dict': {'REST_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-REST_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'REST1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'REST1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916360926187292409.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'REST'\", 'TotalReadoutTime': 0.0478349}}, 'facesmatching_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-facesmatching_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'faces_matching'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'faces_matching'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.201710291618139195668993.0.0.0'\", 'SliceTiming': [0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'facesmatching'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916255274423358135.0.0.0'\", 'SliceTiming': [0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-2': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-2_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke2'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke2'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916304963921125272.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}}}",
          "check_for_s3": "{'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'func'}",
          "outputspec": "{'magnitude': '[Undefined]', 'phase_diff': '[Undefined]'}",
          "select_scan_params": "{'function_str': 'CPAC.utils.datasource.get_rest', 'resource': 'scan_parameters', 'rest_dict': {'REST_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-REST_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'REST1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'REST1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916360926187292409.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'REST'\", 'TotalReadoutTime': 0.0478349}}, 'facesmatching_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-facesmatching_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'faces_matching'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'faces_matching'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.201710291618139195668993.0.0.0'\", 'SliceTiming': [0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'facesmatching'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916255274423358135.0.0.0'\", 'SliceTiming': [0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-2': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-2_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke2'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke2'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916304963921125272.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}}}",
          "s3_scan_params": "{'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': '[Undefined]'}"
        },
        "outputs": {
          "inputnode": "{'creds_path': None, 'dl_dir': None, 'scan': None, 'subject': None}",
          "check_func_scan": "{}",
          "selectrest": "{'file_path': None}",
          "check_for_s3": "{'local_path': None}",
          "outputspec": "{'magnitude': None, 'phase_diff': None, 'rest': None, 'scan': None, 'scan_params': None, 'subject': None}",
          "select_scan_params": "{'file_path': None}",
          "s3_scan_params": "{'local_path': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputnode",
            "type": "node",
            "inputs": {
              "subject": "sub-PA001",
              "scan": "[Undefined]",
              "creds_path": "None",
              "dl_dir": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0"
            },
            "outputs": {
              "subject": "[Undefined]",
              "scan": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_func_scan",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_func_scan",
              "func_scan_dct": "{'REST_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-REST_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'REST1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'REST1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916360926187292409.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'REST'\", 'TotalReadoutTime': 0.0478349}}, 'facesmatching_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-facesmatching_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'faces_matching'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'faces_matching'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.201710291618139195668993.0.0.0'\", 'SliceTiming': [0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'facesmatching'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916255274423358135.0.0.0'\", 'SliceTiming': [0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-2': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-2_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke2'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke2'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916304963921125272.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}}",
              "scan": "[Undefined]"
            },
            "outputs": {},
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "selectrest",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.get_rest",
              "scan": "[Undefined]",
              "rest_dict": "{'REST_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-REST_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'REST1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'REST1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916360926187292409.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'REST'\", 'TotalReadoutTime': 0.0478349}}, 'facesmatching_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-facesmatching_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'faces_matching'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'faces_matching'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.201710291618139195668993.0.0.0'\", 'SliceTiming': [0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'facesmatching'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916255274423358135.0.0.0'\", 'SliceTiming': [0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-2': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-2_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke2'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke2'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916304963921125272.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}}",
              "resource": "scan"
            },
            "outputs": {
              "file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_for_s3",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "func"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "subject": "[Undefined]",
              "rest": "[Undefined]",
              "scan": "[Undefined]",
              "scan_params": "[Undefined]",
              "phase_diff": "[Undefined]",
              "magnitude": "[Undefined]"
            },
            "outputs": {
              "subject": "[Undefined]",
              "rest": "[Undefined]",
              "scan": "[Undefined]",
              "scan_params": "[Undefined]",
              "phase_diff": "[Undefined]",
              "magnitude": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_scan_params",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.get_rest",
              "scan": "[Undefined]",
              "rest_dict": "{'REST_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-REST_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'REST1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'REST1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916360926187292409.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'REST'\", 'TotalReadoutTime': 0.0478349}}, 'facesmatching_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-facesmatching_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'faces_matching'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'faces_matching'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.201710291618139195668993.0.0.0'\", 'SliceTiming': [0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355, 0, 0.425, 0.0725, 0.4975, 0.1425, 0.5675, 0.2125, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'facesmatching'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-1': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-1_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke1'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke1'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916255274423358135.0.0.0'\", 'SliceTiming': [0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355, 0, 0.4275, 0.0725, 0.4975, 0.1425, 0.5675, 0.215, 0.64, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}, 'poke_run-2': {'scan': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/func/sub-PA001_ses-V1W1_task-poke_run-2_bold.nii.gz', 'scan_parameters': {'AcquisitionDateTime': \"b'deleted_by_bidsonym'\", 'AcquisitionMatrixPE': 92, 'AcquisitionNumber': 1, 'AcquisitionTime': \"b'deleted_by_bidsonym'\", 'BandwidthPerPixelPhaseEncode': 20.678, 'BaseResolution': 90, 'BodyPartExamined': \"b'BRAIN'\", 'ConsistencyInfo': \"b'N4_VE11C_LATEST_20160120'\", 'ConversionSoftware': \"b'dcm2niix'\", 'ConversionSoftwareVersion': \"b'v1.0.20170923 (OpenJPEG build) GCC4.8.4'\", 'DerivedVendorReportedEchoSpacing': 0.000525658, 'DeviceSerialNumber': \"b'166010'\", 'EchoTime': 0.03, 'EchoTrainLength': 93, 'EffectiveEchoSpacing': 0.000525658, 'FlipAngle': 55, 'ImageComments': \"b'Unaliased_MB6_PE3_LB'\", 'ImageType': ['ORIGINAL', 'PRIMARY', 'M', 'MB', 'ND', 'MOSAIC'], 'InstitutionAddress': \"b'deleted_by_bidsonym'\", 'InstitutionName': \"b'deleted_by_bidsonym'\", 'MagneticFieldStrength': 3, 'Manufacturer': \"b'Siemens'\", 'ManufacturersModelName': \"b'Prisma'\", 'Modality': \"b'MR'\", 'MultibandAccelerationFactor': 6, 'PartialFourier': 1, 'PercentPhaseFOV': 102.222, 'PhaseEncodingDirection': \"b'j'\", 'PhaseEncodingSteps': 93, 'PhaseResolution': 1, 'ProcedureStepDescription': \"b'Tottenham_Child'\", 'ProtocolName': \"b'poke2'\", 'PulseSequenceDetails': \"b'%CustomerSeq%_cmrr_mbep2d_bold'\", 'ReceiveCoilActiveElements': \"b'HC1-7;NC1'\", 'ReceiveCoilName': \"b'HeadNeck_64'\", 'ReconMatrixPE': 92, 'RepetitionTime': 0.8, 'ScanOptions': \"b'FS'\", 'ScanningSequence': \"b'EP'\", 'SequenceName': \"b'epfid2d1_92'\", 'SequenceVariant': \"b'SK_SS_OSP'\", 'SeriesDescription': \"b'poke2'\", 'SeriesInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.2017102916304963921125272.0.0.0'\", 'SliceTiming': [0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355, 0, 0.425, 0.07, 0.4975, 0.1425, 0.5675, 0.2125, 0.6375, 0.285, 0.71, 0.355], 'SoftwareVersions': \"b'syngo_MR_E11'\", 'StationName': \"b'AWP166010'\", 'StudyID': \"b'1'\", 'StudyInstanceUID': \"b'1.3.12.2.1107.5.2.43.166010.30000017102720120228100000004'\", 'TaskName': \"b'poke'\", 'TotalReadoutTime': 0.0478349}}}",
              "resource": "scan_parameters"
            },
            "outputs": {
              "file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "s3_scan_params",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "[Undefined]"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputnode",
            "target": "check_func_scan"
          },
          {
            "origin": "inputnode",
            "target": "selectrest"
          },
          {
            "origin": "inputnode",
            "target": "check_for_s3"
          },
          {
            "origin": "inputnode",
            "target": "outputspec"
          },
          {
            "origin": "inputnode",
            "target": "select_scan_params"
          },
          {
            "origin": "inputnode",
            "target": "s3_scan_params"
          },
          {
            "origin": "selectrest",
            "target": "check_for_s3"
          },
          {
            "origin": "check_for_s3",
            "target": "outputspec"
          },
          {
            "origin": "select_scan_params",
            "target": "s3_scan_params"
          },
          {
            "origin": "s3_scan_params",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "bold_scan_params_sub-PA001_ses-V1W1",
        "type": "node",
        "inputs": {
          "function_str": "@Function.sig_imports(\n    [\n        \"import json\",\n        \"import os\",\n        \"from typing import Literal, Optional\",\n        \"from CPAC.utils.utils import ScanParameters, PE_DIRECTION, VALID_PATTERNS\",\n    ]\n)\ndef get_scan_params(\n    subject_id: str,\n    scan: str,\n    pipeconfig_start_indx: Optional[int | str],\n    pipeconfig_stop_indx: Optional[int | str],\n    data_config_scan_params: Optional[dict | str] = None,\n) -> tuple[\n    Optional[str],\n    Optional[str],\n    Optional[int],\n    Optional[int],\n    Optional[int],\n    Optional[int],\n    PE_DIRECTION,\n    Optional[float],\n]:\n    \"\"\"Extract slice timing correction parameters and scan parameters.\n\n    Parameters\n    ----------\n    subject_id\n        subject id\n    scan\n        scan id\n    pipeconfig_start_indx\n        starting volume index as provided in the pipeline config yaml file\n    pipeconfig_stop_indx\n        ending volume index as provided in the pipeline config yaml file\n    data_config_scan_params\n        file path to scan parameter JSON file listed in data config yaml file or loaded\n        paramater dictionary\n\n    Returns\n    -------\n    tr\n        TR value\n    tpattern\n        slice aquisition pattern string or file path\n    ref_slice\n        index of reference slice which is used to allign all other slices\n    first_tr\n        index of starting TR or starting volume index\n    last_tr\n        index of ending TR or ending volume index\n    pe_direction\n        https://bids-specification.readthedocs.io/en/stable/glossary.html#phaseencodingdirection-metadata\n    effective_echo_spacing\n        https://bids-specification.readthedocs.io/en/stable/glossary.html#effectiveechospacing-metadata\n    \"\"\"\n    unit: Literal[\"ms\", \"s\"] = \"s\"\n\n    if isinstance(pipeconfig_stop_indx, str):\n        if \"End\" in pipeconfig_stop_indx or \"end\" in pipeconfig_stop_indx:\n            pipeconfig_stop_indx = None\n    params = ScanParameters(data_config_scan_params, subject_id, scan)\n    # TODO: better handling of errant key values!!!\n    # TODO: use schema validator to deal with it\n    # get details from the configuration\n    tr: float | Literal[\"\"] = params.fetch_and_convert(\n        [\"RepetitionTime\", \"TR\"], float, \"\"\n    )\n    template: Optional[str] = params.fetch_and_convert([\"Template\", \"template\"], str)\n    pattern: Optional[str] = params.fetch_and_convert(\n        [\"acquisition\", \"SliceTiming\", \"SliceAcquisitionOrder\"],\n        str,\n        None,\n    )\n    ref_slice: Optional[int | str] = params.fetch_and_convert([\"reference\"], int, None)\n    first_tr: Optional[int | str] = params.fetch_and_convert(\n        [\"first_TR\"], int, pipeconfig_start_indx, False\n    )\n    last_tr: Optional[int | str] = params.fetch_and_convert(\n        [\"last_TR\"], int, pipeconfig_stop_indx, False\n    )\n    pe_direction: PE_DIRECTION = params.fetch_and_convert(\n        [\"PhaseEncodingDirection\"], str, \"\"\n    )\n    effective_echo_spacing: Optional[float] = params.fetch_and_convert(\n        [\"EffectiveEchoSpacing\"], float\n    )\n\n    \"\"\"\n    if not pattern:\n        if pipeconfig_tpattern:\n            if \"Use NIFTI Header\" in pipeconfig_tpattern:\n                pattern = ''\n            else:\n                pattern = pipeconfig_tpattern\n    \"\"\"\n\n    # pattern can be one of a few keywords, a filename, or blank which\n    # indicates that the images header information should be used\n    tpattern_file = None\n\n    if pattern and pattern != \"\" and pattern not in VALID_PATTERNS:\n        if isinstance(pattern, list) or (\n            \"[\" in pattern and \"]\" in pattern and \",\" in pattern\n        ):\n            # if we got the slice timing as a list, from a BIDS-format scan\n            # parameters JSON file\n\n            if not isinstance(pattern, list):\n                pattern = pattern.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\")\n\n            slice_timings = [float(x) for x in pattern]\n\n            # write out a tpattern file for AFNI 3dTShift\n            tpattern_file = os.path.join(os.getcwd(), \"tpattern.txt\")\n            try:\n                with open(tpattern_file, \"wt\") as f:\n                    for time in slice_timings:\n                        f.write(f\"{time}\\n\".replace(\" \", \"\"))\n            except (OSError, TypeError) as e:\n                err = (\n                    \"\\n[!] Could not write the slice timing file meant as \"\n                    \"an input for AFNI 3dTshift (slice timing correction):\"\n                    f\"\\n{tpattern_file}\\n\\n\"\n                )\n                raise OSError(err) from e\n\n        elif \".txt\" in pattern and not os.path.exists(pattern):\n            # if the user provided an acquisition pattern text file for\n            # 3dTshift\n            msg = (\n                f\"Invalid Pattern file path {pattern}, Please provide \"\n                \"the correct path\"\n            )\n            raise Exception(msg)\n        elif \".txt\" in pattern:\n            with open(pattern, \"r\") as f:\n                lines = f.readlines()\n            if len(lines) < 2:  # noqa: PLR2004\n                msg = (\n                    \"Invalid slice timing file format. The file should contain only one\"\n                    \" value per row. Use new line char as delimiter\"\n                )\n                raise Exception(msg)\n            tpattern_file = pattern\n            slice_timings = [float(l.rstrip(\"\\r\\n\")) for l in lines]  # noqa: E741\n        else:\n            # this only happens if there is a non-path string set in the data\n            # config dictionary for acquisition pattern (like \"alt+z\"), except\n            # the pattern is not listed in that list\n            err = (\n                \"\\n[!] The slice timing acquisition pattern provided is \"\n                \"not supported by AFNI 3dTshift:\\n\"\n                f\"{pattern!s}\\n\"\n            )\n            raise Exception(err)\n\n        pattern = tpattern_file\n\n        slice_timings.sort()\n        max_slice_offset = slice_timings[-1]\n\n        # checking if the unit of tr and slice timing match or not\n        # if slice timing in ms convert tr to ms as well\n        if tr and max_slice_offset > tr:\n            WFLOGGER.warning(\n                \"TR is in seconds and slice timings are in \"\n                \"milliseconds. Converting TR into milliseconds\"\n            )\n            tr = tr * 1000\n            WFLOGGER.info(\"New tr value %s ms\", tr)\n            unit = \"ms\"\n\n    elif tr and tr > 10:  # noqa: PLR2004\n        # check to see, if TR is in milliseconds, convert it into seconds\n        WFLOGGER.warning(\"TR is in milliseconds, Converting it into seconds\")\n        tr = tr / 1000.0\n        WFLOGGER.info(\"New TR value %s s\", tr)\n        unit = \"s\"\n\n    # swap back in\n    tr = f\"{tr!s}{unit}\" if tr else \"\"\n    tpattern = pattern\n    start_indx = first_tr\n    stop_indx = last_tr\n\n    return (\n        tr if tr else None,\n        tpattern if tpattern else None,\n        template if template else None,\n        ref_slice,\n        start_indx,\n        stop_indx,\n        pe_direction,\n        effective_echo_spacing,\n    )\n",
          "data_config_scan_params": "[Undefined]",
          "subject_id": "sub-PA001",
          "scan": "[Undefined]",
          "pipeconfig_tr": "[Undefined]",
          "pipeconfig_tpattern": "[Undefined]",
          "pipeconfig_start_indx": "2",
          "pipeconfig_stop_indx": "None"
        },
        "outputs": {
          "tr": "[Undefined]",
          "tpattern": "[Undefined]",
          "template": "[Undefined]",
          "ref_slice": "[Undefined]",
          "start_indx": "[Undefined]",
          "stop_indx": "[Undefined]",
          "pe_direction": "[Undefined]",
          "effective_echo_spacing": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "anat_T1w_gather_sub-PA001_ses-V1W1",
        "type": "workflow",
        "inputs": {
          "inputnode": "{'anat': '/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/anat/sub-PA001_ses-V1W1_acq-MPR_rec-Norm_T1w.nii.gz', 'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0', 'img_type': 'anat', 'subject': 'sub-PA001'}",
          "check_for_s3": "{'function_str': 'CPAC.utils.datasource.check_for_s3'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputnode": "{'anat': None, 'creds_path': None, 'dl_dir': None, 'img_type': None, 'subject': None}",
          "check_for_s3": "{'local_path': None}",
          "outputspec": "{'anat': None, 'subject': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputnode",
            "type": "node",
            "inputs": {
              "subject": "sub-PA001",
              "anat": "/ocean/projects/med220004p/jclucas/data/vannucci/bids_raw/sub-PA001/ses-V1W1/anat/sub-PA001_ses-V1W1_acq-MPR_rec-Norm_T1w.nii.gz",
              "creds_path": "None",
              "dl_dir": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0",
              "img_type": "anat"
            },
            "outputs": {
              "subject": "[Undefined]",
              "anat": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_for_s3",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "[Undefined]"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "subject": "[Undefined]",
              "anat": "[Undefined]"
            },
            "outputs": {
              "subject": "[Undefined]",
              "anat": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputnode",
            "target": "check_for_s3"
          },
          {
            "origin": "inputnode",
            "target": "outputspec"
          },
          {
            "origin": "check_for_s3",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "anat_deoblique_0",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "deoblique": "True",
          "xorigin": "[Undefined]",
          "yorigin": "[Undefined]",
          "zorigin": "[Undefined]",
          "duporigin_file": "[Undefined]",
          "xdel": "[Undefined]",
          "ydel": "[Undefined]",
          "zdel": "[Undefined]",
          "xyzscale": "[Undefined]",
          "space": "[Undefined]",
          "atrcopy": "[Undefined]",
          "atrstring": "[Undefined]",
          "atrfloat": "[Undefined]",
          "atrint": "[Undefined]",
          "saveatr": "[Undefined]",
          "nosaveatr": "[Undefined]",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "anat_reorient_0",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "orientation": "RPI",
          "resample_mode": "[Undefined]",
          "voxel_size": "[Undefined]",
          "master": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "anat_skullstrip_ants",
        "type": "workflow",
        "inputs": {
          "inputnode": "{'in_files': '[Undefined]', 'in_mask': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}",
          "truncate_images_": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '0.01 0.999 256', 'operation': 'TruncateImageIntensity', 'output_image': '[Undefined]'}",
          "copy_xform": "{}",
          "inu_n4_final_": "{'args': '[Undefined]', 'bias_image': '[Undefined]', 'bspline_fitting_distance': 200.0, 'bspline_order': '[Undefined]', 'convergence_threshold': 1e-07, 'copy_header': True, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'histogram_sharpening': '[Undefined]', 'mask_image': '[Undefined]', 'n_iterations': [50, 50, 50, 50, 50], 'num_threads': 1, 'output_image': '[Undefined]', 'rescale_intensities': False, 'save_bias': True, 'shrink_factor': 4}",
          "init_aff": "{'args': '[Undefined]', 'convergence': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211dfa74c0>', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'metric': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e245af0>', 'moving_image_mask': '[Undefined]', 'num_threads': 1, 'output_transform': 'initialization.mat', 'principal_axes': False, 'search_factor': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e245cb0>', 'search_grid': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebc30>', 'transform': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebd10>', 'verbose': True}",
          "norm": "{'args': '[Undefined]', 'collapse_output_transforms': True, 'convergence_threshold': [1e-08, 1e-08, 1e-09], 'convergence_window_size': [10, 10, 15], 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'fixed_image_mask': '[Undefined]', 'float': True, 'initial_moving_transform_com': '[Undefined]', 'initialize_transforms_per_stage': False, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_initial_moving_transform': '[Undefined]', 'metric': ['MI', 'MI', ['CC', 'CC']], 'metric_item_trait': '[Undefined]', 'metric_stage_trait': '[Undefined]', 'metric_weight': [1.0, 1.0, [0.5, 0.5]], 'metric_weight_item_trait': 1.0, 'metric_weight_stage_trait': '[Undefined]', 'moving_image_mask': '[Undefined]', 'moving_image_masks': '[Undefined]', 'num_threads': 1, 'number_of_iterations': [[1000, 500, 250, 100], [1000, 500, 250, 100], [50, 10, 0]], 'output_inverse_warped_image': '[Undefined]', 'output_transform_prefix': 'anat_to_template', 'output_warped_image': True, 'radius_bins_item_trait': 5, 'radius_bins_stage_trait': '[Undefined]', 'radius_or_number_of_bins': [32, 32, [4, 4]], 'random_seed': '[Undefined]', 'restore_state': '[Undefined]', 'restrict_deformation': '[Undefined]', 'sampling_percentage': [0.25, 0.25, [1.0, 1.0]], 'sampling_percentage_item_trait': '[Undefined]', 'sampling_percentage_stage_trait': '[Undefined]', 'sampling_strategy': ['Regular', 'Regular', ['None', 'None']], 'sampling_strategy_item_trait': '[Undefined]', 'sampling_strategy_stage_trait': '[Undefined]', 'save_state': '[Undefined]', 'shrink_factors': [[8, 4, 2, 1], [8, 4, 2, 1], [4, 2, 1]], 'sigma_units': ['vox', 'vox', 'vox'], 'smoothing_sigmas': [[4.0, 2.0, 1.0, 0.0], [4.0, 2.0, 1.0, 0.0], [2.0, 1.0, 0.0]], 'transform_parameters': ['<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebd80>', '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebdf0>', '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebf40>'], 'transforms': ['Rigid', 'Affine', 'SyN'], 'use_estimate_learning_rate_once': '[Undefined]', 'use_histogram_matching': True, 'verbose': True, 'winsorize_lower_quantile': 0.025, 'winsorize_upper_quantile': 0.975, 'write_composite_transform': False}",
          "map_brainmask": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': True, 'input_image': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'input_image_type': '[Undefined]', 'interpolation': 'Gaussian', 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
          "inu_n4_": "{'args': '[Undefined]', 'bias_image': '[Undefined]', 'bspline_fitting_distance': 200.0, 'bspline_order': '[Undefined]', 'convergence_threshold': 1e-07, 'copy_header': True, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'histogram_sharpening': '[Undefined]', 'mask_image': '[Undefined]', 'n_iterations': [50, 50, 50, 50], 'num_threads': 1, 'output_image': '[Undefined]', 'rescale_intensities': False, 'save_bias': False, 'shrink_factor': 4, 'weight_image': '[Undefined]'}",
          "res_target": "{'addvox': '[Undefined]', 'apply_smoothing': True, 'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'nn_interp': '[Undefined]', 'num_threads': 1, 'out_spacing': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebbc0>', 'output_image': '[Undefined]'}",
          "res_tmpl": "{'addvox': '[Undefined]', 'apply_smoothing': True, 'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'input_image': '/ants_template/oasis/T_template0.nii.gz', 'nn_interp': '[Undefined]', 'num_threads': 1, 'out_spacing': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebb50>', 'output_image': '[Undefined]'}",
          "thr_brainmask": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'input_mask': '[Undefined]', 'inside_value': 1.0, 'mode': '[Undefined]', 'num_threads': 1, 'num_thresholds': '[Undefined]', 'output_image': '[Undefined]', 'outside_value': 0.0, 'th_high': 1.0, 'th_low': 0.5}",
          "dil_brainmask": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'MD', 'output_image': '[Undefined]'}",
          "get_brainmask": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}",
          "apply_mask_": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
          "outputnode": "{}",
          "lap_target": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '1.5 1', 'operation': 'Laplacian', 'output_image': '[Undefined]'}",
          "lap_tmpl": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op1': '/ants_template/oasis/T_template0.nii.gz', 'op2': '1.5 1', 'operation': 'Laplacian', 'output_image': '[Undefined]'}",
          "mrg_tmpl": "{'axis': 'vstack', 'in1': '/ants_template/oasis/T_template0.nii.gz', 'no_flatten': False, 'ravel_inputs': False}",
          "mrg_target": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "atropos_wf": "{'inputnode': {'in_files': '[Undefined]', 'in_mask': '[Undefined]', 'in_mask_dilated': '[Undefined]'}, 'copy_xform': {}, '03_pad_mask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '01_atropos': {'args': '[Undefined]', 'convergence_threshold': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'icm_use_synchronous_update': '[Undefined]', 'initialization': 'KMeans', 'kmeans_init_centers': '[Undefined]', 'likelihood_model': 'Gaussian', 'maximum_number_of_icm_terations': '[Undefined]', 'mrf_radius': [1, 1, 1], 'mrf_smoothing_factor': 0.1, 'n_iterations': 3, 'num_threads': 1, 'number_of_tissue_classes': 3, 'out_classified_image_name': '[Undefined]', 'output_posteriors_name_template': 'POSTERIOR_%02d.nii.gz', 'posterior_formulation': '[Undefined]', 'prior_image': '[Undefined]', 'prior_probability_threshold': '[Undefined]', 'prior_weighting': '[Undefined]', 'save_posteriors': '[Undefined]', 'use_mixture_model_proportions': '[Undefined]', 'use_random_seed': False}, 'msk_conform': {'function_str': 'def _conform_mask(in_mask, in_reference):\\n    \"\"\"Ensure the mask headers make sense and match those of the T1w.\"\"\"\\n    from pathlib import Path\\n\\n    import nibabel as nib\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    ref = nib.load(in_reference)\\n    nii = nib.load(in_mask)\\n    hdr = nii.header.copy()\\n    hdr.set_data_dtype(\"int16\")\\n    hdr.set_slope_inter(1, 0)\\n\\n    qform, qcode = ref.header.get_qform(coded=True)\\n    if qcode is not None:\\n        hdr.set_qform(qform, int(qcode))\\n\\n    sform, scode = ref.header.get_sform(coded=True)\\n    if scode is not None:\\n        hdr.set_sform(sform, int(scode))\\n\\n    if \"_maths\" in in_mask:  # Cut the name at first _maths occurrence\\n        ext = \"\".join(Path(in_mask).suffixes)\\n        basename = Path(in_mask).name\\n        in_mask = basename.split(\"_maths\")[0] + ext\\n\\n    out_file = fname_presuffix(in_mask, suffix=\"_mask\", newpath=str(Path()))\\n    nii.__class__(nii.get_fdata().astype(\"int16\"), ref.affine, hdr).to_filename(\\n        out_file\\n    )\\n    return out_file\\n'}, '02_pad_segm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '04_sel_labels': {'function_str': 'def _select_labels(in_segm, labels):\\n    from os import getcwd\\n\\n    import numpy as np\\n    import nibabel as nib\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    out_files = []\\n\\n    cwd = getcwd()\\n    nii = nib.load(in_segm)\\n    for l in labels:  # noqa: E741\\n        data = (nii.get_fdata() == l).astype(np.uint8)\\n        newnii = nii.__class__(data, nii.affine, nii.header)\\n        newnii.set_data_dtype(\"uint8\")\\n        out_file = fname_presuffix(in_segm, suffix=\"_class-%02d\" % l, newpath=cwd)\\n        newnii.to_filename(out_file)\\n        out_files.append(out_file)\\n    return out_files\\n', 'labels': [3, 2, 1]}, '05_get_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, '06_get_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, '07_fill_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'FillHoles', 'output_image': '[Undefined]'}, '08_mult_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '08_mult_gm.nii.gz'}, '09_relabel_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '09_relabel_wm.nii.gz', 'second_input': 3.0}, '10_me_csf': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'ME', 'output_image': '[Undefined]'}, '11_add_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '12_relabel_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '12_relabel_gm.nii.gz', 'second_input': 2.0}, '13_add_gm_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '14_sel_labels2': {'function_str': 'def _select_labels(in_segm, labels):\\n    from os import getcwd\\n\\n    import numpy as np\\n    import nibabel as nib\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    out_files = []\\n\\n    cwd = getcwd()\\n    nii = nib.load(in_segm)\\n    for l in labels:  # noqa: E741\\n        data = (nii.get_fdata() == l).astype(np.uint8)\\n        newnii = nii.__class__(data, nii.affine, nii.header)\\n        newnii.set_data_dtype(\"uint8\")\\n        out_file = fname_presuffix(in_segm, suffix=\"_class-%02d\" % l, newpath=cwd)\\n        newnii.to_filename(out_file)\\n        out_files.append(out_file)\\n    return out_files\\n', 'labels': [2, 3]}, '15_add_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '16_me_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'ME', 'output_image': '[Undefined]'}, '17_comp_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, '18_md_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '4', 'operation': 'MD', 'output_image': '[Undefined]'}, '19_fill_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'FillHoles', 'output_image': '[Undefined]'}, '20_add_7_2': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '21_md_7_2': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '5', 'operation': 'MD', 'output_image': '[Undefined]'}, '22_me_7_2': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '5', 'operation': 'ME', 'output_image': '[Undefined]'}, '23_depad_mask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '24_depad_segm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '26_depad_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '25_depad_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '27_depad_csf': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, 'merge_tpms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'outputnode': {}}",
          "sel_wm": "{'index': [2]}"
        },
        "outputs": {
          "inputnode": "{'in_files': None, 'in_mask': None}",
          "truncate_images_": "{'output_image': None}",
          "copy_xform": "{'bias_corrected': None, 'bias_image': None, 'out_file': None, 'out_mask': None}",
          "inu_n4_final_": "{'output_image': None, 'bias_image': None}",
          "init_aff": "{'output_transform': None}",
          "norm": "{'composite_transform': None, 'elapsed_time': None, 'forward_invert_flags': None, 'forward_transforms': None, 'inverse_composite_transform': None, 'inverse_warped_image': None, 'metric_value': None, 'reverse_forward_invert_flags': None, 'reverse_forward_transforms': None, 'reverse_invert_flags': None, 'reverse_transforms': None, 'save_state': None, 'warped_image': None}",
          "map_brainmask": "{'output_image': None}",
          "inu_n4_": "{'output_image': None, 'bias_image': None}",
          "res_target": "{'output_image': None}",
          "res_tmpl": "{'output_image': None}",
          "thr_brainmask": "{'output_image': None}",
          "dil_brainmask": "{'output_image': None}",
          "get_brainmask": "{'output_image': None}",
          "apply_mask_": "{'out_file': None}",
          "outputnode": "{'bias_corrected': None, 'bias_image': None, 'out_file': None, 'out_mask': None, 'out_segm': None, 'out_tpms': None}",
          "lap_target": "{'output_image': None}",
          "lap_tmpl": "{'output_image': None}",
          "mrg_tmpl": "{'out': None}",
          "mrg_target": "{'out': None}",
          "atropos_wf": "{'inputnode': {'in_files': None, 'in_mask': None, 'in_mask_dilated': None}, 'copy_xform': {'out_mask': None, 'out_segm': None, 'out_tpms': None}, '03_pad_mask': {'output_image': None}, '01_atropos': {'classified_image': None, 'posteriors': None}, 'msk_conform': {'out': None}, '02_pad_segm': {'output_image': None}, '04_sel_labels': {'out_csf': None, 'out_gm': None, 'out_wm': None}, '05_get_wm': {'output_image': None}, '06_get_gm': {'output_image': None}, '07_fill_gm': {'output_image': None}, '08_mult_gm': {'output_product_image': None}, '09_relabel_wm': {'output_product_image': None}, '10_me_csf': {'output_image': None}, '11_add_gm': {'output_image': None}, '12_relabel_gm': {'output_product_image': None}, '13_add_gm_wm': {'output_image': None}, '14_sel_labels2': {'out_gm': None, 'out_wm': None}, '15_add_7': {'output_image': None}, '16_me_7': {'output_image': None}, '17_comp_7': {'output_image': None}, '18_md_7': {'output_image': None}, '19_fill_7': {'output_image': None}, '20_add_7_2': {'output_image': None}, '21_md_7_2': {'output_image': None}, '22_me_7_2': {'output_image': None}, '23_depad_mask': {'output_image': None}, '24_depad_segm': {'output_image': None}, '26_depad_wm': {'output_image': None}, '25_depad_gm': {'output_image': None}, '27_depad_csf': {'output_image': None}, 'merge_tpms': {'out': None}, 'outputnode': {'out_mask': None, 'out_segm': None, 'out_tpms': None}}",
          "sel_wm": "{'out': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputnode",
            "type": "node",
            "inputs": {
              "in_files": "[Undefined]",
              "in_mask": "/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz"
            },
            "outputs": {
              "in_files": "[Undefined]",
              "in_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "truncate_images_",
            "type": "node",
            "inputs": {
              "args": "[Undefined]",
              "dimension": "3",
              "environ": "{'NSLOTS': '1'}",
              "num_threads": "1",
              "op1": "[Undefined]",
              "op2": "0.01 0.999 256",
              "operation": "TruncateImageIntensity",
              "output_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "copy_xform",
            "type": "node",
            "inputs": {
              "hdr_file": "[Undefined]",
              "out_file": "[Undefined]",
              "out_mask": "[Undefined]",
              "bias_corrected": "[Undefined]",
              "bias_image": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_mask": "[Undefined]",
              "bias_corrected": "[Undefined]",
              "bias_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inu_n4_final_",
            "type": "node",
            "inputs": {
              "args": "[Undefined]",
              "bias_image": "[Undefined]",
              "bspline_fitting_distance": "200.0",
              "bspline_order": "[Undefined]",
              "convergence_threshold": "1e-07",
              "copy_header": "True",
              "dimension": "3",
              "environ": "{'NSLOTS': '1'}",
              "histogram_sharpening": "[Undefined]",
              "input_image": "[Undefined]",
              "mask_image": "[Undefined]",
              "n_iterations": "[50, 50, 50, 50, 50]",
              "num_threads": "1",
              "output_image": "[Undefined]",
              "rescale_intensities": "False",
              "save_bias": "True",
              "shrink_factor": "4",
              "weight_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]",
              "bias_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "init_aff",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "verbose": "True",
              "fixed_image": "[Undefined]",
              "moving_image": "[Undefined]",
              "fixed_image_mask": "[Undefined]",
              "moving_image_mask": "[Undefined]",
              "metric": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211dfa74c0>",
              "transform": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e245cb0>",
              "principal_axes": "False",
              "search_factor": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e245af0>",
              "search_grid": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebb50>",
              "convergence": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211ddebbc0>",
              "output_transform": "initialization.mat",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_transform": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "norm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "fixed_image": "[Undefined]",
              "fixed_image_mask": "[Undefined]",
              "fixed_image_masks": "[Undefined]",
              "moving_image": "[Undefined]",
              "moving_image_mask": "[Undefined]",
              "moving_image_masks": "[Undefined]",
              "save_state": "[Undefined]",
              "restore_state": "[Undefined]",
              "initial_moving_transform": "[Undefined]",
              "invert_initial_moving_transform": "[Undefined]",
              "initial_moving_transform_com": "[Undefined]",
              "metric_item_trait": "[Undefined]",
              "metric_stage_trait": "[Undefined]",
              "metric": "['MI', 'MI', ['CC', 'CC']]",
              "metric_weight_item_trait": "1.0",
              "metric_weight_stage_trait": "[Undefined]",
              "metric_weight": "[1.0, 1.0, [0.5, 0.5]]",
              "radius_bins_item_trait": "5",
              "radius_bins_stage_trait": "[Undefined]",
              "radius_or_number_of_bins": "[32, 32, [4, 4]]",
              "sampling_strategy_item_trait": "[Undefined]",
              "sampling_strategy_stage_trait": "[Undefined]",
              "sampling_strategy": "['Regular', 'Regular', ['None', 'None']]",
              "sampling_percentage_item_trait": "[Undefined]",
              "sampling_percentage_stage_trait": "[Undefined]",
              "sampling_percentage": "[0.25, 0.25, [1.0, 1.0]]",
              "use_estimate_learning_rate_once": "[Undefined]",
              "use_histogram_matching": "True",
              "interpolation": "LanczosWindowedSinc",
              "interpolation_parameters": "[Undefined]",
              "write_composite_transform": "False",
              "collapse_output_transforms": "True",
              "initialize_transforms_per_stage": "False",
              "float": "True",
              "transforms": "['Rigid', 'Affine', 'SyN']",
              "transform_parameters": "['<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e245af0>', '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e245cb0>', '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211dfa74c0>']",
              "restrict_deformation": "[Undefined]",
              "number_of_iterations": "[[1000, 500, 250, 100], [1000, 500, 250, 100], [50, 10, 0]]",
              "smoothing_sigmas": "[[4.0, 2.0, 1.0, 0.0], [4.0, 2.0, 1.0, 0.0], [2.0, 1.0, 0.0]]",
              "sigma_units": "['vox', 'vox', 'vox']",
              "shrink_factors": "[[8, 4, 2, 1], [8, 4, 2, 1], [4, 2, 1]]",
              "convergence_threshold": "[1e-08, 1e-08, 1e-09]",
              "convergence_window_size": "[10, 10, 15]",
              "output_transform_prefix": "anat_to_template",
              "output_warped_image": "True",
              "output_inverse_warped_image": "[Undefined]",
              "winsorize_upper_quantile": "0.975",
              "winsorize_lower_quantile": "0.025",
              "random_seed": "[Undefined]",
              "verbose": "True",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "forward_transforms": "[Undefined]",
              "reverse_forward_transforms": "[Undefined]",
              "reverse_transforms": "[Undefined]",
              "forward_invert_flags": "[Undefined]",
              "reverse_forward_invert_flags": "[Undefined]",
              "reverse_invert_flags": "[Undefined]",
              "composite_transform": "[Undefined]",
              "inverse_composite_transform": "[Undefined]",
              "warped_image": "[Undefined]",
              "inverse_warped_image": "[Undefined]",
              "save_state": "[Undefined]",
              "metric_value": "[Undefined]",
              "elapsed_time": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "map_brainmask",
            "type": "node",
            "inputs": {
              "dimension": "[Undefined]",
              "input_image_type": "[Undefined]",
              "input_image": "/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz",
              "output_image": "[Undefined]",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Gaussian",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "[Undefined]",
              "float": "True",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inu_n4_",
            "type": "node",
            "inputs": {
              "args": "[Undefined]",
              "bias_image": "[Undefined]",
              "bspline_fitting_distance": "200.0",
              "bspline_order": "[Undefined]",
              "convergence_threshold": "1e-07",
              "copy_header": "True",
              "dimension": "3",
              "environ": "{'NSLOTS': '1'}",
              "histogram_sharpening": "[Undefined]",
              "input_image": "[Undefined]",
              "mask_image": "[Undefined]",
              "n_iterations": "[50, 50, 50, 50]",
              "num_threads": "1",
              "output_image": "[Undefined]",
              "rescale_intensities": "False",
              "save_bias": "False",
              "shrink_factor": "4",
              "weight_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]",
              "bias_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "res_target",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "out_spacing": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e245cb0>",
              "apply_smoothing": "True",
              "addvox": "[Undefined]",
              "nn_interp": "[Undefined]",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "res_tmpl",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image": "/ants_template/oasis/T_template0.nii.gz",
              "output_image": "[Undefined]",
              "out_spacing": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e245cb0>",
              "apply_smoothing": "True",
              "addvox": "[Undefined]",
              "nn_interp": "[Undefined]",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "thr_brainmask",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "mode": "[Undefined]",
              "num_thresholds": "[Undefined]",
              "input_mask": "[Undefined]",
              "th_low": "0.5",
              "th_high": "1.0",
              "inside_value": "1.0",
              "outside_value": "0.0",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "dil_brainmask",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "output_image": "[Undefined]",
              "operation": "MD",
              "op1": "[Undefined]",
              "op2": "2",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "get_brainmask",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "output_image": "[Undefined]",
              "operation": "GetLargestComponent",
              "op1": "[Undefined]",
              "op2": "[Undefined]",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "apply_mask_",
            "type": "node",
            "inputs": {
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}",
              "in_file": "[Undefined]",
              "internal_datatype": "[Undefined]",
              "mask_file": "[Undefined]",
              "nan2zeros": "[Undefined]",
              "out_file": "[Undefined]",
              "output_datatype": "[Undefined]",
              "output_type": "NIFTI_GZ"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputnode",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "out_mask": "[Undefined]",
              "bias_corrected": "[Undefined]",
              "bias_image": "[Undefined]",
              "out_segm": "[Undefined]",
              "out_tpms": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_mask": "[Undefined]",
              "bias_corrected": "[Undefined]",
              "bias_image": "[Undefined]",
              "out_segm": "[Undefined]",
              "out_tpms": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "lap_target",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "output_image": "[Undefined]",
              "operation": "Laplacian",
              "op1": "[Undefined]",
              "op2": "1.5 1",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "lap_tmpl",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "output_image": "[Undefined]",
              "operation": "Laplacian",
              "op1": "/ants_template/oasis/T_template0.nii.gz",
              "op2": "1.5 1",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "mrg_tmpl",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "/ants_template/oasis/T_template0.nii.gz",
              "in2": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "mrg_target",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "atropos_wf",
            "type": "workflow",
            "inputs": {
              "inputnode": "{'in_files': '[Undefined]', 'in_mask': '[Undefined]', 'in_mask_dilated': '[Undefined]'}",
              "copy_xform": "{}",
              "03_pad_mask": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "01_atropos": "{'args': '[Undefined]', 'convergence_threshold': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'icm_use_synchronous_update': '[Undefined]', 'initialization': 'KMeans', 'kmeans_init_centers': '[Undefined]', 'likelihood_model': 'Gaussian', 'maximum_number_of_icm_terations': '[Undefined]', 'mrf_radius': [1, 1, 1], 'mrf_smoothing_factor': 0.1, 'n_iterations': 3, 'num_threads': 1, 'number_of_tissue_classes': 3, 'out_classified_image_name': '[Undefined]', 'output_posteriors_name_template': 'POSTERIOR_%02d.nii.gz', 'posterior_formulation': '[Undefined]', 'prior_image': '[Undefined]', 'prior_probability_threshold': '[Undefined]', 'prior_weighting': '[Undefined]', 'save_posteriors': '[Undefined]', 'use_mixture_model_proportions': '[Undefined]', 'use_random_seed': False}",
              "msk_conform": "{'function_str': 'def _conform_mask(in_mask, in_reference):\\n    \"\"\"Ensure the mask headers make sense and match those of the T1w.\"\"\"\\n    from pathlib import Path\\n\\n    import nibabel as nib\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    ref = nib.load(in_reference)\\n    nii = nib.load(in_mask)\\n    hdr = nii.header.copy()\\n    hdr.set_data_dtype(\"int16\")\\n    hdr.set_slope_inter(1, 0)\\n\\n    qform, qcode = ref.header.get_qform(coded=True)\\n    if qcode is not None:\\n        hdr.set_qform(qform, int(qcode))\\n\\n    sform, scode = ref.header.get_sform(coded=True)\\n    if scode is not None:\\n        hdr.set_sform(sform, int(scode))\\n\\n    if \"_maths\" in in_mask:  # Cut the name at first _maths occurrence\\n        ext = \"\".join(Path(in_mask).suffixes)\\n        basename = Path(in_mask).name\\n        in_mask = basename.split(\"_maths\")[0] + ext\\n\\n    out_file = fname_presuffix(in_mask, suffix=\"_mask\", newpath=str(Path()))\\n    nii.__class__(nii.get_fdata().astype(\"int16\"), ref.affine, hdr).to_filename(\\n        out_file\\n    )\\n    return out_file\\n'}",
              "02_pad_segm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "04_sel_labels": "{'function_str': 'def _select_labels(in_segm, labels):\\n    from os import getcwd\\n\\n    import numpy as np\\n    import nibabel as nib\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    out_files = []\\n\\n    cwd = getcwd()\\n    nii = nib.load(in_segm)\\n    for l in labels:  # noqa: E741\\n        data = (nii.get_fdata() == l).astype(np.uint8)\\n        newnii = nii.__class__(data, nii.affine, nii.header)\\n        newnii.set_data_dtype(\"uint8\")\\n        out_file = fname_presuffix(in_segm, suffix=\"_class-%02d\" % l, newpath=cwd)\\n        newnii.to_filename(out_file)\\n        out_files.append(out_file)\\n    return out_files\\n', 'labels': [3, 2, 1]}",
              "05_get_wm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}",
              "06_get_gm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}",
              "07_fill_gm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'FillHoles', 'output_image': '[Undefined]'}",
              "08_mult_gm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '08_mult_gm.nii.gz'}",
              "09_relabel_wm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '09_relabel_wm.nii.gz', 'second_input': 3.0}",
              "10_me_csf": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'ME', 'output_image': '[Undefined]'}",
              "11_add_gm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}",
              "12_relabel_gm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '12_relabel_gm.nii.gz', 'second_input': 2.0}",
              "13_add_gm_wm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}",
              "14_sel_labels2": "{'function_str': 'def _select_labels(in_segm, labels):\\n    from os import getcwd\\n\\n    import numpy as np\\n    import nibabel as nib\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    out_files = []\\n\\n    cwd = getcwd()\\n    nii = nib.load(in_segm)\\n    for l in labels:  # noqa: E741\\n        data = (nii.get_fdata() == l).astype(np.uint8)\\n        newnii = nii.__class__(data, nii.affine, nii.header)\\n        newnii.set_data_dtype(\"uint8\")\\n        out_file = fname_presuffix(in_segm, suffix=\"_class-%02d\" % l, newpath=cwd)\\n        newnii.to_filename(out_file)\\n        out_files.append(out_file)\\n    return out_files\\n', 'labels': [2, 3]}",
              "15_add_7": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}",
              "16_me_7": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'ME', 'output_image': '[Undefined]'}",
              "17_comp_7": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}",
              "18_md_7": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '4', 'operation': 'MD', 'output_image': '[Undefined]'}",
              "19_fill_7": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'FillHoles', 'output_image': '[Undefined]'}",
              "20_add_7_2": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}",
              "21_md_7_2": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '5', 'operation': 'MD', 'output_image': '[Undefined]'}",
              "22_me_7_2": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '5', 'operation': 'ME', 'output_image': '[Undefined]'}",
              "23_depad_mask": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "24_depad_segm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "26_depad_wm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "25_depad_gm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "27_depad_csf": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "merge_tpms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
              "outputnode": "{}"
            },
            "outputs": {
              "inputnode": "{'in_files': None, 'in_mask': None, 'in_mask_dilated': None}",
              "copy_xform": "{'out_mask': None, 'out_segm': None, 'out_tpms': None}",
              "03_pad_mask": "{'output_image': None}",
              "01_atropos": "{'classified_image': None, 'posteriors': None}",
              "msk_conform": "{'out': None}",
              "02_pad_segm": "{'output_image': None}",
              "04_sel_labels": "{'out_csf': None, 'out_gm': None, 'out_wm': None}",
              "05_get_wm": "{'output_image': None}",
              "06_get_gm": "{'output_image': None}",
              "07_fill_gm": "{'output_image': None}",
              "08_mult_gm": "{'output_product_image': None}",
              "09_relabel_wm": "{'output_product_image': None}",
              "10_me_csf": "{'output_image': None}",
              "11_add_gm": "{'output_image': None}",
              "12_relabel_gm": "{'output_product_image': None}",
              "13_add_gm_wm": "{'output_image': None}",
              "14_sel_labels2": "{'out_gm': None, 'out_wm': None}",
              "15_add_7": "{'output_image': None}",
              "16_me_7": "{'output_image': None}",
              "17_comp_7": "{'output_image': None}",
              "18_md_7": "{'output_image': None}",
              "19_fill_7": "{'output_image': None}",
              "20_add_7_2": "{'output_image': None}",
              "21_md_7_2": "{'output_image': None}",
              "22_me_7_2": "{'output_image': None}",
              "23_depad_mask": "{'output_image': None}",
              "24_depad_segm": "{'output_image': None}",
              "26_depad_wm": "{'output_image': None}",
              "25_depad_gm": "{'output_image': None}",
              "27_depad_csf": "{'output_image': None}",
              "merge_tpms": "{'out': None}",
              "outputnode": "{'out_mask': None, 'out_segm': None, 'out_tpms': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputnode",
                "type": "node",
                "inputs": {
                  "in_files": "[Undefined]",
                  "in_mask": "[Undefined]",
                  "in_mask_dilated": "[Undefined]"
                },
                "outputs": {
                  "in_files": "[Undefined]",
                  "in_mask": "[Undefined]",
                  "in_mask_dilated": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "copy_xform",
                "type": "node",
                "inputs": {
                  "hdr_file": "[Undefined]",
                  "out_mask": "[Undefined]",
                  "out_segm": "[Undefined]",
                  "out_tpms": "[Undefined]"
                },
                "outputs": {
                  "out_mask": "[Undefined]",
                  "out_segm": "[Undefined]",
                  "out_tpms": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "03_pad_mask",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "01_atropos",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "intensity_images": "[Undefined]",
                  "mask_image": "[Undefined]",
                  "initialization": "KMeans",
                  "kmeans_init_centers": "[Undefined]",
                  "prior_image": "[Undefined]",
                  "number_of_tissue_classes": "3",
                  "prior_weighting": "[Undefined]",
                  "prior_probability_threshold": "[Undefined]",
                  "likelihood_model": "Gaussian",
                  "mrf_smoothing_factor": "0.1",
                  "mrf_radius": "[1, 1, 1]",
                  "icm_use_synchronous_update": "[Undefined]",
                  "maximum_number_of_icm_terations": "[Undefined]",
                  "n_iterations": "3",
                  "convergence_threshold": "0.0",
                  "posterior_formulation": "[Undefined]",
                  "use_random_seed": "False",
                  "use_mixture_model_proportions": "[Undefined]",
                  "out_classified_image_name": "[Undefined]",
                  "save_posteriors": "[Undefined]",
                  "output_posteriors_name_template": "POSTERIOR_%02d.nii.gz",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "classified_image": "[Undefined]",
                  "posteriors": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "msk_conform",
                "type": "node",
                "inputs": {
                  "function_str": "def _conform_mask(in_mask, in_reference):\n    \"\"\"Ensure the mask headers make sense and match those of the T1w.\"\"\"\n    from pathlib import Path\n\n    import nibabel as nib\n    from nipype.utils.filemanip import fname_presuffix\n\n    ref = nib.load(in_reference)\n    nii = nib.load(in_mask)\n    hdr = nii.header.copy()\n    hdr.set_data_dtype(\"int16\")\n    hdr.set_slope_inter(1, 0)\n\n    qform, qcode = ref.header.get_qform(coded=True)\n    if qcode is not None:\n        hdr.set_qform(qform, int(qcode))\n\n    sform, scode = ref.header.get_sform(coded=True)\n    if scode is not None:\n        hdr.set_sform(sform, int(scode))\n\n    if \"_maths\" in in_mask:  # Cut the name at first _maths occurrence\n        ext = \"\".join(Path(in_mask).suffixes)\n        basename = Path(in_mask).name\n        in_mask = basename.split(\"_maths\")[0] + ext\n\n    out_file = fname_presuffix(in_mask, suffix=\"_mask\", newpath=str(Path()))\n    nii.__class__(nii.get_fdata().astype(\"int16\"), ref.affine, hdr).to_filename(\n        out_file\n    )\n    return out_file\n",
                  "in_mask": "[Undefined]",
                  "in_reference": "[Undefined]"
                },
                "outputs": {
                  "out": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "02_pad_segm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "04_sel_labels",
                "type": "node",
                "inputs": {
                  "function_str": "def _select_labels(in_segm, labels):\n    from os import getcwd\n\n    import numpy as np\n    import nibabel as nib\n    from nipype.utils.filemanip import fname_presuffix\n\n    out_files = []\n\n    cwd = getcwd()\n    nii = nib.load(in_segm)\n    for l in labels:  # noqa: E741\n        data = (nii.get_fdata() == l).astype(np.uint8)\n        newnii = nii.__class__(data, nii.affine, nii.header)\n        newnii.set_data_dtype(\"uint8\")\n        out_file = fname_presuffix(in_segm, suffix=\"_class-%02d\" % l, newpath=cwd)\n        newnii.to_filename(out_file)\n        out_files.append(out_file)\n    return out_files\n",
                  "in_segm": "[Undefined]",
                  "labels": "[3, 2, 1]"
                },
                "outputs": {
                  "out_wm": "[Undefined]",
                  "out_gm": "[Undefined]",
                  "out_csf": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "05_get_wm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "GetLargestComponent",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "06_get_gm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "GetLargestComponent",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "07_fill_gm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "FillHoles",
                  "op1": "[Undefined]",
                  "op2": "2",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "08_mult_gm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "first_input": "[Undefined]",
                  "second_input": "[Undefined]",
                  "output_product_image": "08_mult_gm.nii.gz",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_product_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "09_relabel_wm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "first_input": "[Undefined]",
                  "second_input": "3.0",
                  "output_product_image": "09_relabel_wm.nii.gz",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_product_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "10_me_csf",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "ME",
                  "op1": "[Undefined]",
                  "op2": "10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "11_add_gm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "addtozero",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "12_relabel_gm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "first_input": "[Undefined]",
                  "second_input": "2.0",
                  "output_product_image": "12_relabel_gm.nii.gz",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_product_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "13_add_gm_wm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "addtozero",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "14_sel_labels2",
                "type": "node",
                "inputs": {
                  "function_str": "def _select_labels(in_segm, labels):\n    from os import getcwd\n\n    import numpy as np\n    import nibabel as nib\n    from nipype.utils.filemanip import fname_presuffix\n\n    out_files = []\n\n    cwd = getcwd()\n    nii = nib.load(in_segm)\n    for l in labels:  # noqa: E741\n        data = (nii.get_fdata() == l).astype(np.uint8)\n        newnii = nii.__class__(data, nii.affine, nii.header)\n        newnii.set_data_dtype(\"uint8\")\n        out_file = fname_presuffix(in_segm, suffix=\"_class-%02d\" % l, newpath=cwd)\n        newnii.to_filename(out_file)\n        out_files.append(out_file)\n    return out_files\n",
                  "in_segm": "[Undefined]",
                  "labels": "[2, 3]"
                },
                "outputs": {
                  "out_gm": "[Undefined]",
                  "out_wm": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "15_add_7",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "addtozero",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "16_me_7",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "ME",
                  "op1": "[Undefined]",
                  "op2": "2",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "17_comp_7",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "GetLargestComponent",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "18_md_7",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "MD",
                  "op1": "[Undefined]",
                  "op2": "4",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "19_fill_7",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "FillHoles",
                  "op1": "[Undefined]",
                  "op2": "2",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "20_add_7_2",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "addtozero",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "21_md_7_2",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "MD",
                  "op1": "[Undefined]",
                  "op2": "5",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "22_me_7_2",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "ME",
                  "op1": "[Undefined]",
                  "op2": "5",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "23_depad_mask",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "-10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "24_depad_segm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "-10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "26_depad_wm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "-10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "25_depad_gm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "-10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "27_depad_csf",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "-10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "merge_tpms",
                "type": "node",
                "inputs": {
                  "axis": "vstack",
                  "no_flatten": "False",
                  "ravel_inputs": "False",
                  "in1": "[Undefined]",
                  "in2": "[Undefined]",
                  "in3": "[Undefined]"
                },
                "outputs": {
                  "out": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputnode",
                "type": "node",
                "inputs": {
                  "out_mask": "[Undefined]",
                  "out_segm": "[Undefined]",
                  "out_tpms": "[Undefined]"
                },
                "outputs": {
                  "out_mask": "[Undefined]",
                  "out_segm": "[Undefined]",
                  "out_tpms": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputnode",
                "target": "copy_xform"
              },
              {
                "origin": "inputnode",
                "target": "03_pad_mask"
              },
              {
                "origin": "inputnode",
                "target": "01_atropos"
              },
              {
                "origin": "inputnode",
                "target": "msk_conform"
              },
              {
                "origin": "copy_xform",
                "target": "outputnode"
              },
              {
                "origin": "03_pad_mask",
                "target": "20_add_7_2"
              },
              {
                "origin": "01_atropos",
                "target": "02_pad_segm"
              },
              {
                "origin": "msk_conform",
                "target": "copy_xform"
              },
              {
                "origin": "02_pad_segm",
                "target": "04_sel_labels"
              },
              {
                "origin": "04_sel_labels",
                "target": "05_get_wm"
              },
              {
                "origin": "04_sel_labels",
                "target": "06_get_gm"
              },
              {
                "origin": "04_sel_labels",
                "target": "10_me_csf"
              },
              {
                "origin": "04_sel_labels",
                "target": "27_depad_csf"
              },
              {
                "origin": "05_get_wm",
                "target": "09_relabel_wm"
              },
              {
                "origin": "06_get_gm",
                "target": "07_fill_gm"
              },
              {
                "origin": "06_get_gm",
                "target": "08_mult_gm"
              },
              {
                "origin": "07_fill_gm",
                "target": "08_mult_gm"
              },
              {
                "origin": "08_mult_gm",
                "target": "11_add_gm"
              },
              {
                "origin": "09_relabel_wm",
                "target": "13_add_gm_wm"
              },
              {
                "origin": "09_relabel_wm",
                "target": "26_depad_wm"
              },
              {
                "origin": "10_me_csf",
                "target": "11_add_gm"
              },
              {
                "origin": "11_add_gm",
                "target": "12_relabel_gm"
              },
              {
                "origin": "12_relabel_gm",
                "target": "13_add_gm_wm"
              },
              {
                "origin": "12_relabel_gm",
                "target": "25_depad_gm"
              },
              {
                "origin": "13_add_gm_wm",
                "target": "14_sel_labels2"
              },
              {
                "origin": "13_add_gm_wm",
                "target": "24_depad_segm"
              },
              {
                "origin": "14_sel_labels2",
                "target": "15_add_7"
              },
              {
                "origin": "15_add_7",
                "target": "16_me_7"
              },
              {
                "origin": "16_me_7",
                "target": "17_comp_7"
              },
              {
                "origin": "17_comp_7",
                "target": "18_md_7"
              },
              {
                "origin": "18_md_7",
                "target": "19_fill_7"
              },
              {
                "origin": "19_fill_7",
                "target": "20_add_7_2"
              },
              {
                "origin": "20_add_7_2",
                "target": "21_md_7_2"
              },
              {
                "origin": "21_md_7_2",
                "target": "22_me_7_2"
              },
              {
                "origin": "22_me_7_2",
                "target": "23_depad_mask"
              },
              {
                "origin": "23_depad_mask",
                "target": "msk_conform"
              },
              {
                "origin": "24_depad_segm",
                "target": "copy_xform"
              },
              {
                "origin": "26_depad_wm",
                "target": "merge_tpms"
              },
              {
                "origin": "25_depad_gm",
                "target": "merge_tpms"
              },
              {
                "origin": "27_depad_csf",
                "target": "merge_tpms"
              },
              {
                "origin": "merge_tpms",
                "target": "copy_xform"
              }
            ]
          },
          {
            "name": "sel_wm",
            "type": "node",
            "inputs": {
              "inlist": "[Undefined]",
              "index": "[2]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputnode",
            "target": "truncate_images_"
          },
          {
            "origin": "inputnode",
            "target": "copy_xform"
          },
          {
            "origin": "inputnode",
            "target": "inu_n4_final_"
          },
          {
            "origin": "inputnode",
            "target": "init_aff"
          },
          {
            "origin": "inputnode",
            "target": "norm"
          },
          {
            "origin": "inputnode",
            "target": "map_brainmask"
          },
          {
            "origin": "truncate_images_",
            "target": "inu_n4_"
          },
          {
            "origin": "copy_xform",
            "target": "outputnode"
          },
          {
            "origin": "inu_n4_final_",
            "target": "apply_mask_"
          },
          {
            "origin": "inu_n4_final_",
            "target": "copy_xform"
          },
          {
            "origin": "init_aff",
            "target": "norm"
          },
          {
            "origin": "norm",
            "target": "map_brainmask"
          },
          {
            "origin": "map_brainmask",
            "target": "thr_brainmask"
          },
          {
            "origin": "inu_n4_",
            "target": "res_target"
          },
          {
            "origin": "inu_n4_",
            "target": "lap_target"
          },
          {
            "origin": "inu_n4_",
            "target": "mrg_target"
          },
          {
            "origin": "inu_n4_",
            "target": "atropos_wf"
          },
          {
            "origin": "res_target",
            "target": "init_aff"
          },
          {
            "origin": "res_tmpl",
            "target": "init_aff"
          },
          {
            "origin": "thr_brainmask",
            "target": "dil_brainmask"
          },
          {
            "origin": "thr_brainmask",
            "target": "atropos_wf"
          },
          {
            "origin": "dil_brainmask",
            "target": "get_brainmask"
          },
          {
            "origin": "get_brainmask",
            "target": "copy_xform"
          },
          {
            "origin": "get_brainmask",
            "target": "atropos_wf"
          },
          {
            "origin": "apply_mask_",
            "target": "copy_xform"
          },
          {
            "origin": "lap_target",
            "target": "mrg_target"
          },
          {
            "origin": "lap_tmpl",
            "target": "mrg_tmpl"
          },
          {
            "origin": "mrg_tmpl",
            "target": "norm"
          },
          {
            "origin": "mrg_target",
            "target": "norm"
          },
          {
            "origin": "atropos_wf",
            "target": "sel_wm"
          },
          {
            "origin": "atropos_wf",
            "target": "apply_mask_"
          },
          {
            "origin": "atropos_wf",
            "target": "outputnode"
          },
          {
            "origin": "sel_wm",
            "target": "inu_n4_final_"
          }
        ]
      },
      {
        "name": "brain_extraction_36",
        "type": "node",
        "inputs": {
          "in_file_a": "[Undefined]",
          "in_file_b": "[Undefined]",
          "in_file_c": "[Undefined]",
          "out_file": "[Undefined]",
          "expr": "a*step(b)",
          "start_idx": "[Undefined]",
          "stop_idx": "[Undefined]",
          "single_idx": "[Undefined]",
          "overwrite": "[Undefined]",
          "other": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "ANTS_T1_to_template_42",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'input_brain': '[Undefined]', 'input_head': '[Undefined]', 'input_mask': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'reference_brain': '[Undefined]', 'reference_head': '[Undefined]', 'reference_mask': '[Undefined]', 'transform': '[Undefined]'}",
          "anat_mni_ants_register": "{'inputspec': {'ants_para': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}, 'calc_ants_warp': {'function_str': 'def hardcoded_reg(\\n    moving_brain,\\n    reference_brain,\\n    moving_skull,\\n    reference_skull,\\n    ants_para,\\n    moving_mask=None,\\n    reference_mask=None,\\n    fixed_image_mask=None,\\n    interp=None,\\n    reg_with_skull=0,\\n):\\n    \"\"\"Run ANTs registration.\"\"\"\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \"dimensionality\":\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = (\\n                        \"Dimensionality specified in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 2, 3, or 4 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--dimensionality\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"verbose\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"Verbose output option in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--verbose\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"float\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"Float option in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--float\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"collapse-output-transforms\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"collapse-output-transforms specified in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--collapse-output-transforms\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"winsorize-image-intensities\":\\n                if (\\n                    ants_para[para_index][para_type][\"lowerQuantile\"] is None\\n                    or ants_para[para_index][para_type][\"upperQuantile\"] is None\\n                ):\\n                    err_msg = (\\n                        \"Please specifiy lowerQuantile and upperQuantile of ANTs\"\\n                        \" parameters --winsorize-image-intensities in pipeline config.\"\\n                    )\\n                    raise RequiredFieldInvalid(err_msg)\\n                regcmd.append(\"--winsorize-image-intensities\")\\n                _quantile = ants_para[para_index][para_type]\\n                regcmd.append(\\n                    f\"[{_quantile[\\'lowerQuantile\\']},{_quantile[\\'upperQuantile\\']}]\"\\n                )\\n\\n            elif para_type == \"initial-moving-transform\":\\n                if ants_para[para_index][para_type][\"initializationFeature\"] is None:\\n                    err_msg = (\\n                        \"Please specifiy initializationFeature of ANTs parameters in\"\\n                        \" pipeline config.\"\\n                    )\\n                    raise RequiredFieldInvalid(err_msg)\\n                regcmd.append(\"--initial-moving-transform\")\\n                initialization_feature = ants_para[para_index][para_type][\\n                    \"initializationFeature\"\\n                ]\\n                if reg_with_skull == 1:\\n                    regcmd.append(\\n                        f\"[{reference_skull},{moving_skull},{initialization_feature}]\"\\n                    )\\n                else:\\n                    regcmd.append(\\n                        f\"[{reference_brain},{moving_brain},{initialization_feature}]\"\\n                    )\\n\\n            elif para_type == \"transforms\":\\n                for trans_index in range(len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type in (\"Rigid\", \"Affine\"):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"gradientStep\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    f\"Please specifiy {trans_type} Gradient Step of\"\\n                                    \" ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            gradient_step = ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"gradientStep\"]\\n                            regcmd.append(f\"{trans_type}[{gradient_step}]\")\\n\\n                        if trans_type == \"SyN\":\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"gradientStep\"]\\n                                is None\\n                            ):\\n                                err_msg = f\"Please specifiy {trans_type} Gradient Step of ANTs parameters in pipeline config.\"\\n                                raise RequiredFieldInvalid(err_msg)\\n                            SyN_para = []\\n                            SyN_para.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"gradientStep\"]\\n                                )\\n                            )\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"updateFieldVarianceInVoxelSpace\"]\\n                                is not None\\n                            ):\\n                                SyN_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"updateFieldVarianceInVoxelSpace\"]\\n                                    )\\n                                )\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"totalFieldVarianceInVoxelSpace\"]\\n                                is not None\\n                            ):\\n                                SyN_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"totalFieldVarianceInVoxelSpace\"]\\n                                    )\\n                                )\\n                            SyN_para = \",\".join([str(elem) for elem in SyN_para])\\n                            regcmd.append(f\"{trans_type}[{SyN_para}]\")\\n\\n                        if (\\n                            ants_para[para_index][para_type][trans_index][trans_type][\\n                                \"metric\"\\n                            ][\"type\"]\\n                            == \"MI\"\\n                        ):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"metricWeight\"]\\n                                is None\\n                                or ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"numberOfBins\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy metricWeight and numberOfBins for\"\\n                                    \" metric MI of ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            MI_para = []\\n                            _metric = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"metric\"]\\n                            MI_para.append(\\n                                f\"{_metric[\\'metricWeight\\']},{_metric[\\'numberOfBins\\']}\"\\n                            )\\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"metric\"] and ants_para[para_index][\\n                                para_type\\n                            ][trans_index][trans_type][\"metric\"][\\n                                \"samplingStrategy\"\\n                            ] in [\"None\", \"Regular\", \"Random\"]:\\n                                MI_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingStrategy\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"samplingPercentage\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"samplingPercentage\"]\\n                                is not None\\n                            ):\\n                                MI_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingPercentage\"]\\n                                    )\\n                                )\\n                            MI_para = \",\".join([str(elem) for elem in MI_para])\\n                            regcmd.append(\"--metric\")\\n                            if reg_with_skull == 1:\\n                                regcmd.append(\\n                                    f\"MI[{reference_skull},{moving_skull},{MI_para}]\"\\n                                )\\n                            else:\\n                                regcmd.append(\\n                                    f\"MI[{reference_brain},{moving_brain},{MI_para}]\"\\n                                )\\n\\n                        if (\\n                            ants_para[para_index][para_type][trans_index][trans_type][\\n                                \"metric\"\\n                            ][\"type\"]\\n                            == \"CC\"\\n                        ):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"metricWeight\"]\\n                                is None\\n                                or ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"radius\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy metricWeight and radius for metric\"\\n                                    \" CC of ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            CC_para = []\\n                            _metric = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"metric\"]\\n                            CC_para.append(\\n                                f\"{_metric[\\'metricWeight\\']},{_metric[\\'radius\\']}\"\\n                            )\\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"metric\"] and ants_para[para_index][\\n                                para_type\\n                            ][trans_index][trans_type][\"metric\"][\\n                                \"samplingStrategy\"\\n                            ] in [\"None\", \"Regular\", \"Random\"]:\\n                                CC_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingStrategy\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"samplingPercentage\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"samplingPercentage\"]\\n                                is not None\\n                            ):\\n                                CC_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingPercentage\"]\\n                                    )\\n                                )\\n                            CC_para = \",\".join([str(elem) for elem in CC_para])\\n                            regcmd.append(\"--metric\")\\n                            regcmd.append(\\n                                f\"CC[{reference_skull},{moving_skull},{CC_para}]\"\\n                            )\\n\\n                        if (\\n                            \"convergence\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                        ):\\n                            convergence_para = []\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"iteration\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy convergence iteration of ANTs\"\\n                                    \" parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            convergence_para.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"convergence\"][\"iteration\"]\\n                                )\\n                            )\\n                            if (\\n                                \"convergenceThreshold\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"convergenceThreshold\"]\\n                                is not None\\n                            ):\\n                                convergence_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"convergence\"][\"convergenceThreshold\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"convergenceWindowSize\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"convergenceWindowSize\"]\\n                                is not None\\n                            ):\\n                                convergence_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"convergence\"][\"convergenceWindowSize\"]\\n                                    )\\n                                )\\n                            convergence_para = \",\".join(\\n                                [str(elem) for elem in convergence_para]\\n                            )\\n                            regcmd.append(\"--convergence\")\\n                            regcmd.append(f\"[{convergence_para}]\")\\n\\n                        if (\\n                            \"smoothing-sigmas\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"smoothing-sigmas\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"smoothing-sigmas\"]\\n                                )\\n                            )\\n\\n                        if (\\n                            \"shrink-factors\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"shrink-factors\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"shrink-factors\"]\\n                                )\\n                            )\\n\\n                        if (\\n                            \"use-histogram-matching\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                        ):\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"use-histogram-matching\"]:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if (\\n                            \"winsorize-image-intensities\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"][\"lowerQuantile\"]\\n                            is not None\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"][\"upperQuantile\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            _quantile = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"]\\n                            regcmd.append(\\n                                f\"[{_quantile[\\'lowerQuantile\\']},{_quantile[\\'upperQuantile\\']}]\"\\n                            )\\n\\n                        if (\\n                            \"masks\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"masks\"]\\n                            is not None\\n                        ):\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"masks\"]:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(f\"[{reference_mask},{moving_mask}]\")\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \"masks\":\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if (\\n                        not ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        err_msg = (\\n                            \"Masks option in ANTs parameters:\"\\n                            f\" {ants_para[para_index][para_type]} is not supported.\"\\n                            \" Please set `fixed_image_mask` as True. Or set both\"\\n                            \" `fixed_image_mask` and `moving_image_mask` as False\"\\n                        )\\n                        raise NotImplementedError(err_msg)\\n                    if (\\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\n                            \"[\" + str(reference_mask) + \",\" + str(moving_mask) + \"]\"\\n                        )\\n                    elif (\\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\"[\" + str(reference_mask) + \"]\")\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(f\"{interp}\")\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \"command.txt\")\\n    with open(command_file, \"wt\") as f:\\n        f.write(\" \".join(regcmd))\\n\\n    try:\\n        subprocess.check_output(regcmd)\\n    except Exception as e:\\n        msg = (\\n            \"[!] ANTS registration did not complete successfully.\"\\n            f\"\\\\n\\\\nError details:\\\\n{e}\\\\n{e.output}\\\\n\"\\n        )\\n        raise RuntimeError(msg)\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\".\") if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        msg = (\\n            \"\\\\n\\\\n[!] No registration output file found. ANTS registration may not have\"\\n            \" completed successfully.\\\\n\\\\n\"\\n        )\\n        raise RuntimeError(msg)\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': '[Undefined]'}, 'select_forward_initial': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Initial'}, 'select_forward_rigid': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Rigid'}, 'select_forward_affine': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Affine'}, 'select_forward_warp': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Warp'}, 'select_inverse_warp': {'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Inverse'}, 'outputspec': {'composite_transform': '[Undefined]', 'wait': '[Undefined]'}}",
          "write_composite_linear_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-T1w_to-template_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "check_transforms": "{'function_str': 'def check_transforms(transform_list):\\n    \"\"\"Check if the transform list is empty.\"\"\"\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in range(len(transform_number))], len(\\n        transform_number\\n    )\\n'}",
          "write_composite_invlinear_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-T1w_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_inv_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "check_inv_transforms": "{'function_str': 'def check_transforms(transform_list):\\n    \"\"\"Check if the transform list is empty.\"\"\"\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in range(len(transform_number))], len(\\n        transform_number\\n    )\\n'}",
          "inverse_transform_flags": "{'function_str': 'def generate_inverse_transform_flags(transform_list):\\n    \"\"\"List whether each transform has an inverse.\"\"\"\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if \"WARPINV\" in transform:\\n            inverse_transform_flags.append(False)\\n        if \"updated_affine\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"Initial\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"Rigid\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"Affine\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"InverseWarp\" in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n'}",
          "write_composite_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-T1w_to-template_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_all_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "check_all_transforms": "{'function_str': 'def check_transforms(transform_list):\\n    \"\"\"Check if the transform list is empty.\"\"\"\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in range(len(transform_number))], len(\\n        transform_number\\n    )\\n'}",
          "write_composite_inv_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-T1w_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_all_inv_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "check_all_inv_transforms": "{'function_str': 'def check_transforms(transform_list):\\n    \"\"\"Check if the transform list is empty.\"\"\"\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in range(len(transform_number))], len(\\n        transform_number\\n    )\\n'}",
          "inverse_all_transform_flags": "{'function_str': 'def generate_inverse_transform_flags(transform_list):\\n    \"\"\"List whether each transform has an inverse.\"\"\"\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if \"WARPINV\" in transform:\\n            inverse_transform_flags.append(False)\\n        if \"updated_affine\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"Initial\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"Rigid\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"Affine\" in transform:\\n            inverse_transform_flags.append(True)\\n        if \"InverseWarp\" in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n'}"
        },
        "outputs": {
          "inputspec": "{'input_brain': None, 'input_head': None, 'input_mask': None, 'interpolation': None, 'reference_brain': None, 'reference_head': None, 'reference_mask': None, 'transform': None}",
          "anat_mni_ants_register": "{'inputspec': {'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}, 'calc_ants_warp': {'warp_list': None, 'warped_image': None}, 'select_forward_initial': {'selected_warp': None}, 'select_forward_rigid': {'selected_warp': None}, 'select_forward_affine': {'selected_warp': None}, 'select_forward_warp': {'selected_warp': None}, 'select_inverse_warp': {'selected_warp': None}, 'outputspec': {'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}}",
          "write_composite_linear_xfm": "{'output_image': None}",
          "collect_transforms": "{'out': None}",
          "check_transforms": "{'checked_transform_list': None, 'list_length': None}",
          "write_composite_invlinear_xfm": "{'output_image': None}",
          "collect_inv_transforms": "{'out': None}",
          "check_inv_transforms": "{'checked_transform_list': None, 'list_length': None}",
          "inverse_transform_flags": "{'inverse_transform_flags': None}",
          "write_composite_xfm": "{'output_image': None}",
          "collect_all_transforms": "{'out': None}",
          "check_all_transforms": "{'checked_transform_list': None, 'list_length': None}",
          "write_composite_inv_xfm": "{'output_image': None}",
          "collect_all_inv_transforms": "{'out': None}",
          "check_all_inv_transforms": "{'checked_transform_list': None, 'list_length': None}",
          "inverse_all_transform_flags": "{'inverse_transform_flags': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "input_head": "[Undefined]",
              "reference_head": "[Undefined]",
              "input_mask": "[Undefined]",
              "reference_mask": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "LanczosWindowedSinc"
            },
            "outputs": {
              "input_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "input_head": "[Undefined]",
              "reference_head": "[Undefined]",
              "input_mask": "[Undefined]",
              "reference_mask": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "anat_mni_ants_register",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'ants_para': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}",
              "calc_ants_warp": "{'function_str': 'def hardcoded_reg(\\n    moving_brain,\\n    reference_brain,\\n    moving_skull,\\n    reference_skull,\\n    ants_para,\\n    moving_mask=None,\\n    reference_mask=None,\\n    fixed_image_mask=None,\\n    interp=None,\\n    reg_with_skull=0,\\n):\\n    \"\"\"Run ANTs registration.\"\"\"\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \"dimensionality\":\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = (\\n                        \"Dimensionality specified in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 2, 3, or 4 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--dimensionality\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"verbose\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"Verbose output option in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--verbose\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"float\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"Float option in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--float\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"collapse-output-transforms\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"collapse-output-transforms specified in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--collapse-output-transforms\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"winsorize-image-intensities\":\\n                if (\\n                    ants_para[para_index][para_type][\"lowerQuantile\"] is None\\n                    or ants_para[para_index][para_type][\"upperQuantile\"] is None\\n                ):\\n                    err_msg = (\\n                        \"Please specifiy lowerQuantile and upperQuantile of ANTs\"\\n                        \" parameters --winsorize-image-intensities in pipeline config.\"\\n                    )\\n                    raise RequiredFieldInvalid(err_msg)\\n                regcmd.append(\"--winsorize-image-intensities\")\\n                _quantile = ants_para[para_index][para_type]\\n                regcmd.append(\\n                    f\"[{_quantile[\\'lowerQuantile\\']},{_quantile[\\'upperQuantile\\']}]\"\\n                )\\n\\n            elif para_type == \"initial-moving-transform\":\\n                if ants_para[para_index][para_type][\"initializationFeature\"] is None:\\n                    err_msg = (\\n                        \"Please specifiy initializationFeature of ANTs parameters in\"\\n                        \" pipeline config.\"\\n                    )\\n                    raise RequiredFieldInvalid(err_msg)\\n                regcmd.append(\"--initial-moving-transform\")\\n                initialization_feature = ants_para[para_index][para_type][\\n                    \"initializationFeature\"\\n                ]\\n                if reg_with_skull == 1:\\n                    regcmd.append(\\n                        f\"[{reference_skull},{moving_skull},{initialization_feature}]\"\\n                    )\\n                else:\\n                    regcmd.append(\\n                        f\"[{reference_brain},{moving_brain},{initialization_feature}]\"\\n                    )\\n\\n            elif para_type == \"transforms\":\\n                for trans_index in range(len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type in (\"Rigid\", \"Affine\"):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"gradientStep\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    f\"Please specifiy {trans_type} Gradient Step of\"\\n                                    \" ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            gradient_step = ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"gradientStep\"]\\n                            regcmd.append(f\"{trans_type}[{gradient_step}]\")\\n\\n                        if trans_type == \"SyN\":\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"gradientStep\"]\\n                                is None\\n                            ):\\n                                err_msg = f\"Please specifiy {trans_type} Gradient Step of ANTs parameters in pipeline config.\"\\n                                raise RequiredFieldInvalid(err_msg)\\n                            SyN_para = []\\n                            SyN_para.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"gradientStep\"]\\n                                )\\n                            )\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"updateFieldVarianceInVoxelSpace\"]\\n                                is not None\\n                            ):\\n                                SyN_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"updateFieldVarianceInVoxelSpace\"]\\n                                    )\\n                                )\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"totalFieldVarianceInVoxelSpace\"]\\n                                is not None\\n                            ):\\n                                SyN_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"totalFieldVarianceInVoxelSpace\"]\\n                                    )\\n                                )\\n                            SyN_para = \",\".join([str(elem) for elem in SyN_para])\\n                            regcmd.append(f\"{trans_type}[{SyN_para}]\")\\n\\n                        if (\\n                            ants_para[para_index][para_type][trans_index][trans_type][\\n                                \"metric\"\\n                            ][\"type\"]\\n                            == \"MI\"\\n                        ):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"metricWeight\"]\\n                                is None\\n                                or ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"numberOfBins\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy metricWeight and numberOfBins for\"\\n                                    \" metric MI of ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            MI_para = []\\n                            _metric = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"metric\"]\\n                            MI_para.append(\\n                                f\"{_metric[\\'metricWeight\\']},{_metric[\\'numberOfBins\\']}\"\\n                            )\\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"metric\"] and ants_para[para_index][\\n                                para_type\\n                            ][trans_index][trans_type][\"metric\"][\\n                                \"samplingStrategy\"\\n                            ] in [\"None\", \"Regular\", \"Random\"]:\\n                                MI_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingStrategy\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"samplingPercentage\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"samplingPercentage\"]\\n                                is not None\\n                            ):\\n                                MI_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingPercentage\"]\\n                                    )\\n                                )\\n                            MI_para = \",\".join([str(elem) for elem in MI_para])\\n                            regcmd.append(\"--metric\")\\n                            if reg_with_skull == 1:\\n                                regcmd.append(\\n                                    f\"MI[{reference_skull},{moving_skull},{MI_para}]\"\\n                                )\\n                            else:\\n                                regcmd.append(\\n                                    f\"MI[{reference_brain},{moving_brain},{MI_para}]\"\\n                                )\\n\\n                        if (\\n                            ants_para[para_index][para_type][trans_index][trans_type][\\n                                \"metric\"\\n                            ][\"type\"]\\n                            == \"CC\"\\n                        ):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"metricWeight\"]\\n                                is None\\n                                or ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"radius\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy metricWeight and radius for metric\"\\n                                    \" CC of ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            CC_para = []\\n                            _metric = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"metric\"]\\n                            CC_para.append(\\n                                f\"{_metric[\\'metricWeight\\']},{_metric[\\'radius\\']}\"\\n                            )\\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"metric\"] and ants_para[para_index][\\n                                para_type\\n                            ][trans_index][trans_type][\"metric\"][\\n                                \"samplingStrategy\"\\n                            ] in [\"None\", \"Regular\", \"Random\"]:\\n                                CC_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingStrategy\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"samplingPercentage\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"samplingPercentage\"]\\n                                is not None\\n                            ):\\n                                CC_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingPercentage\"]\\n                                    )\\n                                )\\n                            CC_para = \",\".join([str(elem) for elem in CC_para])\\n                            regcmd.append(\"--metric\")\\n                            regcmd.append(\\n                                f\"CC[{reference_skull},{moving_skull},{CC_para}]\"\\n                            )\\n\\n                        if (\\n                            \"convergence\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                        ):\\n                            convergence_para = []\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"iteration\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy convergence iteration of ANTs\"\\n                                    \" parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            convergence_para.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"convergence\"][\"iteration\"]\\n                                )\\n                            )\\n                            if (\\n                                \"convergenceThreshold\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"convergenceThreshold\"]\\n                                is not None\\n                            ):\\n                                convergence_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"convergence\"][\"convergenceThreshold\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"convergenceWindowSize\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"convergenceWindowSize\"]\\n                                is not None\\n                            ):\\n                                convergence_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"convergence\"][\"convergenceWindowSize\"]\\n                                    )\\n                                )\\n                            convergence_para = \",\".join(\\n                                [str(elem) for elem in convergence_para]\\n                            )\\n                            regcmd.append(\"--convergence\")\\n                            regcmd.append(f\"[{convergence_para}]\")\\n\\n                        if (\\n                            \"smoothing-sigmas\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"smoothing-sigmas\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"smoothing-sigmas\"]\\n                                )\\n                            )\\n\\n                        if (\\n                            \"shrink-factors\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"shrink-factors\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"shrink-factors\"]\\n                                )\\n                            )\\n\\n                        if (\\n                            \"use-histogram-matching\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                        ):\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"use-histogram-matching\"]:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if (\\n                            \"winsorize-image-intensities\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"][\"lowerQuantile\"]\\n                            is not None\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"][\"upperQuantile\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            _quantile = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"]\\n                            regcmd.append(\\n                                f\"[{_quantile[\\'lowerQuantile\\']},{_quantile[\\'upperQuantile\\']}]\"\\n                            )\\n\\n                        if (\\n                            \"masks\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"masks\"]\\n                            is not None\\n                        ):\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"masks\"]:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(f\"[{reference_mask},{moving_mask}]\")\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \"masks\":\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if (\\n                        not ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        err_msg = (\\n                            \"Masks option in ANTs parameters:\"\\n                            f\" {ants_para[para_index][para_type]} is not supported.\"\\n                            \" Please set `fixed_image_mask` as True. Or set both\"\\n                            \" `fixed_image_mask` and `moving_image_mask` as False\"\\n                        )\\n                        raise NotImplementedError(err_msg)\\n                    if (\\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\n                            \"[\" + str(reference_mask) + \",\" + str(moving_mask) + \"]\"\\n                        )\\n                    elif (\\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\"[\" + str(reference_mask) + \"]\")\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(f\"{interp}\")\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \"command.txt\")\\n    with open(command_file, \"wt\") as f:\\n        f.write(\" \".join(regcmd))\\n\\n    try:\\n        subprocess.check_output(regcmd)\\n    except Exception as e:\\n        msg = (\\n            \"[!] ANTS registration did not complete successfully.\"\\n            f\"\\\\n\\\\nError details:\\\\n{e}\\\\n{e.output}\\\\n\"\\n        )\\n        raise RuntimeError(msg)\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\".\") if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        msg = (\\n            \"\\\\n\\\\n[!] No registration output file found. ANTS registration may not have\"\\n            \" completed successfully.\\\\n\\\\n\"\\n        )\\n        raise RuntimeError(msg)\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': '[Undefined]'}",
              "select_forward_initial": "{'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Initial'}",
              "select_forward_rigid": "{'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Rigid'}",
              "select_forward_affine": "{'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Affine'}",
              "select_forward_warp": "{'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Warp'}",
              "select_inverse_warp": "{'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Inverse'}",
              "outputspec": "{'composite_transform': '[Undefined]', 'wait': '[Undefined]'}"
            },
            "outputs": {
              "inputspec": "{'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}",
              "calc_ants_warp": "{'warp_list': None, 'warped_image': None}",
              "select_forward_initial": "{'selected_warp': None}",
              "select_forward_rigid": "{'selected_warp': None}",
              "select_forward_affine": "{'selected_warp': None}",
              "select_forward_warp": "{'selected_warp': None}",
              "select_inverse_warp": "{'selected_warp': None}",
              "outputspec": "{'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "moving_brain": "[Undefined]",
                  "reference_brain": "[Undefined]",
                  "moving_skull": "[Undefined]",
                  "reference_skull": "[Undefined]",
                  "reference_mask": "[Undefined]",
                  "moving_mask": "[Undefined]",
                  "fixed_image_mask": "None",
                  "ants_para": "[{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}]",
                  "interp": "[Undefined]"
                },
                "outputs": {
                  "moving_brain": "[Undefined]",
                  "reference_brain": "[Undefined]",
                  "moving_skull": "[Undefined]",
                  "reference_skull": "[Undefined]",
                  "reference_mask": "[Undefined]",
                  "moving_mask": "[Undefined]",
                  "fixed_image_mask": "[Undefined]",
                  "ants_para": "[Undefined]",
                  "interp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "calc_ants_warp",
                "type": "node",
                "inputs": {
                  "function_str": "def hardcoded_reg(\n    moving_brain,\n    reference_brain,\n    moving_skull,\n    reference_skull,\n    ants_para,\n    moving_mask=None,\n    reference_mask=None,\n    fixed_image_mask=None,\n    interp=None,\n    reg_with_skull=0,\n):\n    \"\"\"Run ANTs registration.\"\"\"\n    # TODO: expand transforms to cover all in ANTs para\n\n    regcmd = [\"antsRegistration\"]\n    for para_index in range(len(ants_para)):\n        for para_type in ants_para[para_index]:\n            if para_type == \"dimensionality\":\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\n                    err_msg = (\n                        \"Dimensionality specified in ANTs parameters:\"\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\n                        \" Change to 2, 3, or 4 and try again\"\n                    )\n                    raise ValueError(err_msg)\n                regcmd.append(\"--dimensionality\")\n                regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == \"verbose\":\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = (\n                        \"Verbose output option in ANTs parameters:\"\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\n                        \" Change to 0 or 1 and try again\"\n                    )\n                    raise ValueError(err_msg)\n                regcmd.append(\"--verbose\")\n                regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == \"float\":\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = (\n                        \"Float option in ANTs parameters:\"\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\n                        \" Change to 0 or 1 and try again\"\n                    )\n                    raise ValueError(err_msg)\n                regcmd.append(\"--float\")\n                regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == \"collapse-output-transforms\":\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = (\n                        \"collapse-output-transforms specified in ANTs parameters:\"\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\n                        \" Change to 0 or 1 and try again\"\n                    )\n                    raise ValueError(err_msg)\n                regcmd.append(\"--collapse-output-transforms\")\n                regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == \"winsorize-image-intensities\":\n                if (\n                    ants_para[para_index][para_type][\"lowerQuantile\"] is None\n                    or ants_para[para_index][para_type][\"upperQuantile\"] is None\n                ):\n                    err_msg = (\n                        \"Please specifiy lowerQuantile and upperQuantile of ANTs\"\n                        \" parameters --winsorize-image-intensities in pipeline config.\"\n                    )\n                    raise RequiredFieldInvalid(err_msg)\n                regcmd.append(\"--winsorize-image-intensities\")\n                _quantile = ants_para[para_index][para_type]\n                regcmd.append(\n                    f\"[{_quantile['lowerQuantile']},{_quantile['upperQuantile']}]\"\n                )\n\n            elif para_type == \"initial-moving-transform\":\n                if ants_para[para_index][para_type][\"initializationFeature\"] is None:\n                    err_msg = (\n                        \"Please specifiy initializationFeature of ANTs parameters in\"\n                        \" pipeline config.\"\n                    )\n                    raise RequiredFieldInvalid(err_msg)\n                regcmd.append(\"--initial-moving-transform\")\n                initialization_feature = ants_para[para_index][para_type][\n                    \"initializationFeature\"\n                ]\n                if reg_with_skull == 1:\n                    regcmd.append(\n                        f\"[{reference_skull},{moving_skull},{initialization_feature}]\"\n                    )\n                else:\n                    regcmd.append(\n                        f\"[{reference_brain},{moving_brain},{initialization_feature}]\"\n                    )\n\n            elif para_type == \"transforms\":\n                for trans_index in range(len(ants_para[para_index][para_type])):\n                    for trans_type in ants_para[para_index][para_type][trans_index]:\n                        regcmd.append(\"--transform\")\n                        if trans_type in (\"Rigid\", \"Affine\"):\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"gradientStep\"]\n                                is None\n                            ):\n                                err_msg = (\n                                    f\"Please specifiy {trans_type} Gradient Step of\"\n                                    \" ANTs parameters in pipeline config.\"\n                                )\n                                raise RequiredFieldInvalid(err_msg)\n                            gradient_step = ants_para[para_index][para_type][\n                                trans_index\n                            ][trans_type][\"gradientStep\"]\n                            regcmd.append(f\"{trans_type}[{gradient_step}]\")\n\n                        if trans_type == \"SyN\":\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"gradientStep\"]\n                                is None\n                            ):\n                                err_msg = f\"Please specifiy {trans_type} Gradient Step of ANTs parameters in pipeline config.\"\n                                raise RequiredFieldInvalid(err_msg)\n                            SyN_para = []\n                            SyN_para.append(\n                                str(\n                                    ants_para[para_index][para_type][trans_index][\n                                        trans_type\n                                    ][\"gradientStep\"]\n                                )\n                            )\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"updateFieldVarianceInVoxelSpace\"]\n                                is not None\n                            ):\n                                SyN_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"updateFieldVarianceInVoxelSpace\"]\n                                    )\n                                )\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"totalFieldVarianceInVoxelSpace\"]\n                                is not None\n                            ):\n                                SyN_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"totalFieldVarianceInVoxelSpace\"]\n                                    )\n                                )\n                            SyN_para = \",\".join([str(elem) for elem in SyN_para])\n                            regcmd.append(f\"{trans_type}[{SyN_para}]\")\n\n                        if (\n                            ants_para[para_index][para_type][trans_index][trans_type][\n                                \"metric\"\n                            ][\"type\"]\n                            == \"MI\"\n                        ):\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"][\"metricWeight\"]\n                                is None\n                                or ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"][\"numberOfBins\"]\n                                is None\n                            ):\n                                err_msg = (\n                                    \"Please specifiy metricWeight and numberOfBins for\"\n                                    \" metric MI of ANTs parameters in pipeline config.\"\n                                )\n                                raise RequiredFieldInvalid(err_msg)\n                            MI_para = []\n                            _metric = ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"metric\"]\n                            MI_para.append(\n                                f\"{_metric['metricWeight']},{_metric['numberOfBins']}\"\n                            )\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\n                                trans_index\n                            ][trans_type][\"metric\"] and ants_para[para_index][\n                                para_type\n                            ][trans_index][trans_type][\"metric\"][\n                                \"samplingStrategy\"\n                            ] in [\"None\", \"Regular\", \"Random\"]:\n                                MI_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"metric\"][\"samplingStrategy\"]\n                                    )\n                                )\n                            if (\n                                \"samplingPercentage\"\n                                in ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"]\n                                and ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"][\"samplingPercentage\"]\n                                is not None\n                            ):\n                                MI_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"metric\"][\"samplingPercentage\"]\n                                    )\n                                )\n                            MI_para = \",\".join([str(elem) for elem in MI_para])\n                            regcmd.append(\"--metric\")\n                            if reg_with_skull == 1:\n                                regcmd.append(\n                                    f\"MI[{reference_skull},{moving_skull},{MI_para}]\"\n                                )\n                            else:\n                                regcmd.append(\n                                    f\"MI[{reference_brain},{moving_brain},{MI_para}]\"\n                                )\n\n                        if (\n                            ants_para[para_index][para_type][trans_index][trans_type][\n                                \"metric\"\n                            ][\"type\"]\n                            == \"CC\"\n                        ):\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"][\"metricWeight\"]\n                                is None\n                                or ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"][\"radius\"]\n                                is None\n                            ):\n                                err_msg = (\n                                    \"Please specifiy metricWeight and radius for metric\"\n                                    \" CC of ANTs parameters in pipeline config.\"\n                                )\n                                raise RequiredFieldInvalid(err_msg)\n                            CC_para = []\n                            _metric = ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"metric\"]\n                            CC_para.append(\n                                f\"{_metric['metricWeight']},{_metric['radius']}\"\n                            )\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\n                                trans_index\n                            ][trans_type][\"metric\"] and ants_para[para_index][\n                                para_type\n                            ][trans_index][trans_type][\"metric\"][\n                                \"samplingStrategy\"\n                            ] in [\"None\", \"Regular\", \"Random\"]:\n                                CC_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"metric\"][\"samplingStrategy\"]\n                                    )\n                                )\n                            if (\n                                \"samplingPercentage\"\n                                in ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"]\n                                and ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"][\"samplingPercentage\"]\n                                is not None\n                            ):\n                                CC_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"metric\"][\"samplingPercentage\"]\n                                    )\n                                )\n                            CC_para = \",\".join([str(elem) for elem in CC_para])\n                            regcmd.append(\"--metric\")\n                            regcmd.append(\n                                f\"CC[{reference_skull},{moving_skull},{CC_para}]\"\n                            )\n\n                        if (\n                            \"convergence\"\n                            in ants_para[para_index][para_type][trans_index][trans_type]\n                        ):\n                            convergence_para = []\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"convergence\"][\"iteration\"]\n                                is None\n                            ):\n                                err_msg = (\n                                    \"Please specifiy convergence iteration of ANTs\"\n                                    \" parameters in pipeline config.\"\n                                )\n                                raise RequiredFieldInvalid(err_msg)\n                            convergence_para.append(\n                                str(\n                                    ants_para[para_index][para_type][trans_index][\n                                        trans_type\n                                    ][\"convergence\"][\"iteration\"]\n                                )\n                            )\n                            if (\n                                \"convergenceThreshold\"\n                                in ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"convergence\"]\n                                and ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"convergence\"][\"convergenceThreshold\"]\n                                is not None\n                            ):\n                                convergence_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"convergence\"][\"convergenceThreshold\"]\n                                    )\n                                )\n                            if (\n                                \"convergenceWindowSize\"\n                                in ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"convergence\"]\n                                and ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"convergence\"][\"convergenceWindowSize\"]\n                                is not None\n                            ):\n                                convergence_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"convergence\"][\"convergenceWindowSize\"]\n                                    )\n                                )\n                            convergence_para = \",\".join(\n                                [str(elem) for elem in convergence_para]\n                            )\n                            regcmd.append(\"--convergence\")\n                            regcmd.append(f\"[{convergence_para}]\")\n\n                        if (\n                            \"smoothing-sigmas\"\n                            in ants_para[para_index][para_type][trans_index][trans_type]\n                            and ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"smoothing-sigmas\"]\n                            is not None\n                        ):\n                            regcmd.append(\"--smoothing-sigmas\")\n                            regcmd.append(\n                                str(\n                                    ants_para[para_index][para_type][trans_index][\n                                        trans_type\n                                    ][\"smoothing-sigmas\"]\n                                )\n                            )\n\n                        if (\n                            \"shrink-factors\"\n                            in ants_para[para_index][para_type][trans_index][trans_type]\n                            and ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"shrink-factors\"]\n                            is not None\n                        ):\n                            regcmd.append(\"--shrink-factors\")\n                            regcmd.append(\n                                str(\n                                    ants_para[para_index][para_type][trans_index][\n                                        trans_type\n                                    ][\"shrink-factors\"]\n                                )\n                            )\n\n                        if (\n                            \"use-histogram-matching\"\n                            in ants_para[para_index][para_type][trans_index][trans_type]\n                        ):\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"use-histogram-matching\"]:\n                                regcmd.append(\"--use-histogram-matching\")\n                                regcmd.append(\"1\")\n\n                        if (\n                            \"winsorize-image-intensities\"\n                            in ants_para[para_index][para_type][trans_index][trans_type]\n                            and ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"winsorize-image-intensities\"][\"lowerQuantile\"]\n                            is not None\n                            and ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"winsorize-image-intensities\"][\"upperQuantile\"]\n                            is not None\n                        ):\n                            regcmd.append(\"--winsorize-image-intensities\")\n                            _quantile = ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"winsorize-image-intensities\"]\n                            regcmd.append(\n                                f\"[{_quantile['lowerQuantile']},{_quantile['upperQuantile']}]\"\n                            )\n\n                        if (\n                            \"masks\"\n                            in ants_para[para_index][para_type][trans_index][trans_type]\n                            and ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"masks\"]\n                            is not None\n                        ):\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"masks\"]:\n                                regcmd.append(\"--masks\")\n                                regcmd.append(f\"[{reference_mask},{moving_mask}]\")\n                            else:\n                                regcmd.append(\"--masks\")\n                                regcmd.append(\"[NULL,NULL]\")\n\n            elif para_type == \"masks\":\n                # lesion preproc has\n                if fixed_image_mask is not None:\n                    regcmd.append(\"--masks\")\n                    regcmd.append(str(fixed_image_mask))\n                else:\n                    if (\n                        not ants_para[para_index][para_type][\"fixed_image_mask\"]\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\n                    ):\n                        err_msg = (\n                            \"Masks option in ANTs parameters:\"\n                            f\" {ants_para[para_index][para_type]} is not supported.\"\n                            \" Please set `fixed_image_mask` as True. Or set both\"\n                            \" `fixed_image_mask` and `moving_image_mask` as False\"\n                        )\n                        raise NotImplementedError(err_msg)\n                    if (\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\n                    ):\n                        regcmd.append(\"--masks\")\n                        regcmd.append(\n                            \"[\" + str(reference_mask) + \",\" + str(moving_mask) + \"]\"\n                        )\n                    elif (\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\n                    ):\n                        regcmd.append(\"--masks\")\n                        regcmd.append(\"[\" + str(reference_mask) + \"]\")\n                    else:\n                        continue\n\n    if interp is not None:\n        regcmd.append(\"--interpolation\")\n        regcmd.append(f\"{interp}\")\n\n    regcmd.append(\"--output\")\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\n\n    # write out the actual command-line entry for testing/validation later\n    command_file = os.path.join(os.getcwd(), \"command.txt\")\n    with open(command_file, \"wt\") as f:\n        f.write(\" \".join(regcmd))\n\n    try:\n        subprocess.check_output(regcmd)\n    except Exception as e:\n        msg = (\n            \"[!] ANTS registration did not complete successfully.\"\n            f\"\\n\\nError details:\\n{e}\\n{e.output}\\n\"\n        )\n        raise RuntimeError(msg)\n\n    warp_list = []\n    warped_image = None\n\n    files = [f for f in os.listdir(\".\") if os.path.isfile(f)]\n\n    for f in files:\n        if (\"transform\" in f) and (\"Warped\" not in f):\n            warp_list.append(os.getcwd() + \"/\" + f)\n        if \"Warped\" in f:\n            warped_image = os.getcwd() + \"/\" + f\n\n    if not warped_image:\n        msg = (\n            \"\\n\\n[!] No registration output file found. ANTS registration may not have\"\n            \" completed successfully.\\n\\n\"\n        )\n        raise RuntimeError(msg)\n\n    return warp_list, warped_image\n",
                  "moving_brain": "[Undefined]",
                  "reference_brain": "[Undefined]",
                  "moving_skull": "[Undefined]",
                  "reference_skull": "[Undefined]",
                  "ants_para": "[Undefined]",
                  "moving_mask": "[Undefined]",
                  "reference_mask": "[Undefined]",
                  "fixed_image_mask": "[Undefined]",
                  "interp": "[Undefined]",
                  "reg_with_skull": "[Undefined]"
                },
                "outputs": {
                  "warp_list": "[Undefined]",
                  "warped_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_forward_initial",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    \"\"\"Select the warp from the warp list.\"\"\"\n    selected_warp = None\n    for warp in warp_list:\n        if selection == \"Warp\":\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\n                selected_warp = warp\n        elif selection in warp:\n            selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Initial"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_forward_rigid",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    \"\"\"Select the warp from the warp list.\"\"\"\n    selected_warp = None\n    for warp in warp_list:\n        if selection == \"Warp\":\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\n                selected_warp = warp\n        elif selection in warp:\n            selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Rigid"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_forward_affine",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    \"\"\"Select the warp from the warp list.\"\"\"\n    selected_warp = None\n    for warp in warp_list:\n        if selection == \"Warp\":\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\n                selected_warp = warp\n        elif selection in warp:\n            selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Affine"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_forward_warp",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    \"\"\"Select the warp from the warp list.\"\"\"\n    selected_warp = None\n    for warp in warp_list:\n        if selection == \"Warp\":\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\n                selected_warp = warp\n        elif selection in warp:\n            selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Warp"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_inverse_warp",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    \"\"\"Select the warp from the warp list.\"\"\"\n    selected_warp = None\n    for warp in warp_list:\n        if selection == \"Warp\":\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\n                selected_warp = warp\n        elif selection in warp:\n            selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Inverse"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "ants_initial_xfm": "[Undefined]",
                  "ants_rigid_xfm": "[Undefined]",
                  "ants_affine_xfm": "[Undefined]",
                  "warp_field": "[Undefined]",
                  "inverse_warp_field": "[Undefined]",
                  "composite_transform": "[Undefined]",
                  "wait": "[Undefined]",
                  "normalized_output_brain": "[Undefined]"
                },
                "outputs": {
                  "ants_initial_xfm": "[Undefined]",
                  "ants_rigid_xfm": "[Undefined]",
                  "ants_affine_xfm": "[Undefined]",
                  "warp_field": "[Undefined]",
                  "inverse_warp_field": "[Undefined]",
                  "composite_transform": "[Undefined]",
                  "wait": "[Undefined]",
                  "normalized_output_brain": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "calc_ants_warp"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_forward_initial"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_forward_rigid"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_forward_affine"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_forward_warp"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_inverse_warp"
              },
              {
                "origin": "calc_ants_warp",
                "target": "outputspec"
              },
              {
                "origin": "select_forward_initial",
                "target": "outputspec"
              },
              {
                "origin": "select_forward_rigid",
                "target": "outputspec"
              },
              {
                "origin": "select_forward_affine",
                "target": "outputspec"
              },
              {
                "origin": "select_forward_warp",
                "target": "outputspec"
              },
              {
                "origin": "select_inverse_warp",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "write_composite_linear_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-T1w_to-template_mode-image_desc-linear_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_transforms",
            "type": "node",
            "inputs": {
              "function_str": "def check_transforms(transform_list):\n    \"\"\"Check if the transform list is empty.\"\"\"\n    transform_number = list(filter(None, transform_list))\n    return [(transform_number[index]) for index in range(len(transform_number))], len(\n        transform_number\n    )\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "checked_transform_list": "[Undefined]",
              "list_length": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_invlinear_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-template_to-T1w_mode-image_desc-linear_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_inv_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_inv_transforms",
            "type": "node",
            "inputs": {
              "function_str": "def check_transforms(transform_list):\n    \"\"\"Check if the transform list is empty.\"\"\"\n    transform_number = list(filter(None, transform_list))\n    return [(transform_number[index]) for index in range(len(transform_number))], len(\n        transform_number\n    )\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "checked_transform_list": "[Undefined]",
              "list_length": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inverse_transform_flags",
            "type": "node",
            "inputs": {
              "function_str": "def generate_inverse_transform_flags(transform_list):\n    \"\"\"List whether each transform has an inverse.\"\"\"\n    inverse_transform_flags = []\n    for transform in transform_list:\n        # check `blip_warp_inverse` file name and rename it\n        if \"WARPINV\" in transform:\n            inverse_transform_flags.append(False)\n        if \"updated_affine\" in transform:\n            inverse_transform_flags.append(True)\n        if \"Initial\" in transform:\n            inverse_transform_flags.append(True)\n        if \"Rigid\" in transform:\n            inverse_transform_flags.append(True)\n        if \"Affine\" in transform:\n            inverse_transform_flags.append(True)\n        if \"InverseWarp\" in transform:\n            inverse_transform_flags.append(False)\n    return inverse_transform_flags\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "inverse_transform_flags": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-T1w_to-template_mode-image_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_all_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]",
              "in4": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_all_transforms",
            "type": "node",
            "inputs": {
              "function_str": "def check_transforms(transform_list):\n    \"\"\"Check if the transform list is empty.\"\"\"\n    transform_number = list(filter(None, transform_list))\n    return [(transform_number[index]) for index in range(len(transform_number))], len(\n        transform_number\n    )\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "checked_transform_list": "[Undefined]",
              "list_length": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_inv_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-template_to-T1w_mode-image_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_all_inv_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]",
              "in4": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_all_inv_transforms",
            "type": "node",
            "inputs": {
              "function_str": "def check_transforms(transform_list):\n    \"\"\"Check if the transform list is empty.\"\"\"\n    transform_number = list(filter(None, transform_list))\n    return [(transform_number[index]) for index in range(len(transform_number))], len(\n        transform_number\n    )\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "checked_transform_list": "[Undefined]",
              "list_length": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inverse_all_transform_flags",
            "type": "node",
            "inputs": {
              "function_str": "def generate_inverse_transform_flags(transform_list):\n    \"\"\"List whether each transform has an inverse.\"\"\"\n    inverse_transform_flags = []\n    for transform in transform_list:\n        # check `blip_warp_inverse` file name and rename it\n        if \"WARPINV\" in transform:\n            inverse_transform_flags.append(False)\n        if \"updated_affine\" in transform:\n            inverse_transform_flags.append(True)\n        if \"Initial\" in transform:\n            inverse_transform_flags.append(True)\n        if \"Rigid\" in transform:\n            inverse_transform_flags.append(True)\n        if \"Affine\" in transform:\n            inverse_transform_flags.append(True)\n        if \"InverseWarp\" in transform:\n            inverse_transform_flags.append(False)\n    return inverse_transform_flags\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "inverse_transform_flags": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "anat_mni_ants_register"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_linear_xfm"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_invlinear_xfm"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_xfm"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_inv_xfm"
          },
          {
            "origin": "anat_mni_ants_register",
            "target": "collect_transforms"
          },
          {
            "origin": "anat_mni_ants_register",
            "target": "collect_inv_transforms"
          },
          {
            "origin": "anat_mni_ants_register",
            "target": "collect_all_transforms"
          },
          {
            "origin": "anat_mni_ants_register",
            "target": "collect_all_inv_transforms"
          },
          {
            "origin": "collect_transforms",
            "target": "check_transforms"
          },
          {
            "origin": "check_transforms",
            "target": "write_composite_linear_xfm"
          },
          {
            "origin": "collect_inv_transforms",
            "target": "check_inv_transforms"
          },
          {
            "origin": "check_inv_transforms",
            "target": "write_composite_invlinear_xfm"
          },
          {
            "origin": "check_inv_transforms",
            "target": "inverse_transform_flags"
          },
          {
            "origin": "inverse_transform_flags",
            "target": "write_composite_invlinear_xfm"
          },
          {
            "origin": "collect_all_transforms",
            "target": "check_all_transforms"
          },
          {
            "origin": "check_all_transforms",
            "target": "write_composite_xfm"
          },
          {
            "origin": "collect_all_inv_transforms",
            "target": "check_all_inv_transforms"
          },
          {
            "origin": "check_all_inv_transforms",
            "target": "write_composite_inv_xfm"
          },
          {
            "origin": "check_all_inv_transforms",
            "target": "inverse_all_transform_flags"
          },
          {
            "origin": "inverse_all_transform_flags",
            "target": "write_composite_inv_xfm"
          }
        ]
      },
      {
        "name": "resampled_T1w-brain-template",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "1mm",
          "template": "/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz",
          "template_name": "T1w-brain-template",
          "tag": "resolution_for_anat"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "resampled_T1w-template",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "1mm",
          "template": "/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "template_name": "T1w-template",
          "tag": "resolution_for_anat"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "resampled_T1w-brain-template-mask",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "1mm",
          "template": "/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain_mask.nii.gz",
          "template_name": "T1w-brain-template-mask",
          "tag": "resolution_for_anat"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "warp_wholehead_T1w_to_T1template_55",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'input_image': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'reference': '[Undefined]', 'transform': '[Undefined]'}",
          "apply_warp_warp_wholehead_T1w_to_T1template_55": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
          "interp_string": "{'function_str': 'def interpolation_string(interpolation, reg_tool):\\n    \"\"\"Translate interpolation string to reg_tool-specific string.\"\"\"\\n    if reg_tool == \"ants\":\\n        pass\\n    elif reg_tool == \"fsl\":\\n        # translate to FSL\\n        # warning: flirt requires \\'nearestneighbour\\', but FSL applywarp uses\\n        #          \\'nn\\', so this is designed for applywarp, as all FSL xfm\\'s\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace(\"NearestNeighbor\", \"nn\")\\n    return interpolation\\n', 'reg_tool': 'ants'}",
          "single_ants_xfm_to_list": "{'function_str': 'def single_ants_xfm_to_list(transform):\\n    \"\"\"Convert a single ANTs transform to a list.\"\"\"\\n    return [transform]\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}",
          "apply_warp_warp_wholehead_T1w_to_T1template_55": "{'output_image': None}",
          "interp_string": "{'interpolation': None}",
          "single_ants_xfm_to_list": "{'transform_list': None}",
          "outputspec": "{'output_image': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "LanczosWindowedSinc"
            },
            "outputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "apply_warp_warp_wholehead_T1w_to_T1template_55",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "[Undefined]",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "[Undefined]",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "interp_string",
            "type": "node",
            "inputs": {
              "function_str": "def interpolation_string(interpolation, reg_tool):\n    \"\"\"Translate interpolation string to reg_tool-specific string.\"\"\"\n    if reg_tool == \"ants\":\n        pass\n    elif reg_tool == \"fsl\":\n        # translate to FSL\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\n        #          in C-PAC are now converted to .nii.gz\n        interpolation = interpolation.replace(\"NearestNeighbor\", \"nn\")\n    return interpolation\n",
              "interpolation": "[Undefined]",
              "reg_tool": "ants"
            },
            "outputs": {
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "single_ants_xfm_to_list",
            "type": "node",
            "inputs": {
              "function_str": "def single_ants_xfm_to_list(transform):\n    \"\"\"Convert a single ANTs transform to a list.\"\"\"\n    return [transform]\n",
              "transform": "[Undefined]"
            },
            "outputs": {
              "transform_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "output_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "apply_warp_warp_wholehead_T1w_to_T1template_55"
          },
          {
            "origin": "inputspec",
            "target": "interp_string"
          },
          {
            "origin": "inputspec",
            "target": "single_ants_xfm_to_list"
          },
          {
            "origin": "apply_warp_warp_wholehead_T1w_to_T1template_55",
            "target": "outputspec"
          },
          {
            "origin": "interp_string",
            "target": "apply_warp_warp_wholehead_T1w_to_T1template_55"
          },
          {
            "origin": "single_ants_xfm_to_list",
            "target": "apply_warp_warp_wholehead_T1w_to_T1template_55"
          }
        ]
      },
      {
        "name": "write_composite_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-T1w_to-template_mode-image_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "warp_T1mask_to_T1template_59",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}",
          "apply_warp_warp_T1mask_to_T1template_59": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
          "interp_string": "{'function_str': 'def interpolation_string(interpolation, reg_tool):\\n    \"\"\"Translate interpolation string to reg_tool-specific string.\"\"\"\\n    if reg_tool == \"ants\":\\n        pass\\n    elif reg_tool == \"fsl\":\\n        # translate to FSL\\n        # warning: flirt requires \\'nearestneighbour\\', but FSL applywarp uses\\n        #          \\'nn\\', so this is designed for applywarp, as all FSL xfm\\'s\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace(\"NearestNeighbor\", \"nn\")\\n    return interpolation\\n', 'reg_tool': 'ants'}",
          "single_ants_xfm_to_list": "{'function_str': 'def single_ants_xfm_to_list(transform):\\n    \"\"\"Convert a single ANTs transform to a list.\"\"\"\\n    return [transform]\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}",
          "apply_warp_warp_T1mask_to_T1template_59": "{'output_image': None}",
          "interp_string": "{'interpolation': None}",
          "single_ants_xfm_to_list": "{'transform_list': None}",
          "outputspec": "{'output_image': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "NearestNeighbor"
            },
            "outputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "apply_warp_warp_T1mask_to_T1template_59",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "[Undefined]",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "[Undefined]",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "interp_string",
            "type": "node",
            "inputs": {
              "function_str": "def interpolation_string(interpolation, reg_tool):\n    \"\"\"Translate interpolation string to reg_tool-specific string.\"\"\"\n    if reg_tool == \"ants\":\n        pass\n    elif reg_tool == \"fsl\":\n        # translate to FSL\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\n        #          in C-PAC are now converted to .nii.gz\n        interpolation = interpolation.replace(\"NearestNeighbor\", \"nn\")\n    return interpolation\n",
              "interpolation": "[Undefined]",
              "reg_tool": "ants"
            },
            "outputs": {
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "single_ants_xfm_to_list",
            "type": "node",
            "inputs": {
              "function_str": "def single_ants_xfm_to_list(transform):\n    \"\"\"Convert a single ANTs transform to a list.\"\"\"\n    return [transform]\n",
              "transform": "[Undefined]"
            },
            "outputs": {
              "transform_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "output_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "apply_warp_warp_T1mask_to_T1template_59"
          },
          {
            "origin": "inputspec",
            "target": "interp_string"
          },
          {
            "origin": "inputspec",
            "target": "single_ants_xfm_to_list"
          },
          {
            "origin": "apply_warp_warp_T1mask_to_T1template_59",
            "target": "outputspec"
          },
          {
            "origin": "interp_string",
            "target": "apply_warp_warp_T1mask_to_T1template_59"
          },
          {
            "origin": "single_ants_xfm_to_list",
            "target": "apply_warp_warp_T1mask_to_T1template_59"
          }
        ]
      },
      {
        "name": "segment_63",
        "type": "node",
        "inputs": {
          "in_files": "[Undefined]",
          "out_basename": "segment",
          "number_classes": "[Undefined]",
          "output_biasfield": "[Undefined]",
          "output_biascorrected": "[Undefined]",
          "img_type": "1",
          "bias_iters": "[Undefined]",
          "bias_lowpass": "[Undefined]",
          "init_seg_smooth": "[Undefined]",
          "segments": "True",
          "init_transform": "[Undefined]",
          "other_priors": "[Undefined]",
          "no_pve": "[Undefined]",
          "no_bias": "[Undefined]",
          "use_priors": "[Undefined]",
          "segment_iters": "[Undefined]",
          "mixel_smooth": "[Undefined]",
          "iters_afterbias": "[Undefined]",
          "hyper": "[Undefined]",
          "verbose": "[Undefined]",
          "manual_seg": "[Undefined]",
          "probability_maps": "True",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "tissue_class_map": "[Undefined]",
          "tissue_class_files": "[Undefined]",
          "restored_image": "[Undefined]",
          "mixeltype": "[Undefined]",
          "partial_volume_map": "[Undefined]",
          "partial_volume_files": "[Undefined]",
          "bias_field": "[Undefined]",
          "probability_maps": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_pve_csf_63",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "-thr 0.5 -uthr 1.5 -bin",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_pve_gm_63",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "-thr 1.5 -uthr 2.5 -bin",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_pve_wm_63",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "-thr 2.5 -uthr 3.5 -bin",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "CSF_63",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'brain': '[Undefined]', 'brain_mask': '[Undefined]', 'erosion_mm': '[Undefined]', 'erosion_prop': '[Undefined]', 'mask_erosion_mm': '[Undefined]', 'probability_tissue_map': '[Undefined]', 'template_to_T1_xfm': '[Undefined]', 'threshold': 0.95, 'tissue_class_file': '[Undefined]', 'tissue_prior': '[Undefined]'}",
          "threshold_segmentmap_CSF_63": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "binarize_CSF_63": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-bin ', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "outputspec": "{'probability_tissue_map': '[Undefined]'}"
        },
        "outputs": {
          "inputspec": "{'brain': None, 'brain_mask': None, 'erosion_mm': None, 'erosion_prop': None, 'mask_erosion_mm': None, 'probability_tissue_map': None, 'template_to_T1_xfm': None, 'threshold': None, 'tissue_class_file': None, 'tissue_prior': None}",
          "threshold_segmentmap_CSF_63": "{'out_file': None}",
          "binarize_CSF_63": "{'out_file': None}",
          "outputspec": "{'probability_tissue_map': None, 'segment_mask': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "tissue_prior": "[Undefined]",
              "threshold": "0.95",
              "erosion_prop": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "brain": "[Undefined]",
              "brain_mask": "[Undefined]",
              "tissue_class_file": "[Undefined]",
              "probability_tissue_map": "[Undefined]",
              "template_to_T1_xfm": "[Undefined]"
            },
            "outputs": {
              "tissue_prior": "[Undefined]",
              "threshold": "[Undefined]",
              "erosion_prop": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "brain": "[Undefined]",
              "brain_mask": "[Undefined]",
              "tissue_class_file": "[Undefined]",
              "probability_tissue_map": "[Undefined]",
              "template_to_T1_xfm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "threshold_segmentmap_CSF_63",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "[Undefined]",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "binarize_CSF_63",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "-bin ",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "segment_mask": "[Undefined]",
              "probability_tissue_map": "[Undefined]"
            },
            "outputs": {
              "segment_mask": "[Undefined]",
              "probability_tissue_map": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "threshold_segmentmap_CSF_63"
          },
          {
            "origin": "threshold_segmentmap_CSF_63",
            "target": "binarize_CSF_63"
          },
          {
            "origin": "binarize_CSF_63",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "GM_63",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'brain': '[Undefined]', 'brain_mask': '[Undefined]', 'erosion_mm': '[Undefined]', 'erosion_prop': '[Undefined]', 'mask_erosion_mm': '[Undefined]', 'probability_tissue_map': '[Undefined]', 'template_to_T1_xfm': '[Undefined]', 'threshold': 0.95, 'tissue_class_file': '[Undefined]', 'tissue_prior': '[Undefined]'}",
          "threshold_segmentmap_GM_63": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "binarize_GM_63": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-bin ', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "outputspec": "{'probability_tissue_map': '[Undefined]'}"
        },
        "outputs": {
          "inputspec": "{'brain': None, 'brain_mask': None, 'erosion_mm': None, 'erosion_prop': None, 'mask_erosion_mm': None, 'probability_tissue_map': None, 'template_to_T1_xfm': None, 'threshold': None, 'tissue_class_file': None, 'tissue_prior': None}",
          "threshold_segmentmap_GM_63": "{'out_file': None}",
          "binarize_GM_63": "{'out_file': None}",
          "outputspec": "{'probability_tissue_map': None, 'segment_mask': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "tissue_prior": "[Undefined]",
              "threshold": "0.95",
              "erosion_prop": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "brain": "[Undefined]",
              "brain_mask": "[Undefined]",
              "tissue_class_file": "[Undefined]",
              "probability_tissue_map": "[Undefined]",
              "template_to_T1_xfm": "[Undefined]"
            },
            "outputs": {
              "tissue_prior": "[Undefined]",
              "threshold": "[Undefined]",
              "erosion_prop": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "brain": "[Undefined]",
              "brain_mask": "[Undefined]",
              "tissue_class_file": "[Undefined]",
              "probability_tissue_map": "[Undefined]",
              "template_to_T1_xfm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "threshold_segmentmap_GM_63",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "[Undefined]",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "binarize_GM_63",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "-bin ",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "segment_mask": "[Undefined]",
              "probability_tissue_map": "[Undefined]"
            },
            "outputs": {
              "segment_mask": "[Undefined]",
              "probability_tissue_map": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "threshold_segmentmap_GM_63"
          },
          {
            "origin": "threshold_segmentmap_GM_63",
            "target": "binarize_GM_63"
          },
          {
            "origin": "binarize_GM_63",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "WM_63",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'brain': '[Undefined]', 'brain_mask': '[Undefined]', 'erosion_mm': '[Undefined]', 'erosion_prop': '[Undefined]', 'mask_erosion_mm': '[Undefined]', 'probability_tissue_map': '[Undefined]', 'template_to_T1_xfm': '[Undefined]', 'threshold': 0.95, 'tissue_class_file': '[Undefined]', 'tissue_prior': '[Undefined]'}",
          "threshold_segmentmap_WM_63": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "binarize_WM_63": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-bin ', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "outputspec": "{'probability_tissue_map': '[Undefined]'}"
        },
        "outputs": {
          "inputspec": "{'brain': None, 'brain_mask': None, 'erosion_mm': None, 'erosion_prop': None, 'mask_erosion_mm': None, 'probability_tissue_map': None, 'template_to_T1_xfm': None, 'threshold': None, 'tissue_class_file': None, 'tissue_prior': None}",
          "threshold_segmentmap_WM_63": "{'out_file': None}",
          "binarize_WM_63": "{'out_file': None}",
          "outputspec": "{'probability_tissue_map': None, 'segment_mask': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "tissue_prior": "[Undefined]",
              "threshold": "0.95",
              "erosion_prop": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "brain": "[Undefined]",
              "brain_mask": "[Undefined]",
              "tissue_class_file": "[Undefined]",
              "probability_tissue_map": "[Undefined]",
              "template_to_T1_xfm": "[Undefined]"
            },
            "outputs": {
              "tissue_prior": "[Undefined]",
              "threshold": "[Undefined]",
              "erosion_prop": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "brain": "[Undefined]",
              "brain_mask": "[Undefined]",
              "tissue_class_file": "[Undefined]",
              "probability_tissue_map": "[Undefined]",
              "template_to_T1_xfm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "threshold_segmentmap_WM_63",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "[Undefined]",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "binarize_WM_63",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "-bin ",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "segment_mask": "[Undefined]",
              "probability_tissue_map": "[Undefined]"
            },
            "outputs": {
              "segment_mask": "[Undefined]",
              "probability_tissue_map": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "threshold_segmentmap_WM_63"
          },
          {
            "origin": "threshold_segmentmap_WM_63",
            "target": "binarize_WM_63"
          },
          {
            "origin": "binarize_WM_63",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "get_csf_63",
        "type": "node",
        "inputs": {
          "function_str": "def pick_wm_prob_0(probability_maps):\n    \"\"\"Returns the csf probability map from the list of segmented\n    probability maps.\n\n    Parameters\n    ----------\n    probability_maps : list (string)\n        List of Probability Maps\n\n    Returns\n    -------\n    file : string\n        Path to segment_prob_0.nii.gz is returned\n    \"\"\"\n    if isinstance(probability_maps, list):\n        if len(probability_maps) == 1:\n            probability_maps = probability_maps[0]\n        for filename in probability_maps:\n            if filename.endswith(\"prob_0.nii.gz\"):\n                return filename\n    return None\n",
          "probability_maps": "[Undefined]"
        },
        "outputs": {
          "filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_deoblique_2",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "deoblique": "True",
          "xorigin": "[Undefined]",
          "yorigin": "[Undefined]",
          "zorigin": "[Undefined]",
          "duporigin_file": "[Undefined]",
          "xdel": "[Undefined]",
          "ydel": "[Undefined]",
          "zdel": "[Undefined]",
          "xyzscale": "[Undefined]",
          "space": "[Undefined]",
          "atrcopy": "[Undefined]",
          "atrstring": "[Undefined]",
          "atrfloat": "[Undefined]",
          "atrint": "[Undefined]",
          "saveatr": "[Undefined]",
          "nosaveatr": "[Undefined]",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_reorient_2",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "orientation": "RPI",
          "resample_mode": "[Undefined]",
          "voxel_size": "[Undefined]",
          "master": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "edit_func_81",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'func': '[Undefined]', 'start_idx': 2, 'stop_idx': None}",
          "func_get_idx": "{'function_str': 'def get_idx(in_files, stop_idx=None, start_idx=None):\\n    \"\"\"Get the first and the last slice for the functional run.\\n\\n    Verify the user specified first and last slice. If the values are not valid,\\n    calculate and return the very first and the last slice.\\n\\n    Parameters\\n    ----------\\n    in_file : str (nifti file)\\n       Path to input functional run\\n\\n    stop_idx : int\\n        Last volume to be considered, specified by user\\n        in the configuration file\\n\\n    stop_idx : int\\n        First volume to be considered, specified by user\\n        in the configuration file\\n\\n    Returns\\n    -------\\n    stop_idx :  int\\n        Value of first slice to consider for the functional run\\n\\n    start_idx : int\\n        Value of last slice to consider for the functional run\\n\\n    \"\"\"\\n    # Import packages\\n    from nibabel import load\\n\\n    # Init variables\\n    img = load(in_files)\\n    hdr = img.header\\n    shape = hdr.get_data_shape()\\n\\n    # Check to make sure the input file is 4-dimensional\\n    if len(shape) != 4:  # noqa: PLR2004\\n        raise TypeError(\"Input nifti file: %s is not a 4D file\" % in_files)\\n    # Grab the number of volumes\\n    nvols = int(hdr.get_data_shape()[3])\\n\\n    if (start_idx is None) or (int(start_idx) < 0) or (int(start_idx) > (nvols - 1)):\\n        startidx = 0\\n    else:\\n        startidx = int(start_idx)\\n\\n    if (stop_idx in [None, \"End\"]) or (int(stop_idx) > (nvols - 1)):\\n        stopidx = nvols - 1\\n    else:\\n        stopidx = int(stop_idx)\\n\\n    return stopidx, startidx\\n'}",
          "func_drop_trs": "{'args': '[Undefined]', 'environ': {}, 'expr': 'a', 'in_file_b': '[Undefined]', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'func': None, 'start_idx': None, 'stop_idx': None}",
          "func_get_idx": "{'startidx': None, 'stopidx': None}",
          "func_drop_trs": "{'out_file': None}",
          "outputspec": "{'edited_func': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "func": "[Undefined]",
              "start_idx": "2",
              "stop_idx": "None"
            },
            "outputs": {
              "func": "[Undefined]",
              "start_idx": "[Undefined]",
              "stop_idx": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "func_get_idx",
            "type": "node",
            "inputs": {
              "function_str": "def get_idx(in_files, stop_idx=None, start_idx=None):\n    \"\"\"Get the first and the last slice for the functional run.\n\n    Verify the user specified first and last slice. If the values are not valid,\n    calculate and return the very first and the last slice.\n\n    Parameters\n    ----------\n    in_file : str (nifti file)\n       Path to input functional run\n\n    stop_idx : int\n        Last volume to be considered, specified by user\n        in the configuration file\n\n    stop_idx : int\n        First volume to be considered, specified by user\n        in the configuration file\n\n    Returns\n    -------\n    stop_idx :  int\n        Value of first slice to consider for the functional run\n\n    start_idx : int\n        Value of last slice to consider for the functional run\n\n    \"\"\"\n    # Import packages\n    from nibabel import load\n\n    # Init variables\n    img = load(in_files)\n    hdr = img.header\n    shape = hdr.get_data_shape()\n\n    # Check to make sure the input file is 4-dimensional\n    if len(shape) != 4:  # noqa: PLR2004\n        raise TypeError(\"Input nifti file: %s is not a 4D file\" % in_files)\n    # Grab the number of volumes\n    nvols = int(hdr.get_data_shape()[3])\n\n    if (start_idx is None) or (int(start_idx) < 0) or (int(start_idx) > (nvols - 1)):\n        startidx = 0\n    else:\n        startidx = int(start_idx)\n\n    if (stop_idx in [None, \"End\"]) or (int(stop_idx) > (nvols - 1)):\n        stopidx = nvols - 1\n    else:\n        stopidx = int(stop_idx)\n\n    return stopidx, startidx\n",
              "in_files": "[Undefined]",
              "stop_idx": "[Undefined]",
              "start_idx": "[Undefined]"
            },
            "outputs": {
              "stopidx": "[Undefined]",
              "startidx": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "func_drop_trs",
            "type": "node",
            "inputs": {
              "in_file_a": "[Undefined]",
              "in_file_b": "[Undefined]",
              "in_file_c": "[Undefined]",
              "out_file": "[Undefined]",
              "expr": "a",
              "start_idx": "[Undefined]",
              "stop_idx": "[Undefined]",
              "single_idx": "[Undefined]",
              "overwrite": "[Undefined]",
              "other": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "edited_func": "[Undefined]"
            },
            "outputs": {
              "edited_func": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "func_get_idx"
          },
          {
            "origin": "inputspec",
            "target": "func_drop_trs"
          },
          {
            "origin": "func_get_idx",
            "target": "func_drop_trs"
          },
          {
            "origin": "func_drop_trs",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "func_get_fmriprep_ref_84",
        "type": "node",
        "inputs": {
          "function_str": "def estimate_reference_image(in_file):\n    \"\"\"fMRIPrep-style BOLD reference.\n\n        Generate a reference 3D map from BOLD and SBRef EPI images for BOLD datasets.\n\n        Given a 4D BOLD file[...], estimate a reference\n        image for subsequent motion estimation and coregistration steps.\n        For the case of BOLD datasets, it estimates a number of T1w saturated volumes\n        (non-steady state at the beginning of the scan) and calculates the median\n        across them.\n        Otherwise (SBRefs or detected zero non-steady state frames), a median of\n        of a subset of motion corrected volumes is used.\n\n    Ref: https://github.com/nipreps/niworkflows/blob/6d4f2b5/niworkflows/interfaces/registration.py#L446-L549\n    \"\"\"\n    # STATEMENT OF CHANGES:\n    #     This function is derived from sources licensed under the Apache-2.0 terms,\n    #     and this function has been changed.\n\n    # CHANGES:\n    #     * Converted from a nipype.interfaces.base.SimpleInterface class to a function\n    #     * Removed 3D image capabilities (now requires 4D image for in_file)\n    #     * Modified docstring to reflect local changes\n    #     * Updated style to match C-PAC codebase\n\n    # ORIGINAL WORK'S ATTRIBUTION NOTICE:\n    #    Copyright (c) 2016, the CRN developers team.\n    #    All rights reserved.\n\n    #    Redistribution and use in source and binary forms, with or without\n    #    modification, are permitted provided that the following conditions are met:\n\n    #    * Redistributions of source code must retain the above copyright notice, this\n    #      list of conditions and the following disclaimer.\n\n    #    * Redistributions in binary form must reproduce the above copyright notice,\n    #      this list of conditions and the following disclaimer in the documentation\n    #      and/or other materials provided with the distribution.\n\n    #   * Neither the name of niworkflows nor the names of its\n    #      contributors may be used to endorse or promote products derived from\n    #      this software without specific prior written permission.\n\n    #    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    #    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    #    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n    #    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n    #    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n    #    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n    #    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n    #    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n    #    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n    #    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n    #    Licensed under the Apache License, Version 2.0 (the \"License\");\n    #    you may not use this file except in compliance with the License.\n    #    You may obtain a copy of the License at\n\n    #        http://www.apache.org/licenses/LICENSE-2.0\n\n    #    Unless required by applicable law or agreed to in writing, software\n    #    distributed under the License is distributed on an \"AS IS\" BASIS,\n    #    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    #    See the License for the specific language governing permissions and\n    #    limitations under the License.\n\n    # Modifications copyright (C) 2021 - 2024  C-PAC Developers\n    import os\n\n    import numpy as np\n    import nibabel as nib\n\n    ref_input = [in_file]\n    mc_out_file = \"bold_mc.nii.gz\"\n\n    # Build the nibabel spatial image we will work with\n    ref_im = []\n    for im_i in ref_input:\n        max_new_volumes = 50 - len(ref_im)\n        if max_new_volumes <= 0:\n            break\n        nib_i = nib.squeeze_image(nib.load(im_i))\n        if nib_i.dataobj.ndim == 3:  # noqa: PLR2004\n            ref_im.append(nib_i)\n        elif nib_i.dataobj.ndim == 4:  # noqa: PLR2004\n            ref_im += nib.four_to_three(nib_i.slicer[..., :max_new_volumes])\n    ref_im = nib.squeeze_image(nib.concat_images(ref_im))\n\n    out_file = os.path.join(os.getcwd(), \"ref_bold.nii.gz\")\n\n    # Slicing may induce inconsistencies with shape-dependent values in extensions.\n    # For now, remove all. If this turns out to be a mistake, we can select extensions\n    # that don't break pipeline stages.\n    ref_im.header.extensions.clear()\n\n    if ref_im.shape[-1] > 40:  # noqa: PLR2004\n        ref_im = nib.Nifti1Image(\n            ref_im.dataobj[:, :, :, 20:40], ref_im.affine, ref_im.header\n        )\n\n    ref_name = os.path.join(os.getcwd(), \"slice.nii.gz\")\n    ref_im.to_filename(ref_name)\n    os.system(f\"3dvolreg -Fourier -twopass -zpad 4 -prefix {mc_out_file} {ref_name}\")\n\n    mc_slice_nii = nib.load(mc_out_file)\n\n    median_image_data = np.median(mc_slice_nii.get_fdata(), axis=3)\n\n    nib.Nifti1Image(median_image_data, ref_im.affine, ref_im.header).to_filename(\n        out_file\n    )\n\n    return out_file\n",
          "in_file": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_motion_correct_mcflirt_87",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "cost": "[Undefined]",
          "bins": "[Undefined]",
          "dof": "[Undefined]",
          "ref_vol": "[Undefined]",
          "scaling": "[Undefined]",
          "smooth": "[Undefined]",
          "rotation": "[Undefined]",
          "stages": "[Undefined]",
          "init": "[Undefined]",
          "interpolation": "[Undefined]",
          "use_gradient": "[Undefined]",
          "use_contour": "[Undefined]",
          "mean_vol": "[Undefined]",
          "stats_imgs": "[Undefined]",
          "save_mats": "True",
          "save_plots": "True",
          "save_rms": "True",
          "ref_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]",
          "variance_img": "[Undefined]",
          "std_img": "[Undefined]",
          "mean_img": "[Undefined]",
          "par_file": "[Undefined]",
          "mat_file": "[Undefined]",
          "rms_files": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "norm_motion_params_87",
        "type": "node",
        "inputs": {
          "function_str": "def normalize_motion_parameters(in_file):\n    \"\"\"Convert FSL mcflirt motion parameters to AFNI space.\"\"\"\n    import os\n\n    import numpy as np\n\n    motion_params = np.genfromtxt(in_file).T\n    motion_params = np.vstack(\n        (\n            motion_params[2, :] * 180 / np.pi,\n            motion_params[0, :] * 180 / np.pi,\n            -motion_params[1, :] * 180 / np.pi,\n            motion_params[5, :],\n            motion_params[3, :],\n            -motion_params[4, :],\n        )\n    )\n    motion_params = np.transpose(motion_params)\n\n    out_file = os.path.join(os.getcwd(), \"motion_params.tsv\")\n    np.savetxt(out_file, motion_params)\n\n    return out_file\n",
          "in_file": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_mcflirt_rms_abs_87",
        "type": "node",
        "inputs": {
          "function_str": "def get_mcflirt_rms_abs(rms_files):\n    for path in rms_files:\n        if \"abs.rms\" in path:\n            abs_file = path\n        if \"rel.rms\" in path:\n            rels_file = path\n    return abs_file, rels_file\n",
          "rms_files": "[Undefined]"
        },
        "outputs": {
          "abs_file": "[Undefined]",
          "rels_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_slice_timing_correction_94",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'func_ts': '[Undefined]', 'tpattern': '[Undefined]', 'tr': '[Undefined]'}",
          "slice_timing": "{'args': '[Undefined]', 'environ': {}, 'ignore': '[Undefined]', 'interp': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'rlt': '[Undefined]', 'rltplus': '[Undefined]', 'slice_encoding_direction': 'k', 'slice_timing': '[Undefined]', 'tslice': '[Undefined]', 'tzero': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'func_ts': None, 'tpattern': None, 'tr': None}",
          "slice_timing": "{'out_file': None, 'timing_file': None}",
          "outputspec": "{'slice_time_corrected': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "func_ts": "[Undefined]",
              "tr": "[Undefined]",
              "tpattern": "[Undefined]"
            },
            "outputs": {
              "func_ts": "[Undefined]",
              "tr": "[Undefined]",
              "tpattern": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "slice_timing",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "tr": "[Undefined]",
              "tzero": "[Undefined]",
              "tslice": "[Undefined]",
              "ignore": "[Undefined]",
              "interp": "[Undefined]",
              "tpattern": "[Undefined]",
              "slice_timing": "[Undefined]",
              "slice_encoding_direction": "k",
              "rlt": "[Undefined]",
              "rltplus": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "timing_file": "[Undefined]",
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "slice_time_corrected": "[Undefined]"
            },
            "outputs": {
              "slice_time_corrected": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "slice_timing"
          },
          {
            "origin": "slice_timing",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "func_mean_97",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "mask": "[Undefined]",
          "options": "-mean",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_motion_correct_mcflirt_100",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "cost": "[Undefined]",
          "bins": "[Undefined]",
          "dof": "[Undefined]",
          "ref_vol": "[Undefined]",
          "scaling": "[Undefined]",
          "smooth": "[Undefined]",
          "rotation": "[Undefined]",
          "stages": "[Undefined]",
          "init": "[Undefined]",
          "interpolation": "[Undefined]",
          "use_gradient": "[Undefined]",
          "use_contour": "[Undefined]",
          "mean_vol": "[Undefined]",
          "stats_imgs": "[Undefined]",
          "save_mats": "True",
          "save_plots": "True",
          "save_rms": "True",
          "ref_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]",
          "variance_img": "[Undefined]",
          "std_img": "[Undefined]",
          "mean_img": "[Undefined]",
          "par_file": "[Undefined]",
          "mat_file": "[Undefined]",
          "rms_files": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "norm_motion_params_100",
        "type": "node",
        "inputs": {
          "function_str": "def normalize_motion_parameters(in_file):\n    \"\"\"Convert FSL mcflirt motion parameters to AFNI space.\"\"\"\n    import os\n\n    import numpy as np\n\n    motion_params = np.genfromtxt(in_file).T\n    motion_params = np.vstack(\n        (\n            motion_params[2, :] * 180 / np.pi,\n            motion_params[0, :] * 180 / np.pi,\n            -motion_params[1, :] * 180 / np.pi,\n            motion_params[5, :],\n            motion_params[3, :],\n            -motion_params[4, :],\n        )\n    )\n    motion_params = np.transpose(motion_params)\n\n    out_file = os.path.join(os.getcwd(), \"motion_params.tsv\")\n    np.savetxt(out_file, motion_params)\n\n    return out_file\n",
          "in_file": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_mcflirt_rms_abs_100",
        "type": "node",
        "inputs": {
          "function_str": "def get_mcflirt_rms_abs(rms_files):\n    for path in rms_files:\n        if \"abs.rms\" in path:\n            abs_file = path\n        if \"rel.rms\" in path:\n            rels_file = path\n    return abs_file, rels_file\n",
          "rms_files": "[Undefined]"
        },
        "outputs": {
          "abs_file": "[Undefined]",
          "rels_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "resampled_FSL-AFNI-bold-ref",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "2mm",
          "template": "/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz",
          "template_name": "FSL-AFNI-bold-ref",
          "tag": "func_preproc_outputs"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "init_aff_104",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "verbose": "True",
          "fixed_image": "[Undefined]",
          "moving_image": "[Undefined]",
          "fixed_image_mask": "[Undefined]",
          "moving_image_mask": "[Undefined]",
          "metric": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e434430>",
          "transform": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e4340b0>",
          "principal_axes": "False",
          "search_factor": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e038660>",
          "search_grid": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e038900>",
          "convergence": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e038a50>",
          "output_transform": "initialization.mat",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_transform": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "resampled_FSL-AFNI-brain-mask",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "2mm",
          "template": "/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain_mask.nii.gz",
          "template_name": "FSL-AFNI-brain-mask",
          "tag": "func_preproc_outputs"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "norm_104",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "fixed_image": "[Undefined]",
          "fixed_image_mask": "[Undefined]",
          "fixed_image_masks": "[Undefined]",
          "moving_image": "[Undefined]",
          "moving_image_mask": "[Undefined]",
          "moving_image_masks": "[Undefined]",
          "save_state": "[Undefined]",
          "restore_state": "[Undefined]",
          "initial_moving_transform": "[Undefined]",
          "invert_initial_moving_transform": "[Undefined]",
          "initial_moving_transform_com": "[Undefined]",
          "metric_item_trait": "[Undefined]",
          "metric_stage_trait": "[Undefined]",
          "metric": "['Mattes']",
          "metric_weight_item_trait": "1.0",
          "metric_weight_stage_trait": "[Undefined]",
          "metric_weight": "[1.0]",
          "radius_bins_item_trait": "5",
          "radius_bins_stage_trait": "[Undefined]",
          "radius_or_number_of_bins": "[64]",
          "sampling_strategy_item_trait": "[Undefined]",
          "sampling_strategy_stage_trait": "[Undefined]",
          "sampling_strategy": "['Random', 'Random']",
          "sampling_percentage_item_trait": "[Undefined]",
          "sampling_percentage_stage_trait": "[Undefined]",
          "sampling_percentage": "[0.2]",
          "use_estimate_learning_rate_once": "[Undefined]",
          "use_histogram_matching": "[True]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "write_composite_transform": "False",
          "collapse_output_transforms": "True",
          "initialize_transforms_per_stage": "False",
          "float": "True",
          "transforms": "['Affine']",
          "transform_parameters": "['<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211e038a50>']",
          "restrict_deformation": "[Undefined]",
          "number_of_iterations": "[[200]]",
          "smoothing_sigmas": "[[2.0]]",
          "sigma_units": "['mm', 'mm', 'mm']",
          "shrink_factors": "[[2]]",
          "convergence_threshold": "[1e-09]",
          "convergence_window_size": "[10]",
          "output_transform_prefix": "transform",
          "output_warped_image": "[Undefined]",
          "output_inverse_warped_image": "[Undefined]",
          "winsorize_upper_quantile": "0.98",
          "winsorize_lower_quantile": "0.05",
          "random_seed": "[Undefined]",
          "verbose": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "forward_transforms": "[Undefined]",
          "reverse_forward_transforms": "[Undefined]",
          "reverse_transforms": "[Undefined]",
          "forward_invert_flags": "[Undefined]",
          "reverse_forward_invert_flags": "[Undefined]",
          "reverse_invert_flags": "[Undefined]",
          "composite_transform": "[Undefined]",
          "inverse_composite_transform": "[Undefined]",
          "warped_image": "[Undefined]",
          "inverse_warped_image": "[Undefined]",
          "save_state": "[Undefined]",
          "metric_value": "[Undefined]",
          "elapsed_time": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "resampled_FSL-AFNI-brain-probseg",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "2mm",
          "template": "/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain_mask.nii.gz",
          "template_name": "FSL-AFNI-brain-probseg",
          "tag": "func_preproc_outputs"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "map_brainmask_104",
        "type": "node",
        "inputs": {
          "dimension": "[Undefined]",
          "input_image_type": "[Undefined]",
          "input_image": "[Undefined]",
          "output_image": "[Undefined]",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "BSpline",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "[Undefined]",
          "float": "True",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "binarize_mask_104",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "-thr 0.85 -bin",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "pre_mask_dilate_104",
        "type": "node",
        "inputs": {
          "operation": "max",
          "kernel_shape": "sphere",
          "kernel_size": "3.0",
          "kernel_file": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "char",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "print_header_104",
        "type": "node",
        "inputs": {
          "image": "[Undefined]",
          "what_information": "4",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "header": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "set_direction_104",
        "type": "node",
        "inputs": {
          "infile": "[Undefined]",
          "outfile": "[Undefined]",
          "direction": "[Undefined]",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "outfile": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "n4_correct_104",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image": "[Undefined]",
          "mask_image": "[Undefined]",
          "weight_image": "[Undefined]",
          "output_image": "[Undefined]",
          "bspline_fitting_distance": "200.0",
          "bspline_order": "[Undefined]",
          "shrink_factor": "[Undefined]",
          "n_iterations": "[Undefined]",
          "convergence_threshold": "[Undefined]",
          "save_bias": "False",
          "bias_image": "[Undefined]",
          "copy_header": "True",
          "rescale_intensities": "False",
          "histogram_sharpening": "[Undefined]",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]",
          "bias_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "skullstrip_first_pass_104",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "outline": "[Undefined]",
          "mask": "True",
          "skull": "[Undefined]",
          "no_output": "[Undefined]",
          "frac": "0.2",
          "vertical_gradient": "[Undefined]",
          "radius": "[Undefined]",
          "center": "[Undefined]",
          "threshold": "[Undefined]",
          "mesh": "[Undefined]",
          "robust": "[Undefined]",
          "padding": "[Undefined]",
          "remove_eyes": "[Undefined]",
          "surfaces": "[Undefined]",
          "t2_guided": "[Undefined]",
          "functional": "False",
          "reduce_bias": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]",
          "mask_file": "[Undefined]",
          "outline_file": "[Undefined]",
          "meshfile": "[Undefined]",
          "inskull_mask_file": "[Undefined]",
          "inskull_mesh_file": "[Undefined]",
          "outskull_mask_file": "[Undefined]",
          "outskull_mesh_file": "[Undefined]",
          "outskin_mask_file": "[Undefined]",
          "outskin_mesh_file": "[Undefined]",
          "skull_mask_file": "[Undefined]",
          "skull_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "skullstrip_first_dilate_104",
        "type": "node",
        "inputs": {
          "operation": "max",
          "kernel_shape": "sphere",
          "kernel_size": "6.0",
          "kernel_file": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "char",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "skullstrip_first_mask_104",
        "type": "node",
        "inputs": {
          "mask_file": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "unifize_104",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "uni.nii.gz",
          "t2": "True",
          "gm": "[Undefined]",
          "urad": "[Undefined]",
          "scale_file": "[Undefined]",
          "no_duplo": "[Undefined]",
          "epi": "[Undefined]",
          "rbt": "[Undefined]",
          "t2_up": "[Undefined]",
          "cl_frac": "[Undefined]",
          "quiet": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "-clfrac 0.2 -rbt 18.3 65.0 90.0",
          "environ": "{}"
        },
        "outputs": {
          "scale_file": "[Undefined]",
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "skullstrip_second_pass_104",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "brain_file": "[Undefined]",
          "clfrac": "[Undefined]",
          "dilate": "1",
          "erode": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]",
          "brain_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "combine_masks_104",
        "type": "node",
        "inputs": {
          "operation": "mul",
          "operand_file": "[Undefined]",
          "operand_value": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "extract_ref_brain_bold_104",
        "type": "node",
        "inputs": {
          "mask_file": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_extract_brain_111",
        "type": "node",
        "inputs": {
          "in_file_a": "[Undefined]",
          "in_file_b": "[Undefined]",
          "in_file_c": "[Undefined]",
          "out_file": "[Undefined]",
          "expr": "a*b",
          "start_idx": "[Undefined]",
          "stop_idx": "[Undefined]",
          "single_idx": "[Undefined]",
          "overwrite": "[Undefined]",
          "other": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "gen_motion_stats_115",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'mask': '[Undefined]', 'max_displacement': '[Undefined]', 'motion_correct': '[Undefined]', 'movement_parameters': '[Undefined]', 'rels_displacement': '[Undefined]', 'transformations': '[Undefined]'}",
          "cal_DVARS": "{'args': '[Undefined]', 'environ': {}, 'method': 'dvars', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'AFNI'}",
          "cal_DVARS_strip": "{'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.DVARS_strip_t0'}",
          "outputspec": "{}",
          "calculate_FD": "{'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_P'}",
          "calculate_FDJ": "{'calc_from': 'rms', 'center': '[Undefined]', 'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_J'}",
          "get_all_motion_parameters": "{'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.get_allmotion'}",
          "calc_motion_parameters": "{'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.gen_motion_parameters', 'motion_correct_tool': 'mcflirt'}",
          "calc_power_parameters": "{'fdj': '[Undefined]', 'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.gen_power_parameters', 'motion_correct_tool': 'mcflirt'}"
        },
        "outputs": {
          "inputspec": "{'mask': None, 'max_displacement': None, 'motion_correct': None, 'movement_parameters': None, 'rels_displacement': None, 'transformations': None}",
          "cal_DVARS": "{'out_file': None}",
          "cal_DVARS_strip": "{'DVARS_val': None, 'out_file': None}",
          "outputspec": "{'DVARS_1D': None, 'FDJ_1D': None, 'FDP_1D': None, 'desc-summary_motion': None, 'motion': None, 'motion_params': None, 'power_params': None}",
          "calculate_FD": "{'fd': None, 'out_file': None}",
          "calculate_FDJ": "{'fd': None, 'out_file': None}",
          "get_all_motion_parameters": "{'all_motion_val': None, 'summary_motion_power': None}",
          "calc_motion_parameters": "{'info': None, 'maxdisp': None, 'out_file': None, 'relsdisp': None}",
          "calc_power_parameters": "{'info': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "movement_parameters": "[Undefined]",
              "max_displacement": "[Undefined]",
              "rels_displacement": "[Undefined]",
              "motion_correct": "[Undefined]",
              "mask": "[Undefined]",
              "transformations": "[Undefined]"
            },
            "outputs": {
              "movement_parameters": "[Undefined]",
              "max_displacement": "[Undefined]",
              "rels_displacement": "[Undefined]",
              "motion_correct": "[Undefined]",
              "mask": "[Undefined]",
              "transformations": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "cal_DVARS",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "out_file": "[Undefined]",
              "method": "dvars",
              "num_threads": "1",
              "outputtype": "AFNI",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "cal_DVARS_strip",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.DVARS_strip_t0",
              "file_1D": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "DVARS_val": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "FDP_1D": "[Undefined]",
              "FDJ_1D": "[Undefined]",
              "DVARS_1D": "[Undefined]",
              "power_params": "[Undefined]",
              "motion_params": "[Undefined]",
              "motion": "[Undefined]",
              "desc-summary_motion": "[Undefined]"
            },
            "outputs": {
              "FDP_1D": "[Undefined]",
              "FDJ_1D": "[Undefined]",
              "DVARS_1D": "[Undefined]",
              "power_params": "[Undefined]",
              "motion_params": "[Undefined]",
              "motion": "[Undefined]",
              "desc-summary_motion": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calculate_FD",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_P",
              "in_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fd": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calculate_FDJ",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_J",
              "in_file": "[Undefined]",
              "calc_from": "rms",
              "center": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fd": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "get_all_motion_parameters",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.get_allmotion",
              "fdj": "[Undefined]",
              "fdp": "[Undefined]",
              "maxdisp": "[Undefined]",
              "motion": "[Undefined]",
              "power": "[Undefined]",
              "relsdisp": "[Undefined]",
              "dvars": "[Undefined]"
            },
            "outputs": {
              "all_motion_val": "[Undefined]",
              "summary_motion_power": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calc_motion_parameters",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.gen_motion_parameters",
              "movement_parameters": "[Undefined]",
              "max_displacement": "[Undefined]",
              "motion_correct_tool": "mcflirt",
              "rels_displacement": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "info": "[Undefined]",
              "maxdisp": "[Undefined]",
              "relsdisp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calc_power_parameters",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.gen_power_parameters",
              "fdp": "[Undefined]",
              "fdj": "[Undefined]",
              "dvars": "[Undefined]",
              "motion_correct_tool": "mcflirt"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "info": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "cal_DVARS"
          },
          {
            "origin": "inputspec",
            "target": "calculate_FD"
          },
          {
            "origin": "inputspec",
            "target": "calculate_FDJ"
          },
          {
            "origin": "inputspec",
            "target": "calc_motion_parameters"
          },
          {
            "origin": "cal_DVARS",
            "target": "cal_DVARS_strip"
          },
          {
            "origin": "cal_DVARS",
            "target": "calc_power_parameters"
          },
          {
            "origin": "cal_DVARS_strip",
            "target": "outputspec"
          },
          {
            "origin": "cal_DVARS_strip",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "calculate_FD",
            "target": "outputspec"
          },
          {
            "origin": "calculate_FD",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "calculate_FD",
            "target": "calc_power_parameters"
          },
          {
            "origin": "calculate_FDJ",
            "target": "outputspec"
          },
          {
            "origin": "calculate_FDJ",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "get_all_motion_parameters",
            "target": "outputspec"
          },
          {
            "origin": "calc_motion_parameters",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "calc_motion_parameters",
            "target": "outputspec"
          },
          {
            "origin": "calc_power_parameters",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "calc_power_parameters",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "func_to_anat_FLIRT_132",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'anat': '[Undefined]', 'dof': 6, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'func': '[Undefined]', 'interp': 'trilinear'}",
          "linear_func_to_anat": "{'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': 'corratio', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'anat': None, 'dof': None, 'fieldmap': None, 'fieldmapmask': None, 'func': None, 'interp': None}",
          "linear_func_to_anat": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "outputspec": "{'anat_func_nobbreg': None, 'func_to_anat_linear_xfm_nobbreg': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "func": "[Undefined]",
              "anat": "[Undefined]",
              "dof": "6",
              "interp": "trilinear",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]"
            },
            "outputs": {
              "func": "[Undefined]",
              "anat": "[Undefined]",
              "dof": "[Undefined]",
              "interp": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "linear_func_to_anat",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "[Undefined]",
              "datatype": "[Undefined]",
              "cost": "corratio",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "trilinear",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "6",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "func_to_anat_linear_xfm_nobbreg": "[Undefined]",
              "anat_func_nobbreg": "[Undefined]"
            },
            "outputs": {
              "func_to_anat_linear_xfm_nobbreg": "[Undefined]",
              "anat_func_nobbreg": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "linear_func_to_anat"
          },
          {
            "origin": "linear_func_to_anat",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "func_to_anat_bbreg_132",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'anat': '[Undefined]', 'anat_wm_segmentation': '[Undefined]', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch', 'bbr_wm_mask_args': '-bin', 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'func': '[Undefined]', 'linear_reg_matrix': '[Undefined]'}",
          "wm_bb_mask": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "bbreg_func_to_anat": "{'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': 6, 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'anat': None, 'anat_wm_segmentation': None, 'bbr_schedule': None, 'bbr_wm_mask_args': None, 'fieldmap': None, 'fieldmapmask': None, 'func': None, 'linear_reg_matrix': None}",
          "wm_bb_mask": "{'out_file': None}",
          "bbreg_func_to_anat": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "outputspec": "{'anat_func': None, 'func_to_anat_linear_xfm': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "func": "[Undefined]",
              "anat": "[Undefined]",
              "linear_reg_matrix": "[Undefined]",
              "anat_wm_segmentation": "[Undefined]",
              "bbr_schedule": "/usr/share/fsl/6.0/etc/flirtsch/bbr.sch",
              "bbr_wm_mask_args": "-bin",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]"
            },
            "outputs": {
              "func": "[Undefined]",
              "anat": "[Undefined]",
              "linear_reg_matrix": "[Undefined]",
              "anat_wm_segmentation": "[Undefined]",
              "bbr_schedule": "[Undefined]",
              "bbr_wm_mask_args": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "wm_bb_mask",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "[Undefined]",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "bbreg_func_to_anat",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "[Undefined]",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "[Undefined]",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "6",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "func_to_anat_linear_xfm": "[Undefined]",
              "anat_func": "[Undefined]"
            },
            "outputs": {
              "func_to_anat_linear_xfm": "[Undefined]",
              "anat_func": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "wm_bb_mask"
          },
          {
            "origin": "inputspec",
            "target": "bbreg_func_to_anat"
          },
          {
            "origin": "wm_bb_mask",
            "target": "bbreg_func_to_anat"
          },
          {
            "origin": "bbreg_func_to_anat",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "create_func_to_T1wtemplate_xfm_141",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'T1w-brain-template_funcreg': '[Undefined]', 'T1w_to_template_xfm': '[Undefined]', 'blip_warp': '[Undefined]', 'coreg_xfm': '[Undefined]', 'input_brain': '[Undefined]', 'mean_bold': '[Undefined]', 'template_to_T1w_xfm': '[Undefined]'}",
          "fsl_reg_2_itk": "{'args': '[Undefined]', 'environ': {}, 'fsl2ras': True, 'itk_transform': True}",
          "change_transform_type": "{'function_str': 'def change_itk_transform_type(input_affine_file):\\n    \"\"\"Produce an updated affine file for ANTs compatibility.\\n\\n    This function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt).\\n\\n    It then modifies the \\'Transform Type\\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \\'updated_affine.txt\\'\\n    \"\"\"\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n        for line in f:\\n            if \"Transform:\" in line:\\n                if \"MatrixOffsetTransformBase_double_3_3\" in line:\\n                    transform_line = \"Transform: AffineTransform_double_3_3\\\\n\"\\n                    new_file_lines.append(transform_line)\\n            else:\\n                new_file_lines.append(line)\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \"updated_affine.txt\")\\n\\n    with open(updated_affine_file, \"wt\") as f:\\n        for line in new_file_lines:\\n            f.write(line)\\n\\n    return updated_affine_file\\n'}",
          "write_composite_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-bold_to-template_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_all_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "write_composite_inv_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': [True, False], 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-bold_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_inv_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}"
        },
        "outputs": {
          "inputspec": "{'T1w-brain-template_funcreg': None, 'T1w_to_template_xfm': None, 'blip_warp': None, 'coreg_xfm': None, 'input_brain': None, 'mean_bold': None, 'template_to_T1w_xfm': None}",
          "fsl_reg_2_itk": "{'itk_transform': None}",
          "change_transform_type": "{'updated_affine_file': None}",
          "write_composite_xfm": "{'output_image': None}",
          "collect_all_transforms": "{'out': None}",
          "write_composite_inv_xfm": "{'output_image': None}",
          "collect_inv_transforms": "{'out': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_brain": "[Undefined]",
              "mean_bold": "[Undefined]",
              "coreg_xfm": "[Undefined]",
              "T1w-brain-template_funcreg": "[Undefined]",
              "T1w_to_template_xfm": "[Undefined]",
              "template_to_T1w_xfm": "[Undefined]",
              "blip_warp": "[Undefined]"
            },
            "outputs": {
              "input_brain": "[Undefined]",
              "mean_bold": "[Undefined]",
              "coreg_xfm": "[Undefined]",
              "T1w-brain-template_funcreg": "[Undefined]",
              "T1w_to_template_xfm": "[Undefined]",
              "template_to_T1w_xfm": "[Undefined]",
              "blip_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fsl_reg_2_itk",
            "type": "node",
            "inputs": {
              "reference_file": "[Undefined]",
              "source_file": "[Undefined]",
              "transform_file": "[Undefined]",
              "itk_transform": "True",
              "fsl2ras": "True",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "itk_transform": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "change_transform_type",
            "type": "node",
            "inputs": {
              "function_str": "def change_itk_transform_type(input_affine_file):\n    \"\"\"Produce an updated affine file for ANTs compatibility.\n\n    This function takes in the affine.txt produced by the c3d_affine_tool\n    (which converted an FSL FLIRT affine.mat into the affine.txt).\n\n    It then modifies the 'Transform Type' of this affine.txt so that it is\n    compatible with the antsApplyTransforms tool and produces a new affine\n    file titled 'updated_affine.txt'\n    \"\"\"\n    new_file_lines = []\n\n    with open(input_affine_file) as f:\n        for line in f:\n            if \"Transform:\" in line:\n                if \"MatrixOffsetTransformBase_double_3_3\" in line:\n                    transform_line = \"Transform: AffineTransform_double_3_3\\n\"\n                    new_file_lines.append(transform_line)\n            else:\n                new_file_lines.append(line)\n\n    updated_affine_file = os.path.join(os.getcwd(), \"updated_affine.txt\")\n\n    with open(updated_affine_file, \"wt\") as f:\n        for line in new_file_lines:\n            f.write(line)\n\n    return updated_affine_file\n",
              "input_affine_file": "[Undefined]"
            },
            "outputs": {
              "updated_affine_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-bold_to-template_mode-image_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "LanczosWindowedSinc",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_all_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_inv_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-template_to-bold_mode-image_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "LanczosWindowedSinc",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[True, False]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_inv_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "fsl_reg_2_itk"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_xfm"
          },
          {
            "origin": "inputspec",
            "target": "collect_all_transforms"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_inv_xfm"
          },
          {
            "origin": "inputspec",
            "target": "collect_inv_transforms"
          },
          {
            "origin": "fsl_reg_2_itk",
            "target": "change_transform_type"
          },
          {
            "origin": "change_transform_type",
            "target": "collect_all_transforms"
          },
          {
            "origin": "change_transform_type",
            "target": "collect_inv_transforms"
          },
          {
            "origin": "collect_all_transforms",
            "target": "write_composite_xfm"
          },
          {
            "origin": "collect_inv_transforms",
            "target": "write_composite_inv_xfm"
          }
        ]
      },
      {
        "name": "resampled_T1w-brain-template-funcreg",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "2mm",
          "template": "/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "template_name": "T1w-brain-template-funcreg",
          "tag": "func_preproc_outputs"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "write_composite_inv_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-template_to-T1w_mode-image_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "erode_T1w_mask_149",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'brain_mask': '[Undefined]', 'erode_mm': '[Undefined]', 'erode_prop': None, 'mask': '[Undefined]', 'mask_erode_mm': 30}",
          "erode_skullstrip_mask": "{'function_str': 'def mask_erosion(\\n    roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None, mask_erosion_prop=None\\n):\\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask.\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment mask\\n\\n    skullstrip_mask : string\\n        Path to skull-stripped brain mask\\n\\n    mask_erosion_prop : float\\n        Target volume ratio for skull-stripped brain mask\\n\\n    Returns\\n    -------\\n    output_roi_mask : string\\n        Path to eroded segment mask\\n\\n    eroded_skullstrip_mask : string\\n        Path to eroded skull-stripped brain mask\\n    \"\"\"\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L916-L935\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n    roi_mask_img = nib.load(roi_mask)\\n    roi_mask_data = roi_mask_img.get_fdata()\\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop\\n    )\\n\\n    if erode_in:\\n        # pylint: disable=invalid-unary-operand-type\\n        roi_mask_data[~skullstrip_mask_data] = 0\\n\\n    hdr = roi_mask_img.header\\n    output_roi_mask_img = nib.Nifti1Image(\\n        roi_mask_data, header=hdr, affine=roi_mask_img.affine\\n    )\\n    output_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_eroded_mask.nii.gz\")\\n    output_roi_mask_img.to_filename(output_roi_mask)\\n\\n    hdr = skullstrip_mask_img.header\\n    output_skullstrip_mask_img = nib.Nifti1Image(\\n        skullstrip_mask_data, header=hdr, affine=skullstrip_mask_img.affine\\n    )\\n    eroded_skullstrip_mask = os.path.join(os.getcwd(), \"eroded_skullstrip_mask.nii.gz\")\\n\\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\\n\\n    return output_roi_mask, eroded_skullstrip_mask\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'brain_mask': None, 'erode_mm': None, 'erode_prop': None, 'mask': None, 'mask_erode_mm': None}",
          "erode_skullstrip_mask": "{'eroded_skullstrip_mask': None, 'output_roi_mask': None}",
          "outputspec": "{'eroded_mask': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "mask": "[Undefined]",
              "erode_mm": "[Undefined]",
              "erode_prop": "None",
              "brain_mask": "[Undefined]",
              "mask_erode_mm": "30"
            },
            "outputs": {
              "mask": "[Undefined]",
              "erode_mm": "[Undefined]",
              "erode_prop": "[Undefined]",
              "brain_mask": "[Undefined]",
              "mask_erode_mm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "erode_skullstrip_mask",
            "type": "node",
            "inputs": {
              "function_str": "def mask_erosion(\n    roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None, mask_erosion_prop=None\n):\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask.\n\n    Parameters\n    ----------\n    roi_mask : string\n        Path to binarized segment mask\n\n    skullstrip_mask : string\n        Path to skull-stripped brain mask\n\n    mask_erosion_prop : float\n        Target volume ratio for skull-stripped brain mask\n\n    Returns\n    -------\n    output_roi_mask : string\n        Path to eroded segment mask\n\n    eroded_skullstrip_mask : string\n        Path to eroded skull-stripped brain mask\n    \"\"\"\n    # This functionality is adapted from poldracklab/niworkflows:\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L916-L935\n    #   https://fmriprep.readthedocs.io/\n    #   https://poldracklab.stanford.edu/\n    # We are temporarily maintaining our own copy for more granular control.\n    roi_mask_img = nib.load(roi_mask)\n    roi_mask_data = roi_mask_img.get_fdata()\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop\n    )\n\n    if erode_in:\n        # pylint: disable=invalid-unary-operand-type\n        roi_mask_data[~skullstrip_mask_data] = 0\n\n    hdr = roi_mask_img.header\n    output_roi_mask_img = nib.Nifti1Image(\n        roi_mask_data, header=hdr, affine=roi_mask_img.affine\n    )\n    output_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_eroded_mask.nii.gz\")\n    output_roi_mask_img.to_filename(output_roi_mask)\n\n    hdr = skullstrip_mask_img.header\n    output_skullstrip_mask_img = nib.Nifti1Image(\n        skullstrip_mask_data, header=hdr, affine=skullstrip_mask_img.affine\n    )\n    eroded_skullstrip_mask = os.path.join(os.getcwd(), \"eroded_skullstrip_mask.nii.gz\")\n\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\n\n    return output_roi_mask, eroded_skullstrip_mask\n",
              "roi_mask": "[Undefined]",
              "skullstrip_mask": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "mask_erosion_prop": "[Undefined]"
            },
            "outputs": {
              "output_roi_mask": "[Undefined]",
              "eroded_skullstrip_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "eroded_mask": "[Undefined]"
            },
            "outputs": {
              "eroded_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "erode_skullstrip_mask"
          },
          {
            "origin": "erode_skullstrip_mask",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "erode_CSF_mask_152",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'brain_mask': '[Undefined]', 'erode_mm': None, 'erode_prop': 0.9, 'mask': '[Undefined]', 'mask_erode_mm': None}",
          "erode_skullstrip_mask": "{'function_str': 'def mask_erosion(\\n    roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None, mask_erosion_prop=None\\n):\\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask.\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment mask\\n\\n    skullstrip_mask : string\\n        Path to skull-stripped brain mask\\n\\n    mask_erosion_prop : float\\n        Target volume ratio for skull-stripped brain mask\\n\\n    Returns\\n    -------\\n    output_roi_mask : string\\n        Path to eroded segment mask\\n\\n    eroded_skullstrip_mask : string\\n        Path to eroded skull-stripped brain mask\\n    \"\"\"\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L916-L935\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n    roi_mask_img = nib.load(roi_mask)\\n    roi_mask_data = roi_mask_img.get_fdata()\\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop\\n    )\\n\\n    if erode_in:\\n        # pylint: disable=invalid-unary-operand-type\\n        roi_mask_data[~skullstrip_mask_data] = 0\\n\\n    hdr = roi_mask_img.header\\n    output_roi_mask_img = nib.Nifti1Image(\\n        roi_mask_data, header=hdr, affine=roi_mask_img.affine\\n    )\\n    output_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_eroded_mask.nii.gz\")\\n    output_roi_mask_img.to_filename(output_roi_mask)\\n\\n    hdr = skullstrip_mask_img.header\\n    output_skullstrip_mask_img = nib.Nifti1Image(\\n        skullstrip_mask_data, header=hdr, affine=skullstrip_mask_img.affine\\n    )\\n    eroded_skullstrip_mask = os.path.join(os.getcwd(), \"eroded_skullstrip_mask.nii.gz\")\\n\\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\\n\\n    return output_roi_mask, eroded_skullstrip_mask\\n'}",
          "erode_mask": "{'function_str': 'def erosion(roi_mask=None, erosion_mm=None, erosion_prop=None):\\n    \"\"\"Returns eroded tissue segment mask.\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment (ROI) mask\\n\\n    erosion_prop : float\\n        Target volume ratio for erosion segment mask\\n\\n    Returns\\n    -------\\n    eroded_roi_mask : string\\n        Path to eroded segment mask\\n    \"\"\"\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L937-L954\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n    roi_mask_img, _, roi_mask_data = _erode(roi_mask, erosion_mm, erosion_prop)\\n\\n    hdr = roi_mask_img.header\\n    output_img = nib.Nifti1Image(roi_mask_data, header=hdr, affine=roi_mask_img.affine)\\n    eroded_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_mask.nii.gz\")\\n\\n    output_img.to_filename(eroded_roi_mask)\\n\\n    return eroded_roi_mask\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'brain_mask': None, 'erode_mm': None, 'erode_prop': None, 'mask': None, 'mask_erode_mm': None}",
          "erode_skullstrip_mask": "{'eroded_skullstrip_mask': None, 'output_roi_mask': None}",
          "erode_mask": "{'eroded_roi_mask': None}",
          "outputspec": "{'eroded_mask': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "mask": "[Undefined]",
              "erode_mm": "None",
              "erode_prop": "0.9",
              "brain_mask": "[Undefined]",
              "mask_erode_mm": "None"
            },
            "outputs": {
              "mask": "[Undefined]",
              "erode_mm": "[Undefined]",
              "erode_prop": "[Undefined]",
              "brain_mask": "[Undefined]",
              "mask_erode_mm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "erode_skullstrip_mask",
            "type": "node",
            "inputs": {
              "function_str": "def mask_erosion(\n    roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None, mask_erosion_prop=None\n):\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask.\n\n    Parameters\n    ----------\n    roi_mask : string\n        Path to binarized segment mask\n\n    skullstrip_mask : string\n        Path to skull-stripped brain mask\n\n    mask_erosion_prop : float\n        Target volume ratio for skull-stripped brain mask\n\n    Returns\n    -------\n    output_roi_mask : string\n        Path to eroded segment mask\n\n    eroded_skullstrip_mask : string\n        Path to eroded skull-stripped brain mask\n    \"\"\"\n    # This functionality is adapted from poldracklab/niworkflows:\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L916-L935\n    #   https://fmriprep.readthedocs.io/\n    #   https://poldracklab.stanford.edu/\n    # We are temporarily maintaining our own copy for more granular control.\n    roi_mask_img = nib.load(roi_mask)\n    roi_mask_data = roi_mask_img.get_fdata()\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop\n    )\n\n    if erode_in:\n        # pylint: disable=invalid-unary-operand-type\n        roi_mask_data[~skullstrip_mask_data] = 0\n\n    hdr = roi_mask_img.header\n    output_roi_mask_img = nib.Nifti1Image(\n        roi_mask_data, header=hdr, affine=roi_mask_img.affine\n    )\n    output_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_eroded_mask.nii.gz\")\n    output_roi_mask_img.to_filename(output_roi_mask)\n\n    hdr = skullstrip_mask_img.header\n    output_skullstrip_mask_img = nib.Nifti1Image(\n        skullstrip_mask_data, header=hdr, affine=skullstrip_mask_img.affine\n    )\n    eroded_skullstrip_mask = os.path.join(os.getcwd(), \"eroded_skullstrip_mask.nii.gz\")\n\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\n\n    return output_roi_mask, eroded_skullstrip_mask\n",
              "roi_mask": "[Undefined]",
              "skullstrip_mask": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "mask_erosion_prop": "[Undefined]"
            },
            "outputs": {
              "output_roi_mask": "[Undefined]",
              "eroded_skullstrip_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "erode_mask",
            "type": "node",
            "inputs": {
              "function_str": "def erosion(roi_mask=None, erosion_mm=None, erosion_prop=None):\n    \"\"\"Returns eroded tissue segment mask.\n\n    Parameters\n    ----------\n    roi_mask : string\n        Path to binarized segment (ROI) mask\n\n    erosion_prop : float\n        Target volume ratio for erosion segment mask\n\n    Returns\n    -------\n    eroded_roi_mask : string\n        Path to eroded segment mask\n    \"\"\"\n    # This functionality is adapted from poldracklab/niworkflows:\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L937-L954\n    #   https://fmriprep.readthedocs.io/\n    #   https://poldracklab.stanford.edu/\n    # We are temporarily maintaining our own copy for more granular control.\n    roi_mask_img, _, roi_mask_data = _erode(roi_mask, erosion_mm, erosion_prop)\n\n    hdr = roi_mask_img.header\n    output_img = nib.Nifti1Image(roi_mask_data, header=hdr, affine=roi_mask_img.affine)\n    eroded_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_mask.nii.gz\")\n\n    output_img.to_filename(eroded_roi_mask)\n\n    return eroded_roi_mask\n",
              "roi_mask": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "erosion_prop": "[Undefined]"
            },
            "outputs": {
              "eroded_roi_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "eroded_mask": "[Undefined]"
            },
            "outputs": {
              "eroded_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "erode_skullstrip_mask"
          },
          {
            "origin": "inputspec",
            "target": "erode_mask"
          },
          {
            "origin": "erode_skullstrip_mask",
            "target": "erode_mask"
          },
          {
            "origin": "erode_mask",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "erode_WM_mask_155",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'brain_mask': '[Undefined]', 'erode_mm': None, 'erode_prop': 0.6, 'mask': '[Undefined]', 'mask_erode_mm': None}",
          "erode_skullstrip_mask": "{'function_str': 'def mask_erosion(\\n    roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None, mask_erosion_prop=None\\n):\\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask.\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment mask\\n\\n    skullstrip_mask : string\\n        Path to skull-stripped brain mask\\n\\n    mask_erosion_prop : float\\n        Target volume ratio for skull-stripped brain mask\\n\\n    Returns\\n    -------\\n    output_roi_mask : string\\n        Path to eroded segment mask\\n\\n    eroded_skullstrip_mask : string\\n        Path to eroded skull-stripped brain mask\\n    \"\"\"\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L916-L935\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n    roi_mask_img = nib.load(roi_mask)\\n    roi_mask_data = roi_mask_img.get_fdata()\\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop\\n    )\\n\\n    if erode_in:\\n        # pylint: disable=invalid-unary-operand-type\\n        roi_mask_data[~skullstrip_mask_data] = 0\\n\\n    hdr = roi_mask_img.header\\n    output_roi_mask_img = nib.Nifti1Image(\\n        roi_mask_data, header=hdr, affine=roi_mask_img.affine\\n    )\\n    output_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_eroded_mask.nii.gz\")\\n    output_roi_mask_img.to_filename(output_roi_mask)\\n\\n    hdr = skullstrip_mask_img.header\\n    output_skullstrip_mask_img = nib.Nifti1Image(\\n        skullstrip_mask_data, header=hdr, affine=skullstrip_mask_img.affine\\n    )\\n    eroded_skullstrip_mask = os.path.join(os.getcwd(), \"eroded_skullstrip_mask.nii.gz\")\\n\\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\\n\\n    return output_roi_mask, eroded_skullstrip_mask\\n'}",
          "erode_mask": "{'function_str': 'def erosion(roi_mask=None, erosion_mm=None, erosion_prop=None):\\n    \"\"\"Returns eroded tissue segment mask.\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment (ROI) mask\\n\\n    erosion_prop : float\\n        Target volume ratio for erosion segment mask\\n\\n    Returns\\n    -------\\n    eroded_roi_mask : string\\n        Path to eroded segment mask\\n    \"\"\"\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L937-L954\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n    roi_mask_img, _, roi_mask_data = _erode(roi_mask, erosion_mm, erosion_prop)\\n\\n    hdr = roi_mask_img.header\\n    output_img = nib.Nifti1Image(roi_mask_data, header=hdr, affine=roi_mask_img.affine)\\n    eroded_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_mask.nii.gz\")\\n\\n    output_img.to_filename(eroded_roi_mask)\\n\\n    return eroded_roi_mask\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'brain_mask': None, 'erode_mm': None, 'erode_prop': None, 'mask': None, 'mask_erode_mm': None}",
          "erode_skullstrip_mask": "{'eroded_skullstrip_mask': None, 'output_roi_mask': None}",
          "erode_mask": "{'eroded_roi_mask': None}",
          "outputspec": "{'eroded_mask': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "mask": "[Undefined]",
              "erode_mm": "None",
              "erode_prop": "0.6",
              "brain_mask": "[Undefined]",
              "mask_erode_mm": "None"
            },
            "outputs": {
              "mask": "[Undefined]",
              "erode_mm": "[Undefined]",
              "erode_prop": "[Undefined]",
              "brain_mask": "[Undefined]",
              "mask_erode_mm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "erode_skullstrip_mask",
            "type": "node",
            "inputs": {
              "function_str": "def mask_erosion(\n    roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None, mask_erosion_prop=None\n):\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask.\n\n    Parameters\n    ----------\n    roi_mask : string\n        Path to binarized segment mask\n\n    skullstrip_mask : string\n        Path to skull-stripped brain mask\n\n    mask_erosion_prop : float\n        Target volume ratio for skull-stripped brain mask\n\n    Returns\n    -------\n    output_roi_mask : string\n        Path to eroded segment mask\n\n    eroded_skullstrip_mask : string\n        Path to eroded skull-stripped brain mask\n    \"\"\"\n    # This functionality is adapted from poldracklab/niworkflows:\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L916-L935\n    #   https://fmriprep.readthedocs.io/\n    #   https://poldracklab.stanford.edu/\n    # We are temporarily maintaining our own copy for more granular control.\n    roi_mask_img = nib.load(roi_mask)\n    roi_mask_data = roi_mask_img.get_fdata()\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop\n    )\n\n    if erode_in:\n        # pylint: disable=invalid-unary-operand-type\n        roi_mask_data[~skullstrip_mask_data] = 0\n\n    hdr = roi_mask_img.header\n    output_roi_mask_img = nib.Nifti1Image(\n        roi_mask_data, header=hdr, affine=roi_mask_img.affine\n    )\n    output_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_eroded_mask.nii.gz\")\n    output_roi_mask_img.to_filename(output_roi_mask)\n\n    hdr = skullstrip_mask_img.header\n    output_skullstrip_mask_img = nib.Nifti1Image(\n        skullstrip_mask_data, header=hdr, affine=skullstrip_mask_img.affine\n    )\n    eroded_skullstrip_mask = os.path.join(os.getcwd(), \"eroded_skullstrip_mask.nii.gz\")\n\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\n\n    return output_roi_mask, eroded_skullstrip_mask\n",
              "roi_mask": "[Undefined]",
              "skullstrip_mask": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "mask_erosion_prop": "[Undefined]"
            },
            "outputs": {
              "output_roi_mask": "[Undefined]",
              "eroded_skullstrip_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "erode_mask",
            "type": "node",
            "inputs": {
              "function_str": "def erosion(roi_mask=None, erosion_mm=None, erosion_prop=None):\n    \"\"\"Returns eroded tissue segment mask.\n\n    Parameters\n    ----------\n    roi_mask : string\n        Path to binarized segment (ROI) mask\n\n    erosion_prop : float\n        Target volume ratio for erosion segment mask\n\n    Returns\n    -------\n    eroded_roi_mask : string\n        Path to eroded segment mask\n    \"\"\"\n    # This functionality is adapted from poldracklab/niworkflows:\n    #   https://github.com/nipreps/niworkflows/blob/805cdd0/niworkflows/interfaces/utils.py#L937-L954\n    #   https://fmriprep.readthedocs.io/\n    #   https://poldracklab.stanford.edu/\n    # We are temporarily maintaining our own copy for more granular control.\n    roi_mask_img, _, roi_mask_data = _erode(roi_mask, erosion_mm, erosion_prop)\n\n    hdr = roi_mask_img.header\n    output_img = nib.Nifti1Image(roi_mask_data, header=hdr, affine=roi_mask_img.affine)\n    eroded_roi_mask = os.path.join(os.getcwd(), \"segment_tissue_mask.nii.gz\")\n\n    output_img.to_filename(eroded_roi_mask)\n\n    return eroded_roi_mask\n",
              "roi_mask": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "erosion_prop": "[Undefined]"
            },
            "outputs": {
              "eroded_roi_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "eroded_mask": "[Undefined]"
            },
            "outputs": {
              "eroded_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "erode_skullstrip_mask"
          },
          {
            "origin": "inputspec",
            "target": "erode_mask"
          },
          {
            "origin": "erode_skullstrip_mask",
            "target": "erode_mask"
          },
          {
            "origin": "erode_mask",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "nuisance_regressors_36_parameter_158",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'anat_to_func_linear_xfm_file_path': '[Undefined]', 'anat_to_mni_linear_xfm_file_path': '[Undefined]', 'anatomical_eroded_brain_mask_file_path': '[Undefined]', 'anatomical_file_path': '[Undefined]', 'creds_path': '[Undefined]', 'csf_mask_file_path': '[Undefined]', 'dl_dir': '[Undefined]', 'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'func_to_anat_linear_xfm_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'gm_mask_file_path': '[Undefined]', 'lat_ventricles_mask_file_path': '[Undefined]', 'mni_to_anat_linear_xfm_file_path': '[Undefined]', 'motion_parameters_file_path': '[Undefined]', 'selector': '[Undefined]', 'tr': '[Undefined]', 'wm_mask_file_path': '[Undefined]'}",
          "functional_mean": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "Anatomical_2mm_flirt": "{'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "Functional_2mm_flirt": "{'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': True, 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "WhiteMatter_2mm_flirt": "{'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "WhiteMatter_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "WhiteMatter_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "WhiteMatter_mean": "{'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}",
          "CerebrospinalFluid_2mm_flirt": "{'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "CerebrospinalFluid_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "CerebrospinalFluid_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "CerebrospinalFluid_mean": "{'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}",
          "GlobalSignal_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "GlobalSignal_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "GlobalSignal_mean": "{'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}",
          "build_nuisance_regressors": "{'acompcor_file_path': '[Undefined]', 'censor_file_path': '[Undefined]', 'custom_file_paths': '[Undefined]', 'function_str': 'CPAC.nuisance.nuisance.gather_nuisance', 'grey_matter_summary_file_path': '[Undefined]', 'selector': {'Name': '36_parameter', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'GlobalSignal': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}}, 'tcompcor_file_path': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'anat_to_func_linear_xfm_file_path': None, 'anat_to_mni_linear_xfm_file_path': None, 'anatomical_eroded_brain_mask_file_path': None, 'anatomical_file_path': None, 'creds_path': None, 'csf_mask_file_path': None, 'dl_dir': None, 'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'func_to_anat_linear_xfm_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'gm_mask_file_path': None, 'lat_ventricles_mask_file_path': None, 'mni_to_anat_linear_xfm_file_path': None, 'motion_parameters_file_path': None, 'selector': None, 'tr': None, 'wm_mask_file_path': None}",
          "functional_mean": "{'out_file': None}",
          "Anatomical_2mm_flirt": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "Functional_2mm_flirt": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "WhiteMatter_2mm_flirt": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "WhiteMatter_merge_masks": "{'out': None}",
          "WhiteMatter_union_masks": "{'out_file': None}",
          "WhiteMatter_mean": "{'out_file': None}",
          "CerebrospinalFluid_2mm_flirt": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "CerebrospinalFluid_merge_masks": "{'out': None}",
          "CerebrospinalFluid_union_masks": "{'out_file': None}",
          "CerebrospinalFluid_mean": "{'out_file': None}",
          "GlobalSignal_merge_masks": "{'out': None}",
          "GlobalSignal_union_masks": "{'out_file': None}",
          "GlobalSignal_mean": "{'out_file': None}",
          "build_nuisance_regressors": "{'censor_indices': None, 'out_file': None}",
          "outputspec": "{'censor_indices': None, 'regressors_file_path': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "anatomical_file_path": "[Undefined]",
              "anatomical_eroded_brain_mask_file_path": "[Undefined]",
              "gm_mask_file_path": "[Undefined]",
              "wm_mask_file_path": "[Undefined]",
              "csf_mask_file_path": "[Undefined]",
              "lat_ventricles_mask_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "func_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_func_linear_xfm_file_path": "[Undefined]",
              "mni_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_mni_linear_xfm_file_path": "[Undefined]",
              "motion_parameters_file_path": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "tr": "[Undefined]"
            },
            "outputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "anatomical_file_path": "[Undefined]",
              "anatomical_eroded_brain_mask_file_path": "[Undefined]",
              "gm_mask_file_path": "[Undefined]",
              "wm_mask_file_path": "[Undefined]",
              "csf_mask_file_path": "[Undefined]",
              "lat_ventricles_mask_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "func_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_func_linear_xfm_file_path": "[Undefined]",
              "mni_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_mni_linear_xfm_file_path": "[Undefined]",
              "motion_parameters_file_path": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "tr": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "functional_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "mask": "[Undefined]",
              "options": "-mean",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "Anatomical_2mm_flirt",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "2.0",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "[Undefined]",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "Functional_2mm_flirt",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "True",
              "apply_isoxfm": "[Undefined]",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "[Undefined]",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "WhiteMatter_2mm_flirt",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "2.0",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "nearestneighbour",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "WhiteMatter_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "WhiteMatter_union_masks",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "WhiteMatter_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "mask_f2short": "[Undefined]",
              "num_roi": "[Undefined]",
              "zerofill": "[Undefined]",
              "roisel": "[Undefined]",
              "debug": "[Undefined]",
              "quiet": "False",
              "nomeanout": "[Undefined]",
              "nobriklab": "[Undefined]",
              "format1D": "[Undefined]",
              "format1DR": "[Undefined]",
              "stat": "[Undefined]",
              "out_file": "[Undefined]",
              "args": "-1Dformat",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_2mm_flirt",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "2.0",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "nearestneighbour",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_union_masks",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "mask_f2short": "[Undefined]",
              "num_roi": "[Undefined]",
              "zerofill": "[Undefined]",
              "roisel": "[Undefined]",
              "debug": "[Undefined]",
              "quiet": "False",
              "nomeanout": "[Undefined]",
              "nobriklab": "[Undefined]",
              "format1D": "[Undefined]",
              "format1DR": "[Undefined]",
              "stat": "[Undefined]",
              "out_file": "[Undefined]",
              "args": "-1Dformat",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "GlobalSignal_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "GlobalSignal_union_masks",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "GlobalSignal_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "mask_f2short": "[Undefined]",
              "num_roi": "[Undefined]",
              "zerofill": "[Undefined]",
              "roisel": "[Undefined]",
              "debug": "[Undefined]",
              "quiet": "False",
              "nomeanout": "[Undefined]",
              "nobriklab": "[Undefined]",
              "format1D": "[Undefined]",
              "format1DR": "[Undefined]",
              "stat": "[Undefined]",
              "out_file": "[Undefined]",
              "args": "-1Dformat",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "build_nuisance_regressors",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.nuisance.nuisance.gather_nuisance",
              "functional_file_path": "[Undefined]",
              "selector": "{'Name': '36_parameter', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'GlobalSignal': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}}",
              "grey_matter_summary_file_path": "[Undefined]",
              "white_matter_summary_file_path": "[Undefined]",
              "csf_summary_file_path": "[Undefined]",
              "acompcor_file_path": "[Undefined]",
              "tcompcor_file_path": "[Undefined]",
              "global_summary_file_path": "[Undefined]",
              "motion_parameters_file_path": "[Undefined]",
              "custom_file_paths": "[Undefined]",
              "censor_file_path": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "censor_indices": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "regressors_file_path": "[Undefined]",
              "censor_indices": "[Undefined]"
            },
            "outputs": {
              "regressors_file_path": "[Undefined]",
              "censor_indices": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "functional_mean"
          },
          {
            "origin": "inputspec",
            "target": "Anatomical_2mm_flirt"
          },
          {
            "origin": "inputspec",
            "target": "Functional_2mm_flirt"
          },
          {
            "origin": "inputspec",
            "target": "WhiteMatter_2mm_flirt"
          },
          {
            "origin": "inputspec",
            "target": "CerebrospinalFluid_2mm_flirt"
          },
          {
            "origin": "inputspec",
            "target": "GlobalSignal_merge_masks"
          },
          {
            "origin": "inputspec",
            "target": "GlobalSignal_mean"
          },
          {
            "origin": "inputspec",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "Anatomical_2mm_flirt",
            "target": "Functional_2mm_flirt"
          },
          {
            "origin": "Anatomical_2mm_flirt",
            "target": "WhiteMatter_2mm_flirt"
          },
          {
            "origin": "Anatomical_2mm_flirt",
            "target": "CerebrospinalFluid_2mm_flirt"
          },
          {
            "origin": "Functional_2mm_flirt",
            "target": "WhiteMatter_mean"
          },
          {
            "origin": "Functional_2mm_flirt",
            "target": "CerebrospinalFluid_mean"
          },
          {
            "origin": "WhiteMatter_2mm_flirt",
            "target": "WhiteMatter_merge_masks"
          },
          {
            "origin": "WhiteMatter_merge_masks",
            "target": "WhiteMatter_union_masks"
          },
          {
            "origin": "WhiteMatter_union_masks",
            "target": "WhiteMatter_mean"
          },
          {
            "origin": "WhiteMatter_mean",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "CerebrospinalFluid_2mm_flirt",
            "target": "CerebrospinalFluid_merge_masks"
          },
          {
            "origin": "CerebrospinalFluid_merge_masks",
            "target": "CerebrospinalFluid_union_masks"
          },
          {
            "origin": "CerebrospinalFluid_union_masks",
            "target": "CerebrospinalFluid_mean"
          },
          {
            "origin": "CerebrospinalFluid_mean",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "GlobalSignal_merge_masks",
            "target": "GlobalSignal_union_masks"
          },
          {
            "origin": "GlobalSignal_union_masks",
            "target": "GlobalSignal_mean"
          },
          {
            "origin": "GlobalSignal_mean",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "build_nuisance_regressors",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "anat_to_func_linear_xfm_36_parameter_158",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "in_file2": "[Undefined]",
          "invert_xfm": "True",
          "concat_xfm": "[Undefined]",
          "fix_scale_skew": "[Undefined]",
          "out_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "write_composite_invlinear_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-template_to-T1w_mode-image_desc-linear_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "write_composite_linear_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-T1w_to-template_mode-image_desc-linear_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nuisance_regressors_aCompCor_158",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'anat_to_func_linear_xfm_file_path': '[Undefined]', 'anat_to_mni_linear_xfm_file_path': '[Undefined]', 'anatomical_eroded_brain_mask_file_path': '[Undefined]', 'anatomical_file_path': '[Undefined]', 'creds_path': '[Undefined]', 'csf_mask_file_path': '[Undefined]', 'dl_dir': '[Undefined]', 'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'func_to_anat_linear_xfm_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'gm_mask_file_path': '[Undefined]', 'lat_ventricles_mask_file_path': '[Undefined]', 'mni_to_anat_linear_xfm_file_path': '[Undefined]', 'motion_parameters_file_path': '[Undefined]', 'selector': '[Undefined]', 'tr': '[Undefined]', 'wm_mask_file_path': '[Undefined]'}",
          "functional_mean": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "Anatomical_2mm_flirt": "{'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "Functional_2mm_flirt": "{'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': True, 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "WhiteMatter_2mm_flirt": "{'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "WhiteMatter_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "WhiteMatter_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "WhiteMatter_mean": "{'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}",
          "CerebrospinalFluid_2mm_flirt": "{'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "CerebrospinalFluid_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "CerebrospinalFluid_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "CerebrospinalFluid_mean": "{'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}",
          "aCompCor_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "aCompCor_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "aCompCor_DetrendPC": "{'function_str': 'def calc_compcor_components(data_filename, num_components, mask_filename):\\n    if num_components < 1:\\n        msg = f\"Improper value for num_components ({num_components}), should be >= 1.\"\\n        raise ValueError(msg)\\n\\n    try:\\n        image_data = nib.load(data_filename).get_fdata().astype(np.float64)\\n    except (ImageFileError, MemoryError, OSError, TypeError, ValueError) as e:\\n        msg = f\"Unable to load data from {data_filename}\"\\n        raise ImageFileError(msg) from e\\n\\n    try:\\n        binary_mask = nib.load(mask_filename).get_fdata().astype(np.int16)\\n    except (ImageFileError, MemoryError, OSError, TypeError, ValueError) as e:\\n        msg = f\"Unable to load data from {mask_filename}\"\\n        raise ImageFileError(msg) from e\\n\\n    if not safe_shape(image_data, binary_mask):\\n        msg = (\\n            f\"The data in {data_filename} and {mask_filename} do not have a\"\\n            \" consistent shape\"\\n        )\\n        raise ValueError(msg)\\n\\n    # make sure that the values in binary_mask are binary\\n    binary_mask[binary_mask > 0] = 1\\n    binary_mask[binary_mask != 1] = 0\\n\\n    # reduce the image data to only the voxels in the binary mask\\n    image_data = image_data[binary_mask == 1, :]\\n\\n    # filter out any voxels whose variance equals 0\\n    IFLOGGER.info(\"Removing zero variance components\")\\n    image_data = image_data[image_data.std(1) != 0, :]\\n\\n    if image_data.shape.count(0):\\n        err = (\\n            \"\\\\n\\\\n[!] No wm or csf signals left after removing those \"\\n            \"with zero variance.\\\\n\\\\n\"\\n        )\\n        raise Exception(err)\\n\\n    IFLOGGER.info(\"Detrending and centering data\")\\n    Y = signal.detrend(image_data, axis=1, type=\"linear\").T\\n    Yc = Y - np.tile(Y.mean(0), (Y.shape[0], 1))\\n    Yc = Yc / np.tile(np.array(Yc.std(0)).reshape(1, Yc.shape[1]), (Yc.shape[0], 1))\\n    IFLOGGER.info(\"Calculating SVD decomposition of Y*Y\\'\")\\n    U, S, Vh = np.linalg.svd(Yc, full_matrices=False)\\n\\n    # write out the resulting regressor file\\n    regressor_file = os.path.join(os.getcwd(), \"compcor_regressors.1D\")\\n    np.savetxt(regressor_file, U[:, :num_components], delimiter=\"\\\\t\", fmt=\"%16g\")\\n\\n    return regressor_file\\n', 'num_components': 5}",
          "build_nuisance_regressors": "{'censor_file_path': '[Undefined]', 'custom_file_paths': '[Undefined]', 'function_str': 'CPAC.nuisance.nuisance.gather_nuisance', 'global_summary_file_path': '[Undefined]', 'grey_matter_summary_file_path': '[Undefined]', 'selector': {'Name': 'aCompCor', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'aCompCor': {'summary': {'method': 'DetrendPC', 'components': 5}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid'], 'extraction_resolution': 2}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}}, 'tcompcor_file_path': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'anat_to_func_linear_xfm_file_path': None, 'anat_to_mni_linear_xfm_file_path': None, 'anatomical_eroded_brain_mask_file_path': None, 'anatomical_file_path': None, 'creds_path': None, 'csf_mask_file_path': None, 'dl_dir': None, 'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'func_to_anat_linear_xfm_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'gm_mask_file_path': None, 'lat_ventricles_mask_file_path': None, 'mni_to_anat_linear_xfm_file_path': None, 'motion_parameters_file_path': None, 'selector': None, 'tr': None, 'wm_mask_file_path': None}",
          "functional_mean": "{'out_file': None}",
          "Anatomical_2mm_flirt": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "Functional_2mm_flirt": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "WhiteMatter_2mm_flirt": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "WhiteMatter_merge_masks": "{'out': None}",
          "WhiteMatter_union_masks": "{'out_file': None}",
          "WhiteMatter_mean": "{'out_file': None}",
          "CerebrospinalFluid_2mm_flirt": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "CerebrospinalFluid_merge_masks": "{'out': None}",
          "CerebrospinalFluid_union_masks": "{'out_file': None}",
          "CerebrospinalFluid_mean": "{'out_file': None}",
          "aCompCor_merge_masks": "{'out': None}",
          "aCompCor_union_masks": "{'out_file': None}",
          "aCompCor_DetrendPC": "{'compcor_file': None}",
          "build_nuisance_regressors": "{'censor_indices': None, 'out_file': None}",
          "outputspec": "{'censor_indices': None, 'regressors_file_path': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "anatomical_file_path": "[Undefined]",
              "anatomical_eroded_brain_mask_file_path": "[Undefined]",
              "gm_mask_file_path": "[Undefined]",
              "wm_mask_file_path": "[Undefined]",
              "csf_mask_file_path": "[Undefined]",
              "lat_ventricles_mask_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "func_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_func_linear_xfm_file_path": "[Undefined]",
              "mni_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_mni_linear_xfm_file_path": "[Undefined]",
              "motion_parameters_file_path": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "tr": "[Undefined]"
            },
            "outputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "anatomical_file_path": "[Undefined]",
              "anatomical_eroded_brain_mask_file_path": "[Undefined]",
              "gm_mask_file_path": "[Undefined]",
              "wm_mask_file_path": "[Undefined]",
              "csf_mask_file_path": "[Undefined]",
              "lat_ventricles_mask_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "func_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_func_linear_xfm_file_path": "[Undefined]",
              "mni_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_mni_linear_xfm_file_path": "[Undefined]",
              "motion_parameters_file_path": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "tr": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "functional_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "mask": "[Undefined]",
              "options": "-mean",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "Anatomical_2mm_flirt",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "2.0",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "[Undefined]",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "Functional_2mm_flirt",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "True",
              "apply_isoxfm": "[Undefined]",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "[Undefined]",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "WhiteMatter_2mm_flirt",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "2.0",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "nearestneighbour",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "WhiteMatter_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "WhiteMatter_union_masks",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "WhiteMatter_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "mask_f2short": "[Undefined]",
              "num_roi": "[Undefined]",
              "zerofill": "[Undefined]",
              "roisel": "[Undefined]",
              "debug": "[Undefined]",
              "quiet": "False",
              "nomeanout": "[Undefined]",
              "nobriklab": "[Undefined]",
              "format1D": "[Undefined]",
              "format1DR": "[Undefined]",
              "stat": "[Undefined]",
              "out_file": "[Undefined]",
              "args": "-1Dformat",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_2mm_flirt",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "2.0",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "nearestneighbour",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_union_masks",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "mask_f2short": "[Undefined]",
              "num_roi": "[Undefined]",
              "zerofill": "[Undefined]",
              "roisel": "[Undefined]",
              "debug": "[Undefined]",
              "quiet": "False",
              "nomeanout": "[Undefined]",
              "nobriklab": "[Undefined]",
              "format1D": "[Undefined]",
              "format1DR": "[Undefined]",
              "stat": "[Undefined]",
              "out_file": "[Undefined]",
              "args": "-1Dformat",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "aCompCor_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "aCompCor_union_masks",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "aCompCor_DetrendPC",
            "type": "node",
            "inputs": {
              "function_str": "def calc_compcor_components(data_filename, num_components, mask_filename):\n    if num_components < 1:\n        msg = f\"Improper value for num_components ({num_components}), should be >= 1.\"\n        raise ValueError(msg)\n\n    try:\n        image_data = nib.load(data_filename).get_fdata().astype(np.float64)\n    except (ImageFileError, MemoryError, OSError, TypeError, ValueError) as e:\n        msg = f\"Unable to load data from {data_filename}\"\n        raise ImageFileError(msg) from e\n\n    try:\n        binary_mask = nib.load(mask_filename).get_fdata().astype(np.int16)\n    except (ImageFileError, MemoryError, OSError, TypeError, ValueError) as e:\n        msg = f\"Unable to load data from {mask_filename}\"\n        raise ImageFileError(msg) from e\n\n    if not safe_shape(image_data, binary_mask):\n        msg = (\n            f\"The data in {data_filename} and {mask_filename} do not have a\"\n            \" consistent shape\"\n        )\n        raise ValueError(msg)\n\n    # make sure that the values in binary_mask are binary\n    binary_mask[binary_mask > 0] = 1\n    binary_mask[binary_mask != 1] = 0\n\n    # reduce the image data to only the voxels in the binary mask\n    image_data = image_data[binary_mask == 1, :]\n\n    # filter out any voxels whose variance equals 0\n    IFLOGGER.info(\"Removing zero variance components\")\n    image_data = image_data[image_data.std(1) != 0, :]\n\n    if image_data.shape.count(0):\n        err = (\n            \"\\n\\n[!] No wm or csf signals left after removing those \"\n            \"with zero variance.\\n\\n\"\n        )\n        raise Exception(err)\n\n    IFLOGGER.info(\"Detrending and centering data\")\n    Y = signal.detrend(image_data, axis=1, type=\"linear\").T\n    Yc = Y - np.tile(Y.mean(0), (Y.shape[0], 1))\n    Yc = Yc / np.tile(np.array(Yc.std(0)).reshape(1, Yc.shape[1]), (Yc.shape[0], 1))\n    IFLOGGER.info(\"Calculating SVD decomposition of Y*Y'\")\n    U, S, Vh = np.linalg.svd(Yc, full_matrices=False)\n\n    # write out the resulting regressor file\n    regressor_file = os.path.join(os.getcwd(), \"compcor_regressors.1D\")\n    np.savetxt(regressor_file, U[:, :num_components], delimiter=\"\\t\", fmt=\"%16g\")\n\n    return regressor_file\n",
              "data_filename": "[Undefined]",
              "num_components": "5",
              "mask_filename": "[Undefined]"
            },
            "outputs": {
              "compcor_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "build_nuisance_regressors",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.nuisance.nuisance.gather_nuisance",
              "functional_file_path": "[Undefined]",
              "selector": "{'Name': 'aCompCor', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'aCompCor': {'summary': {'method': 'DetrendPC', 'components': 5}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid'], 'extraction_resolution': 2}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': {'filter': 'Mean', 'method': 'Mean'}}}",
              "grey_matter_summary_file_path": "[Undefined]",
              "white_matter_summary_file_path": "[Undefined]",
              "csf_summary_file_path": "[Undefined]",
              "acompcor_file_path": "[Undefined]",
              "tcompcor_file_path": "[Undefined]",
              "global_summary_file_path": "[Undefined]",
              "motion_parameters_file_path": "[Undefined]",
              "custom_file_paths": "[Undefined]",
              "censor_file_path": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "censor_indices": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "regressors_file_path": "[Undefined]",
              "censor_indices": "[Undefined]"
            },
            "outputs": {
              "regressors_file_path": "[Undefined]",
              "censor_indices": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "functional_mean"
          },
          {
            "origin": "inputspec",
            "target": "Anatomical_2mm_flirt"
          },
          {
            "origin": "inputspec",
            "target": "Functional_2mm_flirt"
          },
          {
            "origin": "inputspec",
            "target": "WhiteMatter_2mm_flirt"
          },
          {
            "origin": "inputspec",
            "target": "CerebrospinalFluid_2mm_flirt"
          },
          {
            "origin": "inputspec",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "Anatomical_2mm_flirt",
            "target": "Functional_2mm_flirt"
          },
          {
            "origin": "Anatomical_2mm_flirt",
            "target": "WhiteMatter_2mm_flirt"
          },
          {
            "origin": "Anatomical_2mm_flirt",
            "target": "CerebrospinalFluid_2mm_flirt"
          },
          {
            "origin": "Functional_2mm_flirt",
            "target": "WhiteMatter_mean"
          },
          {
            "origin": "Functional_2mm_flirt",
            "target": "CerebrospinalFluid_mean"
          },
          {
            "origin": "Functional_2mm_flirt",
            "target": "aCompCor_DetrendPC"
          },
          {
            "origin": "WhiteMatter_2mm_flirt",
            "target": "WhiteMatter_merge_masks"
          },
          {
            "origin": "WhiteMatter_2mm_flirt",
            "target": "aCompCor_merge_masks"
          },
          {
            "origin": "WhiteMatter_merge_masks",
            "target": "WhiteMatter_union_masks"
          },
          {
            "origin": "WhiteMatter_union_masks",
            "target": "WhiteMatter_mean"
          },
          {
            "origin": "WhiteMatter_mean",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "CerebrospinalFluid_2mm_flirt",
            "target": "CerebrospinalFluid_merge_masks"
          },
          {
            "origin": "CerebrospinalFluid_2mm_flirt",
            "target": "aCompCor_merge_masks"
          },
          {
            "origin": "CerebrospinalFluid_merge_masks",
            "target": "CerebrospinalFluid_union_masks"
          },
          {
            "origin": "CerebrospinalFluid_union_masks",
            "target": "CerebrospinalFluid_mean"
          },
          {
            "origin": "CerebrospinalFluid_mean",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "aCompCor_merge_masks",
            "target": "aCompCor_union_masks"
          },
          {
            "origin": "aCompCor_union_masks",
            "target": "aCompCor_DetrendPC"
          },
          {
            "origin": "aCompCor_DetrendPC",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "build_nuisance_regressors",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "anat_to_func_linear_xfm_aCompCor_158",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "in_file2": "[Undefined]",
          "invert_xfm": "True",
          "concat_xfm": "[Undefined]",
          "fix_scale_skew": "[Undefined]",
          "out_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "convert_bbr2itk_190",
        "type": "node",
        "inputs": {
          "function_str": "def run_c3d(reference_file, source_file, transform_file):\n    \"\"\"Run c3d_affine_tool to convert an FSL FLIRT affine transform to ITK.\"\"\"\n    import os\n    import subprocess\n\n    itk_transform = os.path.join(os.getcwd(), \"affine.txt\")\n\n    cmd = [\n        \"c3d_affine_tool\",\n        \"-ref\",\n        reference_file,\n        \"-src\",\n        source_file,\n        transform_file,\n        \"-fsl2ras\",\n        \"-oitk\",\n        itk_transform,\n    ]\n    subprocess.check_output(cmd)\n\n    return itk_transform\n",
          "reference_file": "[Undefined]",
          "source_file": "[Undefined]",
          "transform_file": "[Undefined]"
        },
        "outputs": {
          "itk_transform": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "split_func_190",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_base_name": "[Undefined]",
          "dimension": "t",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_files": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "convert_motionxfm2itk_190_",
        "type": "node",
        "inputs": {
          "function_str": "def run_c3d(reference_file, source_file, transform_file):\n    \"\"\"Run c3d_affine_tool to convert an FSL FLIRT affine transform to ITK.\"\"\"\n    import os\n    import subprocess\n\n    itk_transform = os.path.join(os.getcwd(), \"affine.txt\")\n\n    cmd = [\n        \"c3d_affine_tool\",\n        \"-ref\",\n        reference_file,\n        \"-src\",\n        source_file,\n        transform_file,\n        \"-fsl2ras\",\n        \"-oitk\",\n        itk_transform,\n    ]\n    subprocess.check_output(cmd)\n\n    return itk_transform\n",
          "reference_file": "[Undefined]",
          "source_file": "[Undefined]",
          "transform_file": "[Undefined]"
        },
        "outputs": {
          "itk_transform": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "collectxfm_func_to_standard_190_",
        "type": "node",
        "inputs": {
          "axis": "vstack",
          "in1": "[Undefined]",
          "in2": "[Undefined]",
          "in3": "identity",
          "in4": "[Undefined]",
          "no_flatten": "False",
          "ravel_inputs": "False"
        },
        "outputs": {
          "out": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "applyxfm_func_to_standard_190_",
        "type": "node",
        "inputs": {
          "args": "[Undefined]",
          "default_value": "0.0",
          "dimension": "[Undefined]",
          "environ": "{'NSLOTS': '1'}",
          "float": "True",
          "input_image": "[Undefined]",
          "input_image_type": "[Undefined]",
          "interpolation": "LanczosWindowedSinc",
          "interpolation_parameters": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "num_threads": "1",
          "out_postfix": "_trans",
          "output_image": "[Undefined]",
          "print_out_composite_warp_file": "[Undefined]",
          "reference_image": "[Undefined]",
          "transforms": "[Undefined]"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "applyxfm_derivfunc_to_standard_190_",
        "type": "node",
        "inputs": {
          "args": "[Undefined]",
          "default_value": "0.0",
          "dimension": "[Undefined]",
          "environ": "{'NSLOTS': '1'}",
          "float": "True",
          "input_image": "[Undefined]",
          "input_image_type": "[Undefined]",
          "interpolation": "LanczosWindowedSinc",
          "interpolation_parameters": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "num_threads": "1",
          "out_postfix": "_trans",
          "output_image": "[Undefined]",
          "print_out_composite_warp_file": "[Undefined]",
          "reference_image": "[Undefined]",
          "transforms": "[Undefined]"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "resampled_T1w-brain-template-deriv",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "2mm",
          "template": "/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "template_name": "T1w-brain-template-deriv",
          "tag": "func_derivative_outputs"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "merge_func_to_standard_190",
        "type": "node",
        "inputs": {
          "in_files": "[Undefined]",
          "dimension": "t",
          "tr": "[Undefined]",
          "merged_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "merged_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "merge_derivfunc_to_standard_190",
        "type": "node",
        "inputs": {
          "in_files": "[Undefined]",
          "dimension": "t",
          "tr": "[Undefined]",
          "merged_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "merged_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "applyxfm_func_mask_to_standard_190",
        "type": "node",
        "inputs": {
          "dimension": "[Undefined]",
          "input_image_type": "[Undefined]",
          "input_image": "[Undefined]",
          "output_image": "[Undefined]",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "MultiLabel",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "[Undefined]",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "collectxfm_func_mask_to_standard_190",
        "type": "node",
        "inputs": {
          "axis": "vstack",
          "no_flatten": "False",
          "ravel_inputs": "False",
          "in1": "[Undefined]",
          "in2": "[Undefined]"
        },
        "outputs": {
          "out": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "applyxfm_deriv_mask_to_standard_190",
        "type": "node",
        "inputs": {
          "dimension": "[Undefined]",
          "input_image_type": "[Undefined]",
          "input_image": "[Undefined]",
          "output_image": "[Undefined]",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "MultiLabel",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "[Undefined]",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "collectxfm_deriv_mask_to_standard_190",
        "type": "node",
        "inputs": {
          "axis": "vstack",
          "no_flatten": "False",
          "ravel_inputs": "False",
          "in1": "[Undefined]",
          "in2": "[Undefined]"
        },
        "outputs": {
          "out": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_func_brain_to_standard_190",
        "type": "node",
        "inputs": {
          "mask_file": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "warp_funcreg-sbref_to_T1wtemplate_208",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}",
          "apply_warp_warp_funcreg-sbref_to_T1wtemplate_208": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
          "interp_string": "{'function_str': 'def interpolation_string(interpolation, reg_tool):\\n    \"\"\"Translate interpolation string to reg_tool-specific string.\"\"\"\\n    if reg_tool == \"ants\":\\n        pass\\n    elif reg_tool == \"fsl\":\\n        # translate to FSL\\n        # warning: flirt requires \\'nearestneighbour\\', but FSL applywarp uses\\n        #          \\'nn\\', so this is designed for applywarp, as all FSL xfm\\'s\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace(\"NearestNeighbor\", \"nn\")\\n    return interpolation\\n', 'reg_tool': 'ants'}",
          "single_ants_xfm_to_list": "{'function_str': 'def single_ants_xfm_to_list(transform):\\n    \"\"\"Convert a single ANTs transform to a list.\"\"\"\\n    return [transform]\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}",
          "apply_warp_warp_funcreg-sbref_to_T1wtemplate_208": "{'output_image': None}",
          "interp_string": "{'interpolation': None}",
          "single_ants_xfm_to_list": "{'transform_list': None}",
          "outputspec": "{'output_image': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "NearestNeighbor"
            },
            "outputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "apply_warp_warp_funcreg-sbref_to_T1wtemplate_208",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "[Undefined]",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "[Undefined]",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "interp_string",
            "type": "node",
            "inputs": {
              "function_str": "def interpolation_string(interpolation, reg_tool):\n    \"\"\"Translate interpolation string to reg_tool-specific string.\"\"\"\n    if reg_tool == \"ants\":\n        pass\n    elif reg_tool == \"fsl\":\n        # translate to FSL\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\n        #          in C-PAC are now converted to .nii.gz\n        interpolation = interpolation.replace(\"NearestNeighbor\", \"nn\")\n    return interpolation\n",
              "interpolation": "[Undefined]",
              "reg_tool": "ants"
            },
            "outputs": {
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "single_ants_xfm_to_list",
            "type": "node",
            "inputs": {
              "function_str": "def single_ants_xfm_to_list(transform):\n    \"\"\"Convert a single ANTs transform to a list.\"\"\"\n    return [transform]\n",
              "transform": "[Undefined]"
            },
            "outputs": {
              "transform_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "output_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "apply_warp_warp_funcreg-sbref_to_T1wtemplate_208"
          },
          {
            "origin": "inputspec",
            "target": "interp_string"
          },
          {
            "origin": "inputspec",
            "target": "single_ants_xfm_to_list"
          },
          {
            "origin": "apply_warp_warp_funcreg-sbref_to_T1wtemplate_208",
            "target": "outputspec"
          },
          {
            "origin": "interp_string",
            "target": "apply_warp_warp_funcreg-sbref_to_T1wtemplate_208"
          },
          {
            "origin": "single_ants_xfm_to_list",
            "target": "apply_warp_warp_funcreg-sbref_to_T1wtemplate_208"
          }
        ]
      },
      {
        "name": "write_composite_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-bold_to-template_mode-image_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "LanczosWindowedSinc",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_despiked_template_212",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_deriv_despiked_template_212",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "align_template_mask_to_template_data_space-template_reg-36_parameter_218",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "orientation": "[Undefined]",
          "resample_mode": "Cu",
          "voxel_size": "[Undefined]",
          "master": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nuisance_regression_space-template_reg-36_parameter_218",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'regressor_file': '[Undefined]', 'selector': '[Undefined]'}",
          "nuisance_regression": "{'TR': '[Undefined]', 'args': '[Undefined]', 'automask': '[Undefined]', 'bandpass': '[Undefined]', 'blur': '[Undefined]', 'cenmode': '[Undefined]', 'censor': '[Undefined]', 'censortr': '[Undefined]', 'concat': '[Undefined]', 'dsort': '[Undefined]', 'environ': {}, 'noblock': '[Undefined]', 'norm': False, 'num_threads': 1, 'out_file': 'residuals.nii.gz', 'outputtype': 'NIFTI_GZ', 'polort': 0, 'stopband': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'regressor_file': None, 'selector': None}",
          "nuisance_regression": "{'out_file': None}",
          "outputspec": "{'residual_file_path': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "regressor_file": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]"
            },
            "outputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "regressor_file": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "nuisance_regression",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "residuals.nii.gz",
              "censor": "[Undefined]",
              "censortr": "[Undefined]",
              "cenmode": "[Undefined]",
              "concat": "[Undefined]",
              "noblock": "[Undefined]",
              "ort": "[Undefined]",
              "polort": "0",
              "dsort": "[Undefined]",
              "bandpass": "[Undefined]",
              "stopband": "[Undefined]",
              "TR": "[Undefined]",
              "mask": "[Undefined]",
              "automask": "[Undefined]",
              "blur": "[Undefined]",
              "norm": "False",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "residual_file_path": "[Undefined]"
            },
            "outputs": {
              "residual_file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "nuisance_regression"
          },
          {
            "origin": "nuisance_regression",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "filtering_bold_and_regressors_space-template_reg-36_parameter_218",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'nuisance_selectors': {'Name': '36_parameter', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'GlobalSignal': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}}, 'regressors_file_path': '[Undefined]', 'tr': '[Undefined]'}",
          "frequency_filter": "{'bandpass_freqs': [0.01, 0.1], 'function_str': 'CPAC.nuisance.bandpass.bandpass_voxels', 'sample_period': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'functional_brain_mask_file_path': None, 'functional_file_path': None, 'nuisance_selectors': None, 'regressors_file_path': None, 'tr': None}",
          "frequency_filter": "{'bandpassed_file': None, 'regressor_file': None}",
          "outputspec": "{'residual_file_path': None, 'residual_regressor': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "functional_file_path": "[Undefined]",
              "regressors_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "nuisance_selectors": "{'Name': '36_parameter', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'GlobalSignal': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}}",
              "tr": "[Undefined]"
            },
            "outputs": {
              "functional_file_path": "[Undefined]",
              "regressors_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "nuisance_selectors": "[Undefined]",
              "tr": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "frequency_filter",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.nuisance.bandpass.bandpass_voxels",
              "realigned_file": "[Undefined]",
              "regressor_file": "[Undefined]",
              "bandpass_freqs": "[0.01, 0.1]",
              "sample_period": "[Undefined]"
            },
            "outputs": {
              "bandpassed_file": "[Undefined]",
              "regressor_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "residual_file_path": "[Undefined]",
              "residual_regressor": "[Undefined]"
            },
            "outputs": {
              "residual_file_path": "[Undefined]",
              "residual_regressor": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "frequency_filter"
          },
          {
            "origin": "frequency_filter",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "align_template_mask_to_template_data_space-template_res-derivative_reg-36_parameter_218",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "orientation": "[Undefined]",
          "resample_mode": "Cu",
          "voxel_size": "[Undefined]",
          "master": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nuisance_regression_space-template_res-derivative_reg-36_parameter_218",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'regressor_file': '[Undefined]', 'selector': '[Undefined]'}",
          "nuisance_regression": "{'TR': '[Undefined]', 'args': '[Undefined]', 'automask': '[Undefined]', 'bandpass': '[Undefined]', 'blur': '[Undefined]', 'cenmode': '[Undefined]', 'censor': '[Undefined]', 'censortr': '[Undefined]', 'concat': '[Undefined]', 'dsort': '[Undefined]', 'environ': {}, 'noblock': '[Undefined]', 'norm': False, 'num_threads': 1, 'out_file': 'residuals.nii.gz', 'outputtype': 'NIFTI_GZ', 'polort': 0, 'stopband': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'regressor_file': None, 'selector': None}",
          "nuisance_regression": "{'out_file': None}",
          "outputspec": "{'residual_file_path': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "regressor_file": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]"
            },
            "outputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "regressor_file": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "nuisance_regression",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "residuals.nii.gz",
              "censor": "[Undefined]",
              "censortr": "[Undefined]",
              "cenmode": "[Undefined]",
              "concat": "[Undefined]",
              "noblock": "[Undefined]",
              "ort": "[Undefined]",
              "polort": "0",
              "dsort": "[Undefined]",
              "bandpass": "[Undefined]",
              "stopband": "[Undefined]",
              "TR": "[Undefined]",
              "mask": "[Undefined]",
              "automask": "[Undefined]",
              "blur": "[Undefined]",
              "norm": "False",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "residual_file_path": "[Undefined]"
            },
            "outputs": {
              "residual_file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "nuisance_regression"
          },
          {
            "origin": "nuisance_regression",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "filtering_bold_and_regressors_space-template_res-derivative_reg-36_parameter_218",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'nuisance_selectors': {'Name': '36_parameter', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'GlobalSignal': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}}, 'regressors_file_path': '[Undefined]', 'tr': '[Undefined]'}",
          "frequency_filter": "{'bandpass_freqs': [0.01, 0.1], 'function_str': 'CPAC.nuisance.bandpass.bandpass_voxels', 'sample_period': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'functional_brain_mask_file_path': None, 'functional_file_path': None, 'nuisance_selectors': None, 'regressors_file_path': None, 'tr': None}",
          "frequency_filter": "{'bandpassed_file': None, 'regressor_file': None}",
          "outputspec": "{'residual_file_path': None, 'residual_regressor': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "functional_file_path": "[Undefined]",
              "regressors_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "nuisance_selectors": "{'Name': '36_parameter', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'GlobalSignal': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}}",
              "tr": "[Undefined]"
            },
            "outputs": {
              "functional_file_path": "[Undefined]",
              "regressors_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "nuisance_selectors": "[Undefined]",
              "tr": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "frequency_filter",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.nuisance.bandpass.bandpass_voxels",
              "realigned_file": "[Undefined]",
              "regressor_file": "[Undefined]",
              "bandpass_freqs": "[0.01, 0.1]",
              "sample_period": "[Undefined]"
            },
            "outputs": {
              "bandpassed_file": "[Undefined]",
              "regressor_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "residual_file_path": "[Undefined]",
              "residual_regressor": "[Undefined]"
            },
            "outputs": {
              "residual_file_path": "[Undefined]",
              "residual_regressor": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "frequency_filter"
          },
          {
            "origin": "frequency_filter",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "align_template_mask_to_template_data_space-template_reg-aCompCor_228",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "orientation": "[Undefined]",
          "resample_mode": "Cu",
          "voxel_size": "[Undefined]",
          "master": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nuisance_regression_space-template_reg-aCompCor_228",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'regressor_file': '[Undefined]', 'selector': '[Undefined]'}",
          "nuisance_regression": "{'TR': '[Undefined]', 'args': '[Undefined]', 'automask': '[Undefined]', 'bandpass': '[Undefined]', 'blur': '[Undefined]', 'cenmode': '[Undefined]', 'censor': '[Undefined]', 'censortr': '[Undefined]', 'concat': '[Undefined]', 'dsort': '[Undefined]', 'environ': {}, 'noblock': '[Undefined]', 'norm': False, 'num_threads': 1, 'out_file': 'residuals.nii.gz', 'outputtype': 'NIFTI_GZ', 'polort': 0, 'stopband': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'regressor_file': None, 'selector': None}",
          "nuisance_regression": "{'out_file': None}",
          "outputspec": "{'residual_file_path': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "regressor_file": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]"
            },
            "outputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "regressor_file": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "nuisance_regression",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "residuals.nii.gz",
              "censor": "[Undefined]",
              "censortr": "[Undefined]",
              "cenmode": "[Undefined]",
              "concat": "[Undefined]",
              "noblock": "[Undefined]",
              "ort": "[Undefined]",
              "polort": "0",
              "dsort": "[Undefined]",
              "bandpass": "[Undefined]",
              "stopband": "[Undefined]",
              "TR": "[Undefined]",
              "mask": "[Undefined]",
              "automask": "[Undefined]",
              "blur": "[Undefined]",
              "norm": "False",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "residual_file_path": "[Undefined]"
            },
            "outputs": {
              "residual_file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "nuisance_regression"
          },
          {
            "origin": "nuisance_regression",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "filtering_bold_and_regressors_space-template_reg-aCompCor_228",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'nuisance_selectors': {'Name': 'aCompCor', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'aCompCor': {'summary': {'method': 'DetrendPC', 'components': 5}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid'], 'extraction_resolution': 2}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}}, 'regressors_file_path': '[Undefined]', 'tr': '[Undefined]'}",
          "frequency_filter": "{'bandpass_freqs': [0.01, 0.1], 'function_str': 'CPAC.nuisance.bandpass.bandpass_voxels', 'sample_period': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'functional_brain_mask_file_path': None, 'functional_file_path': None, 'nuisance_selectors': None, 'regressors_file_path': None, 'tr': None}",
          "frequency_filter": "{'bandpassed_file': None, 'regressor_file': None}",
          "outputspec": "{'residual_file_path': None, 'residual_regressor': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "functional_file_path": "[Undefined]",
              "regressors_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "nuisance_selectors": "{'Name': 'aCompCor', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'aCompCor': {'summary': {'method': 'DetrendPC', 'components': 5}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid'], 'extraction_resolution': 2}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}}",
              "tr": "[Undefined]"
            },
            "outputs": {
              "functional_file_path": "[Undefined]",
              "regressors_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "nuisance_selectors": "[Undefined]",
              "tr": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "frequency_filter",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.nuisance.bandpass.bandpass_voxels",
              "realigned_file": "[Undefined]",
              "regressor_file": "[Undefined]",
              "bandpass_freqs": "[0.01, 0.1]",
              "sample_period": "[Undefined]"
            },
            "outputs": {
              "bandpassed_file": "[Undefined]",
              "regressor_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "residual_file_path": "[Undefined]",
              "residual_regressor": "[Undefined]"
            },
            "outputs": {
              "residual_file_path": "[Undefined]",
              "residual_regressor": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "frequency_filter"
          },
          {
            "origin": "frequency_filter",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "align_template_mask_to_template_data_space-template_res-derivative_reg-aCompCor_228",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "orientation": "[Undefined]",
          "resample_mode": "Cu",
          "voxel_size": "[Undefined]",
          "master": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nuisance_regression_space-template_res-derivative_reg-aCompCor_228",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'regressor_file': '[Undefined]', 'selector': '[Undefined]'}",
          "nuisance_regression": "{'TR': '[Undefined]', 'args': '[Undefined]', 'automask': '[Undefined]', 'bandpass': '[Undefined]', 'blur': '[Undefined]', 'cenmode': '[Undefined]', 'censor': '[Undefined]', 'censortr': '[Undefined]', 'concat': '[Undefined]', 'dsort': '[Undefined]', 'environ': {}, 'noblock': '[Undefined]', 'norm': False, 'num_threads': 1, 'out_file': 'residuals.nii.gz', 'outputtype': 'NIFTI_GZ', 'polort': 0, 'stopband': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'regressor_file': None, 'selector': None}",
          "nuisance_regression": "{'out_file': None}",
          "outputspec": "{'residual_file_path': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "regressor_file": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]"
            },
            "outputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "regressor_file": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "nuisance_regression",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "residuals.nii.gz",
              "censor": "[Undefined]",
              "censortr": "[Undefined]",
              "cenmode": "[Undefined]",
              "concat": "[Undefined]",
              "noblock": "[Undefined]",
              "ort": "[Undefined]",
              "polort": "0",
              "dsort": "[Undefined]",
              "bandpass": "[Undefined]",
              "stopband": "[Undefined]",
              "TR": "[Undefined]",
              "mask": "[Undefined]",
              "automask": "[Undefined]",
              "blur": "[Undefined]",
              "norm": "False",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "residual_file_path": "[Undefined]"
            },
            "outputs": {
              "residual_file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "nuisance_regression"
          },
          {
            "origin": "nuisance_regression",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "filtering_bold_and_regressors_space-template_res-derivative_reg-aCompCor_228",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'nuisance_selectors': {'Name': 'aCompCor', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'aCompCor': {'summary': {'method': 'DetrendPC', 'components': 5}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid'], 'extraction_resolution': 2}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}}, 'regressors_file_path': '[Undefined]', 'tr': '[Undefined]'}",
          "frequency_filter": "{'bandpass_freqs': [0.01, 0.1], 'function_str': 'CPAC.nuisance.bandpass.bandpass_voxels', 'sample_period': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'functional_brain_mask_file_path': None, 'functional_file_path': None, 'nuisance_selectors': None, 'regressors_file_path': None, 'tr': None}",
          "frequency_filter": "{'bandpassed_file': None, 'regressor_file': None}",
          "outputspec": "{'residual_file_path': None, 'residual_regressor': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "functional_file_path": "[Undefined]",
              "regressors_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "nuisance_selectors": "{'Name': 'aCompCor', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}, 'aCompCor': {'summary': {'method': 'DetrendPC', 'components': 5}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid'], 'extraction_resolution': 2}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True, 'summary': 'Mean'}}",
              "tr": "[Undefined]"
            },
            "outputs": {
              "functional_file_path": "[Undefined]",
              "regressors_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "nuisance_selectors": "[Undefined]",
              "tr": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "frequency_filter",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.nuisance.bandpass.bandpass_voxels",
              "realigned_file": "[Undefined]",
              "regressor_file": "[Undefined]",
              "bandpass_freqs": "[0.01, 0.1]",
              "sample_period": "[Undefined]"
            },
            "outputs": {
              "bandpassed_file": "[Undefined]",
              "regressor_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "residual_file_path": "[Undefined]",
              "residual_regressor": "[Undefined]"
            },
            "outputs": {
              "residual_file_path": "[Undefined]",
              "residual_regressor": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "frequency_filter"
          },
          {
            "origin": "frequency_filter",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "resample_functional_roi_252",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resample_func_roi",
          "in_func": "[Undefined]",
          "in_roi": "[Undefined]",
          "realignment": "ROI_to_func",
          "identity_matrix": "/usr/share/fsl/6.0/etc/flirtsch/ident.mat"
        },
        "outputs": {
          "out_func": "[Undefined]",
          "out_roi": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "roi_dataflow_252",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0', 'mask': '[Undefined]', 'mask_file': '[Undefined]'}",
          "check_for_s3": "{'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'mask'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'creds_path': None, 'dl_dir': None, 'mask': None, 'mask_file': None}",
          "check_for_s3": "{'local_path': None}",
          "outputspec": "{'out_file': None, 'out_name': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "creds_path": "None",
              "dl_dir": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0"
            },
            "outputs": {
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_for_s3",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "mask"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "out_name": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_name": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "check_for_s3"
          },
          {
            "origin": "inputspec",
            "target": "outputspec"
          },
          {
            "origin": "check_for_s3",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "roi_timeseries_252",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'rest': '[Undefined]'}",
          "3dROIstats": "{'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}",
          "input_roi": "{'roi': '[Undefined]'}",
          "clean_roi_csv": "{'function_str': 'def clean_roi_csv(roi_csv):\\n    \"\"\"Remove file path comments from every other row of AFNI\\'s 3dROIstats output.\\n\\n    3dROIstats has a -nobriklab and a -quiet option, but neither remove the\\n    file path comments while retaining the ROI label header, which is needed.\\n\\n    If there are no file path comments to remove, this function simply\\n    passes the original file as output, instead of unnecessarily opening and\\n    re-writing it.\\n\\n    Parameters\\n    ----------\\n    roi_csv : str\\n        path to CSV\\n\\n    Returns\\n    -------\\n    roi_array : numpy.ndarray\\n\\n    edited_roi_csv: str\\n        path to CSV\\n    \"\"\"\\n    import os\\n\\n    import numpy as np\\n    import pandas as pd\\n\\n    with open(roi_csv, \"r\") as f:\\n        csv_lines = f.readlines()\\n\\n    # flag whether to re-write\\n    modified = False\\n\\n    edited_lines = []\\n    for line in csv_lines:\\n        line = line.replace(\"\\\\t\\\\t\\\\t\", \"\")\\n        line = line.replace(\"\\\\t\\\\t\", \"\")\\n        line = line.replace(\"\\\\t\", \",\")\\n        line = line.replace(\"#,\", \"#\")\\n        if \"#\" in line:\\n            if \"/\" in line and \".\" in line:\\n                modified = True\\n                continue\\n            if \"Sub-brick\" in line:\\n                modified = True\\n                continue\\n        edited_lines.append(line)\\n\\n    if modified:\\n        edited_roi_csv = os.path.join(os.getcwd(), os.path.basename(roi_csv))\\n        with open(edited_roi_csv, \"wt\") as f:\\n            for line in edited_lines:\\n                f.write(line)\\n    else:\\n        edited_roi_csv = roi_csv\\n\\n    data = pd.read_csv(edited_roi_csv, sep=\",\", header=1)\\n    data = data.dropna(axis=1)\\n    roi_array = np.transpose(data.values)\\n\\n    return roi_array, edited_roi_csv\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'rest': None}",
          "3dROIstats": "{'out_file': None}",
          "input_roi": "{'roi': None}",
          "clean_roi_csv": "{'edited_roi_csv': None, 'roi_array': None}",
          "outputspec": "{'roi_csv': None, 'roi_ts': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "rest": "[Undefined]"
            },
            "outputs": {
              "rest": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "3dROIstats",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "mask_f2short": "[Undefined]",
              "num_roi": "[Undefined]",
              "zerofill": "[Undefined]",
              "roisel": "[Undefined]",
              "debug": "[Undefined]",
              "quiet": "False",
              "nomeanout": "[Undefined]",
              "nobriklab": "[Undefined]",
              "format1D": "[Undefined]",
              "format1DR": "[Undefined]",
              "stat": "[Undefined]",
              "out_file": "[Undefined]",
              "args": "-1Dformat",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "input_roi",
            "type": "node",
            "inputs": {
              "roi": "[Undefined]"
            },
            "outputs": {
              "roi": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "clean_roi_csv",
            "type": "node",
            "inputs": {
              "function_str": "def clean_roi_csv(roi_csv):\n    \"\"\"Remove file path comments from every other row of AFNI's 3dROIstats output.\n\n    3dROIstats has a -nobriklab and a -quiet option, but neither remove the\n    file path comments while retaining the ROI label header, which is needed.\n\n    If there are no file path comments to remove, this function simply\n    passes the original file as output, instead of unnecessarily opening and\n    re-writing it.\n\n    Parameters\n    ----------\n    roi_csv : str\n        path to CSV\n\n    Returns\n    -------\n    roi_array : numpy.ndarray\n\n    edited_roi_csv: str\n        path to CSV\n    \"\"\"\n    import os\n\n    import numpy as np\n    import pandas as pd\n\n    with open(roi_csv, \"r\") as f:\n        csv_lines = f.readlines()\n\n    # flag whether to re-write\n    modified = False\n\n    edited_lines = []\n    for line in csv_lines:\n        line = line.replace(\"\\t\\t\\t\", \"\")\n        line = line.replace(\"\\t\\t\", \"\")\n        line = line.replace(\"\\t\", \",\")\n        line = line.replace(\"#,\", \"#\")\n        if \"#\" in line:\n            if \"/\" in line and \".\" in line:\n                modified = True\n                continue\n            if \"Sub-brick\" in line:\n                modified = True\n                continue\n        edited_lines.append(line)\n\n    if modified:\n        edited_roi_csv = os.path.join(os.getcwd(), os.path.basename(roi_csv))\n        with open(edited_roi_csv, \"wt\") as f:\n            for line in edited_lines:\n                f.write(line)\n    else:\n        edited_roi_csv = roi_csv\n\n    data = pd.read_csv(edited_roi_csv, sep=\",\", header=1)\n    data = data.dropna(axis=1)\n    roi_array = np.transpose(data.values)\n\n    return roi_array, edited_roi_csv\n",
              "roi_csv": "[Undefined]"
            },
            "outputs": {
              "roi_array": "[Undefined]",
              "edited_roi_csv": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "roi_ts": "[Undefined]",
              "roi_csv": "[Undefined]"
            },
            "outputs": {
              "roi_ts": "[Undefined]",
              "roi_csv": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "3dROIstats"
          },
          {
            "origin": "3dROIstats",
            "target": "clean_roi_csv"
          },
          {
            "origin": "input_roi",
            "target": "3dROIstats"
          },
          {
            "origin": "clean_roi_csv",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "connectomeNilearnPearson_252",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'atlas_name': '[Undefined]', 'in_file': '[Undefined]', 'in_rois': '[Undefined]', 'method': 'Pearson'}",
          "connectome": "{'function_str': 'CPAC.connectome.connectivity_matrix.compute_connectome_nilearn'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'atlas_name': None, 'in_file': None, 'in_rois': None, 'method': None}",
          "connectome": "{'out_file': None}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_rois": "[Undefined]",
              "in_file": "[Undefined]",
              "method": "Pearson",
              "atlas_name": "[Undefined]"
            },
            "outputs": {
              "in_rois": "[Undefined]",
              "in_file": "[Undefined]",
              "method": "[Undefined]",
              "atlas_name": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "connectome",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.connectome.connectivity_matrix.compute_connectome_nilearn",
              "in_rois": "[Undefined]",
              "in_file": "[Undefined]",
              "method": "[Undefined]",
              "atlas_name": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "connectome"
          },
          {
            "origin": "connectome",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "connectomeNilearnPartial_252",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'atlas_name': '[Undefined]', 'in_file': '[Undefined]', 'in_rois': '[Undefined]', 'method': 'Partial'}",
          "connectome": "{'function_str': 'CPAC.connectome.connectivity_matrix.compute_connectome_nilearn'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'atlas_name': None, 'in_file': None, 'in_rois': None, 'method': None}",
          "connectome": "{'out_file': None}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_rois": "[Undefined]",
              "in_file": "[Undefined]",
              "method": "Partial",
              "atlas_name": "[Undefined]"
            },
            "outputs": {
              "in_rois": "[Undefined]",
              "in_file": "[Undefined]",
              "method": "[Undefined]",
              "atlas_name": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "connectome",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.connectome.connectivity_matrix.compute_connectome_nilearn",
              "in_rois": "[Undefined]",
              "in_file": "[Undefined]",
              "method": "[Undefined]",
              "atlas_name": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "connectome"
          },
          {
            "origin": "connectome",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "resample_functional_roi_254",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resample_func_roi",
          "in_func": "[Undefined]",
          "in_roi": "[Undefined]",
          "realignment": "ROI_to_func",
          "identity_matrix": "/usr/share/fsl/6.0/etc/flirtsch/ident.mat"
        },
        "outputs": {
          "out_func": "[Undefined]",
          "out_roi": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "roi_dataflow_254",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0', 'mask': '[Undefined]', 'mask_file': '[Undefined]'}",
          "check_for_s3": "{'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'mask'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'creds_path': None, 'dl_dir': None, 'mask': None, 'mask_file': None}",
          "check_for_s3": "{'local_path': None}",
          "outputspec": "{'out_file': None, 'out_name': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "creds_path": "None",
              "dl_dir": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0"
            },
            "outputs": {
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_for_s3",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "mask"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "out_name": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_name": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "check_for_s3"
          },
          {
            "origin": "inputspec",
            "target": "outputspec"
          },
          {
            "origin": "check_for_s3",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "roi_timeseries_254",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'rest': '[Undefined]'}",
          "3dROIstats": "{'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}",
          "input_roi": "{'roi': '[Undefined]'}",
          "clean_roi_csv": "{'function_str': 'def clean_roi_csv(roi_csv):\\n    \"\"\"Remove file path comments from every other row of AFNI\\'s 3dROIstats output.\\n\\n    3dROIstats has a -nobriklab and a -quiet option, but neither remove the\\n    file path comments while retaining the ROI label header, which is needed.\\n\\n    If there are no file path comments to remove, this function simply\\n    passes the original file as output, instead of unnecessarily opening and\\n    re-writing it.\\n\\n    Parameters\\n    ----------\\n    roi_csv : str\\n        path to CSV\\n\\n    Returns\\n    -------\\n    roi_array : numpy.ndarray\\n\\n    edited_roi_csv: str\\n        path to CSV\\n    \"\"\"\\n    import os\\n\\n    import numpy as np\\n    import pandas as pd\\n\\n    with open(roi_csv, \"r\") as f:\\n        csv_lines = f.readlines()\\n\\n    # flag whether to re-write\\n    modified = False\\n\\n    edited_lines = []\\n    for line in csv_lines:\\n        line = line.replace(\"\\\\t\\\\t\\\\t\", \"\")\\n        line = line.replace(\"\\\\t\\\\t\", \"\")\\n        line = line.replace(\"\\\\t\", \",\")\\n        line = line.replace(\"#,\", \"#\")\\n        if \"#\" in line:\\n            if \"/\" in line and \".\" in line:\\n                modified = True\\n                continue\\n            if \"Sub-brick\" in line:\\n                modified = True\\n                continue\\n        edited_lines.append(line)\\n\\n    if modified:\\n        edited_roi_csv = os.path.join(os.getcwd(), os.path.basename(roi_csv))\\n        with open(edited_roi_csv, \"wt\") as f:\\n            for line in edited_lines:\\n                f.write(line)\\n    else:\\n        edited_roi_csv = roi_csv\\n\\n    data = pd.read_csv(edited_roi_csv, sep=\",\", header=1)\\n    data = data.dropna(axis=1)\\n    roi_array = np.transpose(data.values)\\n\\n    return roi_array, edited_roi_csv\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'rest': None}",
          "3dROIstats": "{'out_file': None}",
          "input_roi": "{'roi': None}",
          "clean_roi_csv": "{'edited_roi_csv': None, 'roi_array': None}",
          "outputspec": "{'roi_csv': None, 'roi_ts': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "rest": "[Undefined]"
            },
            "outputs": {
              "rest": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "3dROIstats",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "mask_f2short": "[Undefined]",
              "num_roi": "[Undefined]",
              "zerofill": "[Undefined]",
              "roisel": "[Undefined]",
              "debug": "[Undefined]",
              "quiet": "False",
              "nomeanout": "[Undefined]",
              "nobriklab": "[Undefined]",
              "format1D": "[Undefined]",
              "format1DR": "[Undefined]",
              "stat": "[Undefined]",
              "out_file": "[Undefined]",
              "args": "-1Dformat",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "input_roi",
            "type": "node",
            "inputs": {
              "roi": "[Undefined]"
            },
            "outputs": {
              "roi": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "clean_roi_csv",
            "type": "node",
            "inputs": {
              "function_str": "def clean_roi_csv(roi_csv):\n    \"\"\"Remove file path comments from every other row of AFNI's 3dROIstats output.\n\n    3dROIstats has a -nobriklab and a -quiet option, but neither remove the\n    file path comments while retaining the ROI label header, which is needed.\n\n    If there are no file path comments to remove, this function simply\n    passes the original file as output, instead of unnecessarily opening and\n    re-writing it.\n\n    Parameters\n    ----------\n    roi_csv : str\n        path to CSV\n\n    Returns\n    -------\n    roi_array : numpy.ndarray\n\n    edited_roi_csv: str\n        path to CSV\n    \"\"\"\n    import os\n\n    import numpy as np\n    import pandas as pd\n\n    with open(roi_csv, \"r\") as f:\n        csv_lines = f.readlines()\n\n    # flag whether to re-write\n    modified = False\n\n    edited_lines = []\n    for line in csv_lines:\n        line = line.replace(\"\\t\\t\\t\", \"\")\n        line = line.replace(\"\\t\\t\", \"\")\n        line = line.replace(\"\\t\", \",\")\n        line = line.replace(\"#,\", \"#\")\n        if \"#\" in line:\n            if \"/\" in line and \".\" in line:\n                modified = True\n                continue\n            if \"Sub-brick\" in line:\n                modified = True\n                continue\n        edited_lines.append(line)\n\n    if modified:\n        edited_roi_csv = os.path.join(os.getcwd(), os.path.basename(roi_csv))\n        with open(edited_roi_csv, \"wt\") as f:\n            for line in edited_lines:\n                f.write(line)\n    else:\n        edited_roi_csv = roi_csv\n\n    data = pd.read_csv(edited_roi_csv, sep=\",\", header=1)\n    data = data.dropna(axis=1)\n    roi_array = np.transpose(data.values)\n\n    return roi_array, edited_roi_csv\n",
              "roi_csv": "[Undefined]"
            },
            "outputs": {
              "roi_array": "[Undefined]",
              "edited_roi_csv": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "roi_ts": "[Undefined]",
              "roi_csv": "[Undefined]"
            },
            "outputs": {
              "roi_ts": "[Undefined]",
              "roi_csv": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "3dROIstats"
          },
          {
            "origin": "3dROIstats",
            "target": "clean_roi_csv"
          },
          {
            "origin": "input_roi",
            "target": "3dROIstats"
          },
          {
            "origin": "clean_roi_csv",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "connectomeNilearnPearson_254",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'atlas_name': '[Undefined]', 'in_file': '[Undefined]', 'in_rois': '[Undefined]', 'method': 'Pearson'}",
          "connectome": "{'function_str': 'CPAC.connectome.connectivity_matrix.compute_connectome_nilearn'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'atlas_name': None, 'in_file': None, 'in_rois': None, 'method': None}",
          "connectome": "{'out_file': None}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_rois": "[Undefined]",
              "in_file": "[Undefined]",
              "method": "Pearson",
              "atlas_name": "[Undefined]"
            },
            "outputs": {
              "in_rois": "[Undefined]",
              "in_file": "[Undefined]",
              "method": "[Undefined]",
              "atlas_name": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "connectome",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.connectome.connectivity_matrix.compute_connectome_nilearn",
              "in_rois": "[Undefined]",
              "in_file": "[Undefined]",
              "method": "[Undefined]",
              "atlas_name": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "connectome"
          },
          {
            "origin": "connectome",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "connectomeNilearnPartial_254",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'atlas_name': '[Undefined]', 'in_file': '[Undefined]', 'in_rois': '[Undefined]', 'method': 'Partial'}",
          "connectome": "{'function_str': 'CPAC.connectome.connectivity_matrix.compute_connectome_nilearn'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'atlas_name': None, 'in_file': None, 'in_rois': None, 'method': None}",
          "connectome": "{'out_file': None}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_rois": "[Undefined]",
              "in_file": "[Undefined]",
              "method": "Partial",
              "atlas_name": "[Undefined]"
            },
            "outputs": {
              "in_rois": "[Undefined]",
              "in_file": "[Undefined]",
              "method": "[Undefined]",
              "atlas_name": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "connectome",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.connectome.connectivity_matrix.compute_connectome_nilearn",
              "in_rois": "[Undefined]",
              "in_file": "[Undefined]",
              "method": "[Undefined]",
              "atlas_name": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "connectome"
          },
          {
            "origin": "connectome",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "alff_falff_264",
        "type": "workflow",
        "inputs": {
          "hp_input": "{'hp': [0.01]}",
          "bandpass_filtering": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blur': '[Undefined]', 'despike': '[Undefined]', 'environ': {}, 'localPV': '[Undefined]', 'mask': '[Undefined]', 'nfft': '[Undefined]', 'no_detrend': '[Undefined]', 'normalize': '[Undefined]', 'notrans': '[Undefined]', 'num_threads': 1, 'orthogonalize_dset': '[Undefined]', 'orthogonalize_file': '[Undefined]', 'out_file': 'residual_filtered.nii.gz', 'outputtype': 'NIFTI_GZ', 'tr': '[Undefined]'}",
          "lp_input": "{'lp': [0.1]}",
          "inputspec": "{'rest_mask': '[Undefined]', 'rest_res': '[Undefined]'}",
          "get_option_string": "{'function_str': '@Function.sig_imports([\"from pathlib import Path\"])\\ndef get_opt_string(mask: Path | str) -> str:\\n    \"\"\"\\n    Return option string for 3dTstat.\\n\\n    Parameters\\n    ----------\\n    mask : string\\n        Path to mask file\\n\\n    Returns\\n    -------\\n    opt_str : string\\n        Command args\\n\\n    \"\"\"\\n    return f\" -stdev -mask {mask}\"\\n'}",
          "stddev_filtered": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'out_file': 'alff.nii.gz', 'outputtype': 'NIFTI_GZ'}",
          "outputspec": "{}",
          "stddev_unfiltered": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'out_file': 'residual_3dT.nii.gz', 'outputtype': 'NIFTI_GZ'}",
          "falff": "{'args': '-float', 'environ': {}, 'expr': '(1.0*bool(a))*((1.0*b)/(1.0*c))', 'num_threads': 1, 'other': '[Undefined]', 'out_file': 'falff.nii.gz', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}"
        },
        "outputs": {
          "hp_input": "{'hp': None}",
          "bandpass_filtering": "{'out_file': None}",
          "lp_input": "{'lp': None}",
          "inputspec": "{'rest_mask': None, 'rest_res': None}",
          "get_option_string": "{'option_string': None}",
          "stddev_filtered": "{'out_file': None}",
          "outputspec": "{'alff_img': None, 'falff_img': None}",
          "stddev_unfiltered": "{'out_file': None}",
          "falff": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "hp_input",
            "type": "node",
            "inputs": {
              "hp": "[0.01]"
            },
            "outputs": {
              "hp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "bandpass_filtering",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "residual_filtered.nii.gz",
              "lowpass": "[Undefined]",
              "highpass": "[Undefined]",
              "mask": "[Undefined]",
              "despike": "[Undefined]",
              "orthogonalize_file": "[Undefined]",
              "orthogonalize_dset": "[Undefined]",
              "no_detrend": "[Undefined]",
              "tr": "[Undefined]",
              "nfft": "[Undefined]",
              "normalize": "[Undefined]",
              "automask": "[Undefined]",
              "blur": "[Undefined]",
              "localPV": "[Undefined]",
              "notrans": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "lp_input",
            "type": "node",
            "inputs": {
              "lp": "[0.1]"
            },
            "outputs": {
              "lp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "rest_res": "[Undefined]",
              "rest_mask": "[Undefined]"
            },
            "outputs": {
              "rest_res": "[Undefined]",
              "rest_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "get_option_string",
            "type": "node",
            "inputs": {
              "function_str": "@Function.sig_imports([\"from pathlib import Path\"])\ndef get_opt_string(mask: Path | str) -> str:\n    \"\"\"\n    Return option string for 3dTstat.\n\n    Parameters\n    ----------\n    mask : string\n        Path to mask file\n\n    Returns\n    -------\n    opt_str : string\n        Command args\n\n    \"\"\"\n    return f\" -stdev -mask {mask}\"\n",
              "mask": "[Undefined]"
            },
            "outputs": {
              "option_string": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "stddev_filtered",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "alff.nii.gz",
              "mask": "[Undefined]",
              "options": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "alff_img": "[Undefined]",
              "falff_img": "[Undefined]"
            },
            "outputs": {
              "alff_img": "[Undefined]",
              "falff_img": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "stddev_unfiltered",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "residual_3dT.nii.gz",
              "mask": "[Undefined]",
              "options": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "falff",
            "type": "node",
            "inputs": {
              "in_file_a": "[Undefined]",
              "in_file_b": "[Undefined]",
              "in_file_c": "[Undefined]",
              "out_file": "falff.nii.gz",
              "expr": "(1.0*bool(a))*((1.0*b)/(1.0*c))",
              "start_idx": "[Undefined]",
              "stop_idx": "[Undefined]",
              "single_idx": "[Undefined]",
              "overwrite": "[Undefined]",
              "other": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "-float",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "hp_input",
            "target": "bandpass_filtering"
          },
          {
            "origin": "bandpass_filtering",
            "target": "stddev_filtered"
          },
          {
            "origin": "lp_input",
            "target": "bandpass_filtering"
          },
          {
            "origin": "inputspec",
            "target": "bandpass_filtering"
          },
          {
            "origin": "inputspec",
            "target": "get_option_string"
          },
          {
            "origin": "inputspec",
            "target": "stddev_unfiltered"
          },
          {
            "origin": "inputspec",
            "target": "falff"
          },
          {
            "origin": "get_option_string",
            "target": "stddev_filtered"
          },
          {
            "origin": "get_option_string",
            "target": "stddev_unfiltered"
          },
          {
            "origin": "stddev_filtered",
            "target": "outputspec"
          },
          {
            "origin": "stddev_filtered",
            "target": "falff"
          },
          {
            "origin": "stddev_unfiltered",
            "target": "falff"
          },
          {
            "origin": "falff",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_alff_smooth_AFNI_264",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "smooth": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "fwhm_input": "{'fwhm': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "smooth": "{'out_file': None}",
          "fwhm_input": "{'fwhm': None}",
          "outputspec": "{'fwhm': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "smooth",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "automask": "[Undefined]",
              "fwhm": "[Undefined]",
              "fwhmxy": "[Undefined]",
              "blurmaster": "[Undefined]",
              "mask": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "out_file": "[Undefined]",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fwhm_input",
            "type": "node",
            "inputs": {
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "smooth"
          },
          {
            "origin": "smooth",
            "target": "outputspec"
          },
          {
            "origin": "fwhm_input",
            "target": "smooth"
          },
          {
            "origin": "fwhm_input",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_alff_zstd_264",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_desc-sm_alff_zstd_264",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_falff_smooth_AFNI_264",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "smooth": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "fwhm_input": "{'fwhm': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "smooth": "{'out_file': None}",
          "fwhm_input": "{'fwhm': None}",
          "outputspec": "{'fwhm': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "smooth",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "automask": "[Undefined]",
              "fwhm": "[Undefined]",
              "fwhmxy": "[Undefined]",
              "blurmaster": "[Undefined]",
              "mask": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "out_file": "[Undefined]",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fwhm_input",
            "type": "node",
            "inputs": {
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "smooth"
          },
          {
            "origin": "smooth",
            "target": "outputspec"
          },
          {
            "origin": "fwhm_input",
            "target": "smooth"
          },
          {
            "origin": "fwhm_input",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_falff_zstd_264",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_desc-sm_falff_zstd_264",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "alff_falff_268",
        "type": "workflow",
        "inputs": {
          "hp_input": "{'hp': [0.01]}",
          "bandpass_filtering": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blur': '[Undefined]', 'despike': '[Undefined]', 'environ': {}, 'localPV': '[Undefined]', 'mask': '[Undefined]', 'nfft': '[Undefined]', 'no_detrend': '[Undefined]', 'normalize': '[Undefined]', 'notrans': '[Undefined]', 'num_threads': 1, 'orthogonalize_dset': '[Undefined]', 'orthogonalize_file': '[Undefined]', 'out_file': 'residual_filtered.nii.gz', 'outputtype': 'NIFTI_GZ', 'tr': '[Undefined]'}",
          "lp_input": "{'lp': [0.1]}",
          "inputspec": "{'rest_mask': '[Undefined]', 'rest_res': '[Undefined]'}",
          "get_option_string": "{'function_str': '@Function.sig_imports([\"from pathlib import Path\"])\\ndef get_opt_string(mask: Path | str) -> str:\\n    \"\"\"\\n    Return option string for 3dTstat.\\n\\n    Parameters\\n    ----------\\n    mask : string\\n        Path to mask file\\n\\n    Returns\\n    -------\\n    opt_str : string\\n        Command args\\n\\n    \"\"\"\\n    return f\" -stdev -mask {mask}\"\\n'}",
          "stddev_filtered": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'out_file': 'alff.nii.gz', 'outputtype': 'NIFTI_GZ'}",
          "outputspec": "{}",
          "stddev_unfiltered": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'out_file': 'residual_3dT.nii.gz', 'outputtype': 'NIFTI_GZ'}",
          "falff": "{'args': '-float', 'environ': {}, 'expr': '(1.0*bool(a))*((1.0*b)/(1.0*c))', 'num_threads': 1, 'other': '[Undefined]', 'out_file': 'falff.nii.gz', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}"
        },
        "outputs": {
          "hp_input": "{'hp': None}",
          "bandpass_filtering": "{'out_file': None}",
          "lp_input": "{'lp': None}",
          "inputspec": "{'rest_mask': None, 'rest_res': None}",
          "get_option_string": "{'option_string': None}",
          "stddev_filtered": "{'out_file': None}",
          "outputspec": "{'alff_img': None, 'falff_img': None}",
          "stddev_unfiltered": "{'out_file': None}",
          "falff": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "hp_input",
            "type": "node",
            "inputs": {
              "hp": "[0.01]"
            },
            "outputs": {
              "hp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "bandpass_filtering",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "residual_filtered.nii.gz",
              "lowpass": "[Undefined]",
              "highpass": "[Undefined]",
              "mask": "[Undefined]",
              "despike": "[Undefined]",
              "orthogonalize_file": "[Undefined]",
              "orthogonalize_dset": "[Undefined]",
              "no_detrend": "[Undefined]",
              "tr": "[Undefined]",
              "nfft": "[Undefined]",
              "normalize": "[Undefined]",
              "automask": "[Undefined]",
              "blur": "[Undefined]",
              "localPV": "[Undefined]",
              "notrans": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "lp_input",
            "type": "node",
            "inputs": {
              "lp": "[0.1]"
            },
            "outputs": {
              "lp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "rest_res": "[Undefined]",
              "rest_mask": "[Undefined]"
            },
            "outputs": {
              "rest_res": "[Undefined]",
              "rest_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "get_option_string",
            "type": "node",
            "inputs": {
              "function_str": "@Function.sig_imports([\"from pathlib import Path\"])\ndef get_opt_string(mask: Path | str) -> str:\n    \"\"\"\n    Return option string for 3dTstat.\n\n    Parameters\n    ----------\n    mask : string\n        Path to mask file\n\n    Returns\n    -------\n    opt_str : string\n        Command args\n\n    \"\"\"\n    return f\" -stdev -mask {mask}\"\n",
              "mask": "[Undefined]"
            },
            "outputs": {
              "option_string": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "stddev_filtered",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "alff.nii.gz",
              "mask": "[Undefined]",
              "options": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "alff_img": "[Undefined]",
              "falff_img": "[Undefined]"
            },
            "outputs": {
              "alff_img": "[Undefined]",
              "falff_img": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "stddev_unfiltered",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "residual_3dT.nii.gz",
              "mask": "[Undefined]",
              "options": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "falff",
            "type": "node",
            "inputs": {
              "in_file_a": "[Undefined]",
              "in_file_b": "[Undefined]",
              "in_file_c": "[Undefined]",
              "out_file": "falff.nii.gz",
              "expr": "(1.0*bool(a))*((1.0*b)/(1.0*c))",
              "start_idx": "[Undefined]",
              "stop_idx": "[Undefined]",
              "single_idx": "[Undefined]",
              "overwrite": "[Undefined]",
              "other": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "-float",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "hp_input",
            "target": "bandpass_filtering"
          },
          {
            "origin": "bandpass_filtering",
            "target": "stddev_filtered"
          },
          {
            "origin": "lp_input",
            "target": "bandpass_filtering"
          },
          {
            "origin": "inputspec",
            "target": "bandpass_filtering"
          },
          {
            "origin": "inputspec",
            "target": "get_option_string"
          },
          {
            "origin": "inputspec",
            "target": "stddev_unfiltered"
          },
          {
            "origin": "inputspec",
            "target": "falff"
          },
          {
            "origin": "get_option_string",
            "target": "stddev_filtered"
          },
          {
            "origin": "get_option_string",
            "target": "stddev_unfiltered"
          },
          {
            "origin": "stddev_filtered",
            "target": "outputspec"
          },
          {
            "origin": "stddev_filtered",
            "target": "falff"
          },
          {
            "origin": "stddev_unfiltered",
            "target": "falff"
          },
          {
            "origin": "falff",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_alff_smooth_AFNI_268",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "smooth": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "fwhm_input": "{'fwhm': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "smooth": "{'out_file': None}",
          "fwhm_input": "{'fwhm': None}",
          "outputspec": "{'fwhm': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "smooth",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "automask": "[Undefined]",
              "fwhm": "[Undefined]",
              "fwhmxy": "[Undefined]",
              "blurmaster": "[Undefined]",
              "mask": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "out_file": "[Undefined]",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fwhm_input",
            "type": "node",
            "inputs": {
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "smooth"
          },
          {
            "origin": "smooth",
            "target": "outputspec"
          },
          {
            "origin": "fwhm_input",
            "target": "smooth"
          },
          {
            "origin": "fwhm_input",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_alff_zstd_268",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_desc-sm_alff_zstd_268",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_falff_smooth_AFNI_268",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "smooth": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "fwhm_input": "{'fwhm': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "smooth": "{'out_file': None}",
          "fwhm_input": "{'fwhm': None}",
          "outputspec": "{'fwhm': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "smooth",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "automask": "[Undefined]",
              "fwhm": "[Undefined]",
              "fwhmxy": "[Undefined]",
              "blurmaster": "[Undefined]",
              "mask": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "out_file": "[Undefined]",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fwhm_input",
            "type": "node",
            "inputs": {
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "smooth"
          },
          {
            "origin": "smooth",
            "target": "outputspec"
          },
          {
            "origin": "fwhm_input",
            "target": "smooth"
          },
          {
            "origin": "fwhm_input",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_falff_zstd_268",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_desc-sm_falff_zstd_268",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "reho_290",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'cluster_size': 27, 'rest_mask': '[Undefined]', 'rest_res_filt': '[Undefined]'}",
          "reho_map": "{'function_str': 'def compute_reho(in_file, mask_file, cluster_size):\\n    \"\"\"\\n    Computes the ReHo Map, by computing tied ranks of the timepoints,\\n    followed by computing Kendall\\'s coefficient concordance(KCC) of a\\n    timeseries with its neighbours.\\n\\n    Parameters\\n    ----------\\n    in_file : nifti file\\n        4D EPI File\\n\\n    mask_file : nifti file\\n        Mask of the EPI File(Only Compute ReHo of voxels in the mask)\\n\\n    cluster_size : integer\\n        for a brain voxel the number of neighbouring brain voxels to use for\\n        KCC.\\n\\n\\n    Returns\\n    -------\\n    out_file : nifti file\\n        ReHo map of the input EPI image\\n\\n    \"\"\"\\n    res_fname = in_file\\n    res_mask_fname = mask_file\\n    CUTNUMBER = 10\\n\\n    if cluster_size not in (27, 19, 7):\\n        cluster_size = 27\\n\\n    nvoxel = cluster_size\\n\\n    res_img = nib.load(res_fname)\\n    res_mask_img = nib.load(res_mask_fname)\\n\\n    res_data = res_img.get_fdata()\\n    res_mask_data = res_mask_img.get_fdata()\\n\\n    IFLOGGER.info(res_data.shape)\\n    (n_x, n_y, n_z, n_t) = res_data.shape\\n\\n    # \"flatten\" each volume of the timeseries into one big array instead of\\n    # x,y,z - produces (timepoints, N voxels) shaped data array\\n    res_data = np.reshape(res_data, (n_x * n_y * n_z, n_t), order=\"F\").T\\n\\n    # create a blank array of zeroes of size n_voxels, one for each time point\\n    Ranks_res_data = np.tile(\\n        (np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1]\\n    )\\n\\n    # divide the number of total voxels by the cutnumber (set to 10)\\n    # ex. end up with a number in the thousands if there are tens of thousands\\n    # of voxels\\n    segment_length = np.ceil(float((res_data.shape)[1]) / float(CUTNUMBER))\\n\\n    for icut in range(0, CUTNUMBER):\\n        segment = None\\n\\n        # create a Numpy array of evenly spaced values from the segment\\n        # starting point up until the segment_length integer\\n        if not (icut == (CUTNUMBER - 1)):\\n            segment = np.array(\\n                np.arange(icut * segment_length, (icut + 1) * segment_length)\\n            )\\n        else:\\n            segment = np.array(np.arange(icut * segment_length, (res_data.shape[1])))\\n\\n        segment = np.int64(segment[np.newaxis])\\n\\n        # res_data_piece is a chunk of the original timeseries in_file, but\\n        # aligned with the current segment index spacing\\n        res_data_piece = res_data[:, segment[0]]\\n        nvoxels_piece = res_data_piece.shape[1]\\n\\n        # run a merge sort across the time axis, re-ordering the flattened\\n        # volume voxel arrays\\n        res_data_sorted = np.sort(res_data_piece, 0, kind=\"mergesort\")\\n        sort_index = np.argsort(res_data_piece, axis=0, kind=\"mergesort\")\\n\\n        # subtract each volume from each other\\n        db = np.diff(res_data_sorted, 1, 0)\\n\\n        # convert any zero voxels into \"True\" flag\\n        db = db == 0\\n\\n        # return an n_voxel (n voxels within the current segment) sized array\\n        # of values, each value being the sum total of TRUE values in \"db\"\\n        sumdb = np.sum(db, 0)\\n\\n        temp_array = np.array(np.arange(0, n_t))\\n        temp_array = temp_array[:, np.newaxis]\\n\\n        sorted_ranks = np.tile(temp_array, [1, nvoxels_piece])\\n\\n        if np.any(sumdb[:]):\\n            tie_adjust_index = np.flatnonzero(sumdb)\\n\\n            for i in range(0, len(tie_adjust_index)):\\n                ranks = sorted_ranks[:, tie_adjust_index[i]]\\n\\n                ties = db[:, tie_adjust_index[i]]\\n\\n                tieloc = np.append(np.flatnonzero(ties), n_t + 2)\\n                maxties = len(tieloc)\\n                tiecount = 0\\n\\n                while tiecount < maxties - 1:\\n                    tiestart = tieloc[tiecount]\\n                    ntied = 2\\n                    while tieloc[tiecount + 1] == (tieloc[tiecount] + 1):\\n                        tiecount += 1\\n                        ntied += 1\\n\\n                    ranks[tiestart : tiestart + ntied] = np.ceil(\\n                        np.float32(np.sum(ranks[tiestart : tiestart + ntied]))\\n                        / np.float32(ntied)\\n                    )\\n                    tiecount += 1\\n\\n                sorted_ranks[:, tie_adjust_index[i]] = ranks\\n\\n        del db, sumdb\\n        sort_index_base = np.tile(\\n            np.multiply(np.arange(0, nvoxels_piece), n_t), [n_t, 1]\\n        )\\n        sort_index += sort_index_base\\n        del sort_index_base\\n\\n        ranks_piece = np.zeros((n_t, nvoxels_piece))\\n\\n        ranks_piece = ranks_piece.flatten(order=\"F\")\\n        sort_index = sort_index.flatten(order=\"F\")\\n        sorted_ranks = sorted_ranks.flatten(order=\"F\")\\n\\n        ranks_piece[sort_index] = np.array(sorted_ranks)\\n\\n        ranks_piece = np.reshape(ranks_piece, (n_t, nvoxels_piece), order=\"F\")\\n\\n        del sort_index, sorted_ranks\\n\\n        Ranks_res_data[:, segment[0]] = ranks_piece\\n\\n        sys.stdout.write(\".\")\\n\\n    Ranks_res_data = np.reshape(Ranks_res_data, (n_t, n_x, n_y, n_z), order=\"F\")\\n\\n    K = np.zeros((n_x, n_y, n_z))\\n\\n    mask_cluster = np.ones((3, 3, 3))\\n\\n    if nvoxel == 19:\\n        mask_cluster[0, 0, 0] = 0\\n        mask_cluster[0, 2, 0] = 0\\n        mask_cluster[2, 0, 0] = 0\\n        mask_cluster[2, 2, 0] = 0\\n        mask_cluster[0, 0, 2] = 0\\n        mask_cluster[0, 2, 2] = 0\\n        mask_cluster[2, 0, 2] = 0\\n        mask_cluster[2, 2, 2] = 0\\n\\n    elif nvoxel == 7:\\n        mask_cluster[0, 0, 0] = 0\\n        mask_cluster[0, 1, 0] = 0\\n        mask_cluster[0, 2, 0] = 0\\n        mask_cluster[0, 0, 1] = 0\\n        mask_cluster[0, 2, 1] = 0\\n        mask_cluster[0, 0, 2] = 0\\n        mask_cluster[0, 1, 2] = 0\\n        mask_cluster[0, 2, 2] = 0\\n        mask_cluster[1, 0, 0] = 0\\n        mask_cluster[1, 2, 0] = 0\\n        mask_cluster[1, 0, 2] = 0\\n        mask_cluster[1, 2, 2] = 0\\n        mask_cluster[2, 0, 0] = 0\\n        mask_cluster[2, 1, 0] = 0\\n        mask_cluster[2, 2, 0] = 0\\n        mask_cluster[2, 0, 1] = 0\\n        mask_cluster[2, 2, 1] = 0\\n        mask_cluster[2, 0, 2] = 0\\n        mask_cluster[2, 1, 2] = 0\\n        mask_cluster[2, 2, 2] = 0\\n\\n    for i in range(1, n_x - 1):\\n        for j in range(1, n_y - 1):\\n            for k in range(1, n_z - 1):\\n                block = Ranks_res_data[:, i - 1 : i + 2, j - 1 : j + 2, k - 1 : k + 2]\\n                mask_block = res_mask_data[i - 1 : i + 2, j - 1 : j + 2, k - 1 : k + 2]\\n\\n                if not (int(mask_block[1, 1, 1]) == 0):\\n                    if nvoxel in (19, 7):\\n                        mask_block = np.multiply(mask_block, mask_cluster)\\n\\n                    R_block = np.reshape(block, (block.shape[0], 27), order=\"F\")\\n                    mask_R_block = R_block[\\n                        :,\\n                        np.argwhere(np.reshape(mask_block, (1, 27), order=\"F\") > 0)[\\n                            :, 1\\n                        ],\\n                    ]\\n\\n                    K[i, j, k] = f_kendall(mask_R_block)\\n\\n    img = nib.Nifti1Image(K, header=res_img.header, affine=res_img.affine)\\n    reho_file = os.path.join(os.getcwd(), \"ReHo.nii.gz\")\\n    img.to_filename(reho_file)\\n    return reho_file\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'cluster_size': None, 'rest_mask': None, 'rest_res_filt': None}",
          "reho_map": "{'out_file': None}",
          "outputspec": "{'raw_reho_map': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "cluster_size": "27",
              "rest_res_filt": "[Undefined]",
              "rest_mask": "[Undefined]"
            },
            "outputs": {
              "cluster_size": "[Undefined]",
              "rest_res_filt": "[Undefined]",
              "rest_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "reho_map",
            "type": "node",
            "inputs": {
              "function_str": "def compute_reho(in_file, mask_file, cluster_size):\n    \"\"\"\n    Computes the ReHo Map, by computing tied ranks of the timepoints,\n    followed by computing Kendall's coefficient concordance(KCC) of a\n    timeseries with its neighbours.\n\n    Parameters\n    ----------\n    in_file : nifti file\n        4D EPI File\n\n    mask_file : nifti file\n        Mask of the EPI File(Only Compute ReHo of voxels in the mask)\n\n    cluster_size : integer\n        for a brain voxel the number of neighbouring brain voxels to use for\n        KCC.\n\n\n    Returns\n    -------\n    out_file : nifti file\n        ReHo map of the input EPI image\n\n    \"\"\"\n    res_fname = in_file\n    res_mask_fname = mask_file\n    CUTNUMBER = 10\n\n    if cluster_size not in (27, 19, 7):\n        cluster_size = 27\n\n    nvoxel = cluster_size\n\n    res_img = nib.load(res_fname)\n    res_mask_img = nib.load(res_mask_fname)\n\n    res_data = res_img.get_fdata()\n    res_mask_data = res_mask_img.get_fdata()\n\n    IFLOGGER.info(res_data.shape)\n    (n_x, n_y, n_z, n_t) = res_data.shape\n\n    # \"flatten\" each volume of the timeseries into one big array instead of\n    # x,y,z - produces (timepoints, N voxels) shaped data array\n    res_data = np.reshape(res_data, (n_x * n_y * n_z, n_t), order=\"F\").T\n\n    # create a blank array of zeroes of size n_voxels, one for each time point\n    Ranks_res_data = np.tile(\n        (np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1]\n    )\n\n    # divide the number of total voxels by the cutnumber (set to 10)\n    # ex. end up with a number in the thousands if there are tens of thousands\n    # of voxels\n    segment_length = np.ceil(float((res_data.shape)[1]) / float(CUTNUMBER))\n\n    for icut in range(0, CUTNUMBER):\n        segment = None\n\n        # create a Numpy array of evenly spaced values from the segment\n        # starting point up until the segment_length integer\n        if not (icut == (CUTNUMBER - 1)):\n            segment = np.array(\n                np.arange(icut * segment_length, (icut + 1) * segment_length)\n            )\n        else:\n            segment = np.array(np.arange(icut * segment_length, (res_data.shape[1])))\n\n        segment = np.int64(segment[np.newaxis])\n\n        # res_data_piece is a chunk of the original timeseries in_file, but\n        # aligned with the current segment index spacing\n        res_data_piece = res_data[:, segment[0]]\n        nvoxels_piece = res_data_piece.shape[1]\n\n        # run a merge sort across the time axis, re-ordering the flattened\n        # volume voxel arrays\n        res_data_sorted = np.sort(res_data_piece, 0, kind=\"mergesort\")\n        sort_index = np.argsort(res_data_piece, axis=0, kind=\"mergesort\")\n\n        # subtract each volume from each other\n        db = np.diff(res_data_sorted, 1, 0)\n\n        # convert any zero voxels into \"True\" flag\n        db = db == 0\n\n        # return an n_voxel (n voxels within the current segment) sized array\n        # of values, each value being the sum total of TRUE values in \"db\"\n        sumdb = np.sum(db, 0)\n\n        temp_array = np.array(np.arange(0, n_t))\n        temp_array = temp_array[:, np.newaxis]\n\n        sorted_ranks = np.tile(temp_array, [1, nvoxels_piece])\n\n        if np.any(sumdb[:]):\n            tie_adjust_index = np.flatnonzero(sumdb)\n\n            for i in range(0, len(tie_adjust_index)):\n                ranks = sorted_ranks[:, tie_adjust_index[i]]\n\n                ties = db[:, tie_adjust_index[i]]\n\n                tieloc = np.append(np.flatnonzero(ties), n_t + 2)\n                maxties = len(tieloc)\n                tiecount = 0\n\n                while tiecount < maxties - 1:\n                    tiestart = tieloc[tiecount]\n                    ntied = 2\n                    while tieloc[tiecount + 1] == (tieloc[tiecount] + 1):\n                        tiecount += 1\n                        ntied += 1\n\n                    ranks[tiestart : tiestart + ntied] = np.ceil(\n                        np.float32(np.sum(ranks[tiestart : tiestart + ntied]))\n                        / np.float32(ntied)\n                    )\n                    tiecount += 1\n\n                sorted_ranks[:, tie_adjust_index[i]] = ranks\n\n        del db, sumdb\n        sort_index_base = np.tile(\n            np.multiply(np.arange(0, nvoxels_piece), n_t), [n_t, 1]\n        )\n        sort_index += sort_index_base\n        del sort_index_base\n\n        ranks_piece = np.zeros((n_t, nvoxels_piece))\n\n        ranks_piece = ranks_piece.flatten(order=\"F\")\n        sort_index = sort_index.flatten(order=\"F\")\n        sorted_ranks = sorted_ranks.flatten(order=\"F\")\n\n        ranks_piece[sort_index] = np.array(sorted_ranks)\n\n        ranks_piece = np.reshape(ranks_piece, (n_t, nvoxels_piece), order=\"F\")\n\n        del sort_index, sorted_ranks\n\n        Ranks_res_data[:, segment[0]] = ranks_piece\n\n        sys.stdout.write(\".\")\n\n    Ranks_res_data = np.reshape(Ranks_res_data, (n_t, n_x, n_y, n_z), order=\"F\")\n\n    K = np.zeros((n_x, n_y, n_z))\n\n    mask_cluster = np.ones((3, 3, 3))\n\n    if nvoxel == 19:\n        mask_cluster[0, 0, 0] = 0\n        mask_cluster[0, 2, 0] = 0\n        mask_cluster[2, 0, 0] = 0\n        mask_cluster[2, 2, 0] = 0\n        mask_cluster[0, 0, 2] = 0\n        mask_cluster[0, 2, 2] = 0\n        mask_cluster[2, 0, 2] = 0\n        mask_cluster[2, 2, 2] = 0\n\n    elif nvoxel == 7:\n        mask_cluster[0, 0, 0] = 0\n        mask_cluster[0, 1, 0] = 0\n        mask_cluster[0, 2, 0] = 0\n        mask_cluster[0, 0, 1] = 0\n        mask_cluster[0, 2, 1] = 0\n        mask_cluster[0, 0, 2] = 0\n        mask_cluster[0, 1, 2] = 0\n        mask_cluster[0, 2, 2] = 0\n        mask_cluster[1, 0, 0] = 0\n        mask_cluster[1, 2, 0] = 0\n        mask_cluster[1, 0, 2] = 0\n        mask_cluster[1, 2, 2] = 0\n        mask_cluster[2, 0, 0] = 0\n        mask_cluster[2, 1, 0] = 0\n        mask_cluster[2, 2, 0] = 0\n        mask_cluster[2, 0, 1] = 0\n        mask_cluster[2, 2, 1] = 0\n        mask_cluster[2, 0, 2] = 0\n        mask_cluster[2, 1, 2] = 0\n        mask_cluster[2, 2, 2] = 0\n\n    for i in range(1, n_x - 1):\n        for j in range(1, n_y - 1):\n            for k in range(1, n_z - 1):\n                block = Ranks_res_data[:, i - 1 : i + 2, j - 1 : j + 2, k - 1 : k + 2]\n                mask_block = res_mask_data[i - 1 : i + 2, j - 1 : j + 2, k - 1 : k + 2]\n\n                if not (int(mask_block[1, 1, 1]) == 0):\n                    if nvoxel in (19, 7):\n                        mask_block = np.multiply(mask_block, mask_cluster)\n\n                    R_block = np.reshape(block, (block.shape[0], 27), order=\"F\")\n                    mask_R_block = R_block[\n                        :,\n                        np.argwhere(np.reshape(mask_block, (1, 27), order=\"F\") > 0)[\n                            :, 1\n                        ],\n                    ]\n\n                    K[i, j, k] = f_kendall(mask_R_block)\n\n    img = nib.Nifti1Image(K, header=res_img.header, affine=res_img.affine)\n    reho_file = os.path.join(os.getcwd(), \"ReHo.nii.gz\")\n    img.to_filename(reho_file)\n    return reho_file\n",
              "in_file": "[Undefined]",
              "mask_file": "[Undefined]",
              "cluster_size": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "raw_reho_map": "[Undefined]"
            },
            "outputs": {
              "raw_reho_map": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "reho_map"
          },
          {
            "origin": "reho_map",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_reho_smooth_AFNI_290",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "smooth": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "fwhm_input": "{'fwhm': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "smooth": "{'out_file': None}",
          "fwhm_input": "{'fwhm': None}",
          "outputspec": "{'fwhm': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "smooth",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "automask": "[Undefined]",
              "fwhm": "[Undefined]",
              "fwhmxy": "[Undefined]",
              "blurmaster": "[Undefined]",
              "mask": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "out_file": "[Undefined]",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fwhm_input",
            "type": "node",
            "inputs": {
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "smooth"
          },
          {
            "origin": "smooth",
            "target": "outputspec"
          },
          {
            "origin": "fwhm_input",
            "target": "smooth"
          },
          {
            "origin": "fwhm_input",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_reho_zstd_290",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_desc-sm_reho_zstd_290",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "reho_292",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'cluster_size': 27, 'rest_mask': '[Undefined]', 'rest_res_filt': '[Undefined]'}",
          "reho_map": "{'function_str': 'def compute_reho(in_file, mask_file, cluster_size):\\n    \"\"\"\\n    Computes the ReHo Map, by computing tied ranks of the timepoints,\\n    followed by computing Kendall\\'s coefficient concordance(KCC) of a\\n    timeseries with its neighbours.\\n\\n    Parameters\\n    ----------\\n    in_file : nifti file\\n        4D EPI File\\n\\n    mask_file : nifti file\\n        Mask of the EPI File(Only Compute ReHo of voxels in the mask)\\n\\n    cluster_size : integer\\n        for a brain voxel the number of neighbouring brain voxels to use for\\n        KCC.\\n\\n\\n    Returns\\n    -------\\n    out_file : nifti file\\n        ReHo map of the input EPI image\\n\\n    \"\"\"\\n    res_fname = in_file\\n    res_mask_fname = mask_file\\n    CUTNUMBER = 10\\n\\n    if cluster_size not in (27, 19, 7):\\n        cluster_size = 27\\n\\n    nvoxel = cluster_size\\n\\n    res_img = nib.load(res_fname)\\n    res_mask_img = nib.load(res_mask_fname)\\n\\n    res_data = res_img.get_fdata()\\n    res_mask_data = res_mask_img.get_fdata()\\n\\n    IFLOGGER.info(res_data.shape)\\n    (n_x, n_y, n_z, n_t) = res_data.shape\\n\\n    # \"flatten\" each volume of the timeseries into one big array instead of\\n    # x,y,z - produces (timepoints, N voxels) shaped data array\\n    res_data = np.reshape(res_data, (n_x * n_y * n_z, n_t), order=\"F\").T\\n\\n    # create a blank array of zeroes of size n_voxels, one for each time point\\n    Ranks_res_data = np.tile(\\n        (np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1]\\n    )\\n\\n    # divide the number of total voxels by the cutnumber (set to 10)\\n    # ex. end up with a number in the thousands if there are tens of thousands\\n    # of voxels\\n    segment_length = np.ceil(float((res_data.shape)[1]) / float(CUTNUMBER))\\n\\n    for icut in range(0, CUTNUMBER):\\n        segment = None\\n\\n        # create a Numpy array of evenly spaced values from the segment\\n        # starting point up until the segment_length integer\\n        if not (icut == (CUTNUMBER - 1)):\\n            segment = np.array(\\n                np.arange(icut * segment_length, (icut + 1) * segment_length)\\n            )\\n        else:\\n            segment = np.array(np.arange(icut * segment_length, (res_data.shape[1])))\\n\\n        segment = np.int64(segment[np.newaxis])\\n\\n        # res_data_piece is a chunk of the original timeseries in_file, but\\n        # aligned with the current segment index spacing\\n        res_data_piece = res_data[:, segment[0]]\\n        nvoxels_piece = res_data_piece.shape[1]\\n\\n        # run a merge sort across the time axis, re-ordering the flattened\\n        # volume voxel arrays\\n        res_data_sorted = np.sort(res_data_piece, 0, kind=\"mergesort\")\\n        sort_index = np.argsort(res_data_piece, axis=0, kind=\"mergesort\")\\n\\n        # subtract each volume from each other\\n        db = np.diff(res_data_sorted, 1, 0)\\n\\n        # convert any zero voxels into \"True\" flag\\n        db = db == 0\\n\\n        # return an n_voxel (n voxels within the current segment) sized array\\n        # of values, each value being the sum total of TRUE values in \"db\"\\n        sumdb = np.sum(db, 0)\\n\\n        temp_array = np.array(np.arange(0, n_t))\\n        temp_array = temp_array[:, np.newaxis]\\n\\n        sorted_ranks = np.tile(temp_array, [1, nvoxels_piece])\\n\\n        if np.any(sumdb[:]):\\n            tie_adjust_index = np.flatnonzero(sumdb)\\n\\n            for i in range(0, len(tie_adjust_index)):\\n                ranks = sorted_ranks[:, tie_adjust_index[i]]\\n\\n                ties = db[:, tie_adjust_index[i]]\\n\\n                tieloc = np.append(np.flatnonzero(ties), n_t + 2)\\n                maxties = len(tieloc)\\n                tiecount = 0\\n\\n                while tiecount < maxties - 1:\\n                    tiestart = tieloc[tiecount]\\n                    ntied = 2\\n                    while tieloc[tiecount + 1] == (tieloc[tiecount] + 1):\\n                        tiecount += 1\\n                        ntied += 1\\n\\n                    ranks[tiestart : tiestart + ntied] = np.ceil(\\n                        np.float32(np.sum(ranks[tiestart : tiestart + ntied]))\\n                        / np.float32(ntied)\\n                    )\\n                    tiecount += 1\\n\\n                sorted_ranks[:, tie_adjust_index[i]] = ranks\\n\\n        del db, sumdb\\n        sort_index_base = np.tile(\\n            np.multiply(np.arange(0, nvoxels_piece), n_t), [n_t, 1]\\n        )\\n        sort_index += sort_index_base\\n        del sort_index_base\\n\\n        ranks_piece = np.zeros((n_t, nvoxels_piece))\\n\\n        ranks_piece = ranks_piece.flatten(order=\"F\")\\n        sort_index = sort_index.flatten(order=\"F\")\\n        sorted_ranks = sorted_ranks.flatten(order=\"F\")\\n\\n        ranks_piece[sort_index] = np.array(sorted_ranks)\\n\\n        ranks_piece = np.reshape(ranks_piece, (n_t, nvoxels_piece), order=\"F\")\\n\\n        del sort_index, sorted_ranks\\n\\n        Ranks_res_data[:, segment[0]] = ranks_piece\\n\\n        sys.stdout.write(\".\")\\n\\n    Ranks_res_data = np.reshape(Ranks_res_data, (n_t, n_x, n_y, n_z), order=\"F\")\\n\\n    K = np.zeros((n_x, n_y, n_z))\\n\\n    mask_cluster = np.ones((3, 3, 3))\\n\\n    if nvoxel == 19:\\n        mask_cluster[0, 0, 0] = 0\\n        mask_cluster[0, 2, 0] = 0\\n        mask_cluster[2, 0, 0] = 0\\n        mask_cluster[2, 2, 0] = 0\\n        mask_cluster[0, 0, 2] = 0\\n        mask_cluster[0, 2, 2] = 0\\n        mask_cluster[2, 0, 2] = 0\\n        mask_cluster[2, 2, 2] = 0\\n\\n    elif nvoxel == 7:\\n        mask_cluster[0, 0, 0] = 0\\n        mask_cluster[0, 1, 0] = 0\\n        mask_cluster[0, 2, 0] = 0\\n        mask_cluster[0, 0, 1] = 0\\n        mask_cluster[0, 2, 1] = 0\\n        mask_cluster[0, 0, 2] = 0\\n        mask_cluster[0, 1, 2] = 0\\n        mask_cluster[0, 2, 2] = 0\\n        mask_cluster[1, 0, 0] = 0\\n        mask_cluster[1, 2, 0] = 0\\n        mask_cluster[1, 0, 2] = 0\\n        mask_cluster[1, 2, 2] = 0\\n        mask_cluster[2, 0, 0] = 0\\n        mask_cluster[2, 1, 0] = 0\\n        mask_cluster[2, 2, 0] = 0\\n        mask_cluster[2, 0, 1] = 0\\n        mask_cluster[2, 2, 1] = 0\\n        mask_cluster[2, 0, 2] = 0\\n        mask_cluster[2, 1, 2] = 0\\n        mask_cluster[2, 2, 2] = 0\\n\\n    for i in range(1, n_x - 1):\\n        for j in range(1, n_y - 1):\\n            for k in range(1, n_z - 1):\\n                block = Ranks_res_data[:, i - 1 : i + 2, j - 1 : j + 2, k - 1 : k + 2]\\n                mask_block = res_mask_data[i - 1 : i + 2, j - 1 : j + 2, k - 1 : k + 2]\\n\\n                if not (int(mask_block[1, 1, 1]) == 0):\\n                    if nvoxel in (19, 7):\\n                        mask_block = np.multiply(mask_block, mask_cluster)\\n\\n                    R_block = np.reshape(block, (block.shape[0], 27), order=\"F\")\\n                    mask_R_block = R_block[\\n                        :,\\n                        np.argwhere(np.reshape(mask_block, (1, 27), order=\"F\") > 0)[\\n                            :, 1\\n                        ],\\n                    ]\\n\\n                    K[i, j, k] = f_kendall(mask_R_block)\\n\\n    img = nib.Nifti1Image(K, header=res_img.header, affine=res_img.affine)\\n    reho_file = os.path.join(os.getcwd(), \"ReHo.nii.gz\")\\n    img.to_filename(reho_file)\\n    return reho_file\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'cluster_size': None, 'rest_mask': None, 'rest_res_filt': None}",
          "reho_map": "{'out_file': None}",
          "outputspec": "{'raw_reho_map': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "cluster_size": "27",
              "rest_res_filt": "[Undefined]",
              "rest_mask": "[Undefined]"
            },
            "outputs": {
              "cluster_size": "[Undefined]",
              "rest_res_filt": "[Undefined]",
              "rest_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "reho_map",
            "type": "node",
            "inputs": {
              "function_str": "def compute_reho(in_file, mask_file, cluster_size):\n    \"\"\"\n    Computes the ReHo Map, by computing tied ranks of the timepoints,\n    followed by computing Kendall's coefficient concordance(KCC) of a\n    timeseries with its neighbours.\n\n    Parameters\n    ----------\n    in_file : nifti file\n        4D EPI File\n\n    mask_file : nifti file\n        Mask of the EPI File(Only Compute ReHo of voxels in the mask)\n\n    cluster_size : integer\n        for a brain voxel the number of neighbouring brain voxels to use for\n        KCC.\n\n\n    Returns\n    -------\n    out_file : nifti file\n        ReHo map of the input EPI image\n\n    \"\"\"\n    res_fname = in_file\n    res_mask_fname = mask_file\n    CUTNUMBER = 10\n\n    if cluster_size not in (27, 19, 7):\n        cluster_size = 27\n\n    nvoxel = cluster_size\n\n    res_img = nib.load(res_fname)\n    res_mask_img = nib.load(res_mask_fname)\n\n    res_data = res_img.get_fdata()\n    res_mask_data = res_mask_img.get_fdata()\n\n    IFLOGGER.info(res_data.shape)\n    (n_x, n_y, n_z, n_t) = res_data.shape\n\n    # \"flatten\" each volume of the timeseries into one big array instead of\n    # x,y,z - produces (timepoints, N voxels) shaped data array\n    res_data = np.reshape(res_data, (n_x * n_y * n_z, n_t), order=\"F\").T\n\n    # create a blank array of zeroes of size n_voxels, one for each time point\n    Ranks_res_data = np.tile(\n        (np.zeros((1, (res_data.shape)[1]))), [(res_data.shape)[0], 1]\n    )\n\n    # divide the number of total voxels by the cutnumber (set to 10)\n    # ex. end up with a number in the thousands if there are tens of thousands\n    # of voxels\n    segment_length = np.ceil(float((res_data.shape)[1]) / float(CUTNUMBER))\n\n    for icut in range(0, CUTNUMBER):\n        segment = None\n\n        # create a Numpy array of evenly spaced values from the segment\n        # starting point up until the segment_length integer\n        if not (icut == (CUTNUMBER - 1)):\n            segment = np.array(\n                np.arange(icut * segment_length, (icut + 1) * segment_length)\n            )\n        else:\n            segment = np.array(np.arange(icut * segment_length, (res_data.shape[1])))\n\n        segment = np.int64(segment[np.newaxis])\n\n        # res_data_piece is a chunk of the original timeseries in_file, but\n        # aligned with the current segment index spacing\n        res_data_piece = res_data[:, segment[0]]\n        nvoxels_piece = res_data_piece.shape[1]\n\n        # run a merge sort across the time axis, re-ordering the flattened\n        # volume voxel arrays\n        res_data_sorted = np.sort(res_data_piece, 0, kind=\"mergesort\")\n        sort_index = np.argsort(res_data_piece, axis=0, kind=\"mergesort\")\n\n        # subtract each volume from each other\n        db = np.diff(res_data_sorted, 1, 0)\n\n        # convert any zero voxels into \"True\" flag\n        db = db == 0\n\n        # return an n_voxel (n voxels within the current segment) sized array\n        # of values, each value being the sum total of TRUE values in \"db\"\n        sumdb = np.sum(db, 0)\n\n        temp_array = np.array(np.arange(0, n_t))\n        temp_array = temp_array[:, np.newaxis]\n\n        sorted_ranks = np.tile(temp_array, [1, nvoxels_piece])\n\n        if np.any(sumdb[:]):\n            tie_adjust_index = np.flatnonzero(sumdb)\n\n            for i in range(0, len(tie_adjust_index)):\n                ranks = sorted_ranks[:, tie_adjust_index[i]]\n\n                ties = db[:, tie_adjust_index[i]]\n\n                tieloc = np.append(np.flatnonzero(ties), n_t + 2)\n                maxties = len(tieloc)\n                tiecount = 0\n\n                while tiecount < maxties - 1:\n                    tiestart = tieloc[tiecount]\n                    ntied = 2\n                    while tieloc[tiecount + 1] == (tieloc[tiecount] + 1):\n                        tiecount += 1\n                        ntied += 1\n\n                    ranks[tiestart : tiestart + ntied] = np.ceil(\n                        np.float32(np.sum(ranks[tiestart : tiestart + ntied]))\n                        / np.float32(ntied)\n                    )\n                    tiecount += 1\n\n                sorted_ranks[:, tie_adjust_index[i]] = ranks\n\n        del db, sumdb\n        sort_index_base = np.tile(\n            np.multiply(np.arange(0, nvoxels_piece), n_t), [n_t, 1]\n        )\n        sort_index += sort_index_base\n        del sort_index_base\n\n        ranks_piece = np.zeros((n_t, nvoxels_piece))\n\n        ranks_piece = ranks_piece.flatten(order=\"F\")\n        sort_index = sort_index.flatten(order=\"F\")\n        sorted_ranks = sorted_ranks.flatten(order=\"F\")\n\n        ranks_piece[sort_index] = np.array(sorted_ranks)\n\n        ranks_piece = np.reshape(ranks_piece, (n_t, nvoxels_piece), order=\"F\")\n\n        del sort_index, sorted_ranks\n\n        Ranks_res_data[:, segment[0]] = ranks_piece\n\n        sys.stdout.write(\".\")\n\n    Ranks_res_data = np.reshape(Ranks_res_data, (n_t, n_x, n_y, n_z), order=\"F\")\n\n    K = np.zeros((n_x, n_y, n_z))\n\n    mask_cluster = np.ones((3, 3, 3))\n\n    if nvoxel == 19:\n        mask_cluster[0, 0, 0] = 0\n        mask_cluster[0, 2, 0] = 0\n        mask_cluster[2, 0, 0] = 0\n        mask_cluster[2, 2, 0] = 0\n        mask_cluster[0, 0, 2] = 0\n        mask_cluster[0, 2, 2] = 0\n        mask_cluster[2, 0, 2] = 0\n        mask_cluster[2, 2, 2] = 0\n\n    elif nvoxel == 7:\n        mask_cluster[0, 0, 0] = 0\n        mask_cluster[0, 1, 0] = 0\n        mask_cluster[0, 2, 0] = 0\n        mask_cluster[0, 0, 1] = 0\n        mask_cluster[0, 2, 1] = 0\n        mask_cluster[0, 0, 2] = 0\n        mask_cluster[0, 1, 2] = 0\n        mask_cluster[0, 2, 2] = 0\n        mask_cluster[1, 0, 0] = 0\n        mask_cluster[1, 2, 0] = 0\n        mask_cluster[1, 0, 2] = 0\n        mask_cluster[1, 2, 2] = 0\n        mask_cluster[2, 0, 0] = 0\n        mask_cluster[2, 1, 0] = 0\n        mask_cluster[2, 2, 0] = 0\n        mask_cluster[2, 0, 1] = 0\n        mask_cluster[2, 2, 1] = 0\n        mask_cluster[2, 0, 2] = 0\n        mask_cluster[2, 1, 2] = 0\n        mask_cluster[2, 2, 2] = 0\n\n    for i in range(1, n_x - 1):\n        for j in range(1, n_y - 1):\n            for k in range(1, n_z - 1):\n                block = Ranks_res_data[:, i - 1 : i + 2, j - 1 : j + 2, k - 1 : k + 2]\n                mask_block = res_mask_data[i - 1 : i + 2, j - 1 : j + 2, k - 1 : k + 2]\n\n                if not (int(mask_block[1, 1, 1]) == 0):\n                    if nvoxel in (19, 7):\n                        mask_block = np.multiply(mask_block, mask_cluster)\n\n                    R_block = np.reshape(block, (block.shape[0], 27), order=\"F\")\n                    mask_R_block = R_block[\n                        :,\n                        np.argwhere(np.reshape(mask_block, (1, 27), order=\"F\") > 0)[\n                            :, 1\n                        ],\n                    ]\n\n                    K[i, j, k] = f_kendall(mask_R_block)\n\n    img = nib.Nifti1Image(K, header=res_img.header, affine=res_img.affine)\n    reho_file = os.path.join(os.getcwd(), \"ReHo.nii.gz\")\n    img.to_filename(reho_file)\n    return reho_file\n",
              "in_file": "[Undefined]",
              "mask_file": "[Undefined]",
              "cluster_size": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "raw_reho_map": "[Undefined]"
            },
            "outputs": {
              "raw_reho_map": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "reho_map"
          },
          {
            "origin": "reho_map",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_reho_smooth_AFNI_292",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "smooth": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "fwhm_input": "{'fwhm': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "smooth": "{'out_file': None}",
          "fwhm_input": "{'fwhm': None}",
          "outputspec": "{'fwhm': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "smooth",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "automask": "[Undefined]",
              "fwhm": "[Undefined]",
              "fwhmxy": "[Undefined]",
              "blurmaster": "[Undefined]",
              "mask": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "out_file": "[Undefined]",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fwhm_input",
            "type": "node",
            "inputs": {
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "smooth"
          },
          {
            "origin": "smooth",
            "target": "outputspec"
          },
          {
            "origin": "fwhm_input",
            "target": "smooth"
          },
          {
            "origin": "fwhm_input",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_reho_zstd_292",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_desc-sm_reho_zstd_292",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "resample_functional_to_template_304",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "reference": "[Undefined]",
          "out_file": "[Undefined]",
          "out_matrix_file": "[Undefined]",
          "out_log": "[Undefined]",
          "in_matrix_file": "/usr/share/fsl/6.0/etc/flirtsch/ident.mat",
          "apply_xfm": "True",
          "apply_isoxfm": "[Undefined]",
          "datatype": "[Undefined]",
          "cost": "[Undefined]",
          "cost_func": "[Undefined]",
          "uses_qform": "[Undefined]",
          "display_init": "[Undefined]",
          "angle_rep": "[Undefined]",
          "interp": "trilinear",
          "sinc_width": "[Undefined]",
          "sinc_window": "[Undefined]",
          "bins": "[Undefined]",
          "dof": "[Undefined]",
          "no_resample": "[Undefined]",
          "force_scaling": "[Undefined]",
          "min_sampling": "[Undefined]",
          "padding_size": "[Undefined]",
          "searchr_x": "[Undefined]",
          "searchr_y": "[Undefined]",
          "searchr_z": "[Undefined]",
          "no_search": "[Undefined]",
          "coarse_search": "[Undefined]",
          "fine_search": "[Undefined]",
          "schedule": "[Undefined]",
          "ref_weight": "[Undefined]",
          "in_weight": "[Undefined]",
          "no_clamp": "[Undefined]",
          "no_resample_blur": "[Undefined]",
          "rigid2D": "[Undefined]",
          "save_log": "[Undefined]",
          "verbose": "[Undefined]",
          "bgvalue": "[Undefined]",
          "wm_seg": "[Undefined]",
          "wmcoords": "[Undefined]",
          "wmnorms": "[Undefined]",
          "fieldmap": "[Undefined]",
          "fieldmapmask": "[Undefined]",
          "pedir": "[Undefined]",
          "echospacing": "[Undefined]",
          "bbrtype": "[Undefined]",
          "bbrslope": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]",
          "out_matrix_file": "[Undefined]",
          "out_log": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "gather_template-specification-file",
        "type": "workflow",
        "inputs": {
          "inputnode": "{'creds_path': None, 'data': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'dl_dir': '/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0', 'scan': '[Undefined]', 'unique_id': 'sub-PA001_ses-V1W1'}",
          "check_for_s3": "{'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'other'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputnode": "{'creds_path': None, 'data': None, 'dl_dir': None, 'scan': None, 'unique_id': None}",
          "check_for_s3": "{'local_path': None}",
          "outputspec": "{'data': None, 'scan': None, 'unique_id': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputnode",
            "type": "node",
            "inputs": {
              "unique_id": "sub-PA001_ses-V1W1",
              "data": "/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz",
              "scan": "[Undefined]",
              "creds_path": "None",
              "dl_dir": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/working/pipeline_RBCv0"
            },
            "outputs": {
              "unique_id": "[Undefined]",
              "data": "[Undefined]",
              "scan": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_for_s3",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "other"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "unique_id": "[Undefined]",
              "data": "[Undefined]",
              "scan": "[Undefined]"
            },
            "outputs": {
              "unique_id": "[Undefined]",
              "data": "[Undefined]",
              "scan": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputnode",
            "target": "check_for_s3"
          },
          {
            "origin": "inputnode",
            "target": "outputspec"
          },
          {
            "origin": "check_for_s3",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "afni_centrality_degree_centrality_304",
        "type": "workflow",
        "inputs": {
          "afni_centrality": "{'args': '[Undefined]', 'autoclip': '[Undefined]', 'automask': '[Undefined]', 'environ': {'OMP_NUM_THREADS': '2'}, 'num_threads': 2, 'oned_file': '[Undefined]', 'out_file': 'degree_centrality_merged.nii.gz', 'outputtype': 'AFNI', 'polort': '[Undefined]', 'thresh': '[Undefined]'}",
          "sep_nifti_subbriks": "{'function_str': '@Function.sig_imports(\\n    [\\n        \"from collections.abc import Iterable\",\\n        \"import os\",\\n        \"from pathlib import Path\",\\n        \"import nibabel as nib\",\\n        \"from CPAC.pipeline.schema import valid_options\",\\n        \"from CPAC.utils.docs import docstring_parameter\",\\n    ]\\n)\\n@docstring_parameter(\\n    weight_options=tuple(valid_options[\"centrality\"][\"weight_options\"])\\n)\\ndef sep_nifti_subbriks(nifti_file: Path | str, out_names: Iterable[str]) -> list[str]:\\n    \"\"\"Separate sub-briks of niftis and save specified out\\n\\n    Parameters\\n    ----------\\n    nifti_file : ~pathlib.Path or str\\n        path to NIfTI output of an AFNI centrality tool\\n\\n    out_names : iterable of str\\n        an iterable of strings, each ending with one of {weight_options}\\n\\n    Returns\\n    -------\\n    list of str\\n        paths to each of the specified outputs as its own file\\n    \"\"\"\\n    output_niftis = []\\n    weight_options = valid_options[\"centrality\"][\"weight_options\"]\\n    selected_options = {_[::-1].split(\"_\", 1)[0][::-1]: _ for _ in out_names}\\n\\n    nii_img = nib.load(nifti_file)\\n    nii_arr = nii_img.get_fdata()\\n    nii_affine = nii_img.affine\\n    nii_dims = nii_arr.shape\\n\\n    if nii_dims[-1] != len(weight_options):\\n        if len(nii_dims) == 3 and len(out_names) == 1:  # noqa: PLR2004\\n            pass\\n        else:\\n            err_msg = \"out_names must have same number of elements as nifti sub-briks\"\\n            raise Exception(err_msg)\\n\\n    for brik, option in enumerate(weight_options):\\n        if option in selected_options:\\n            if len(nii_dims) == 3:  # noqa: PLR2004\\n                brik_arr = nii_arr\\n            elif len(nii_dims) > 3:  # noqa: PLR2004\\n                brik_arr = nii_arr[:, :, :, 0, brik]\\n            out_file = os.path.join(os.getcwd(), selected_options[option] + \".nii.gz\")\\n            out_img = nib.Nifti1Image(brik_arr, nii_affine)\\n            out_img.to_filename(out_file)\\n            output_niftis.append(out_file)\\n\\n    return output_niftis\\n', 'out_names': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d787c30>'}",
          "outputspec": "{}",
          "inputspec": "{'in_file': '[Undefined]', 'template': '[Undefined]', 'threshold': 0.1}"
        },
        "outputs": {
          "afni_centrality": "{'oned_file': None, 'out_file': None}",
          "sep_nifti_subbriks": "{'output_niftis': None}",
          "outputspec": "{'outfile_list': None}",
          "inputspec": "{'in_file': None, 'template': None, 'threshold': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "afni_centrality",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "sparsity": "[Undefined]",
              "oned_file": "[Undefined]",
              "mask": "[Undefined]",
              "thresh": "[Undefined]",
              "polort": "[Undefined]",
              "autoclip": "[Undefined]",
              "automask": "[Undefined]",
              "num_threads": "2",
              "outputtype": "AFNI",
              "out_file": "degree_centrality_merged.nii.gz",
              "args": "[Undefined]",
              "environ": "{'OMP_NUM_THREADS': '2'}"
            },
            "outputs": {
              "oned_file": "[Undefined]",
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "sep_nifti_subbriks",
            "type": "node",
            "inputs": {
              "function_str": "@Function.sig_imports(\n    [\n        \"from collections.abc import Iterable\",\n        \"import os\",\n        \"from pathlib import Path\",\n        \"import nibabel as nib\",\n        \"from CPAC.pipeline.schema import valid_options\",\n        \"from CPAC.utils.docs import docstring_parameter\",\n    ]\n)\n@docstring_parameter(\n    weight_options=tuple(valid_options[\"centrality\"][\"weight_options\"])\n)\ndef sep_nifti_subbriks(nifti_file: Path | str, out_names: Iterable[str]) -> list[str]:\n    \"\"\"Separate sub-briks of niftis and save specified out\n\n    Parameters\n    ----------\n    nifti_file : ~pathlib.Path or str\n        path to NIfTI output of an AFNI centrality tool\n\n    out_names : iterable of str\n        an iterable of strings, each ending with one of {weight_options}\n\n    Returns\n    -------\n    list of str\n        paths to each of the specified outputs as its own file\n    \"\"\"\n    output_niftis = []\n    weight_options = valid_options[\"centrality\"][\"weight_options\"]\n    selected_options = {_[::-1].split(\"_\", 1)[0][::-1]: _ for _ in out_names}\n\n    nii_img = nib.load(nifti_file)\n    nii_arr = nii_img.get_fdata()\n    nii_affine = nii_img.affine\n    nii_dims = nii_arr.shape\n\n    if nii_dims[-1] != len(weight_options):\n        if len(nii_dims) == 3 and len(out_names) == 1:  # noqa: PLR2004\n            pass\n        else:\n            err_msg = \"out_names must have same number of elements as nifti sub-briks\"\n            raise Exception(err_msg)\n\n    for brik, option in enumerate(weight_options):\n        if option in selected_options:\n            if len(nii_dims) == 3:  # noqa: PLR2004\n                brik_arr = nii_arr\n            elif len(nii_dims) > 3:  # noqa: PLR2004\n                brik_arr = nii_arr[:, :, :, 0, brik]\n            out_file = os.path.join(os.getcwd(), selected_options[option] + \".nii.gz\")\n            out_img = nib.Nifti1Image(brik_arr, nii_affine)\n            out_img.to_filename(out_file)\n            output_niftis.append(out_file)\n\n    return output_niftis\n",
              "nifti_file": "[Undefined]",
              "out_names": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d784580>"
            },
            "outputs": {
              "output_niftis": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "outfile_list": "[Undefined]"
            },
            "outputs": {
              "outfile_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "template": "[Undefined]",
              "threshold": "0.1"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "template": "[Undefined]",
              "threshold": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "afni_centrality",
            "target": "sep_nifti_subbriks"
          },
          {
            "origin": "sep_nifti_subbriks",
            "target": "outputspec"
          },
          {
            "origin": "inputspec",
            "target": "afni_centrality"
          }
        ]
      },
      {
        "name": "centrality_merge_node_304",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.network_centrality.utils.merge_lists",
          "deg_list": "[Undefined]",
          "eig_list": "[Undefined]",
          "lfcd_list": "[Undefined]"
        },
        "outputs": {
          "degree_weighted": "[Undefined]",
          "degree_binarized": "[Undefined]",
          "eigen_weighted": "[Undefined]",
          "eigen_binarized": "[Undefined]",
          "lfcd_weighted": "[Undefined]",
          "lfcd_binarized": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "afni_centrality_local_functional_connectivity_density_304",
        "type": "workflow",
        "inputs": {
          "afni_centrality": "{'args': '[Undefined]', 'autoclip': '[Undefined]', 'automask': '[Undefined]', 'environ': {'OMP_NUM_THREADS': '2'}, 'num_threads': 2, 'out_file': 'lfcd_merged.nii.gz', 'outputtype': 'AFNI', 'polort': '[Undefined]'}",
          "sep_nifti_subbriks": "{'function_str': '@Function.sig_imports(\\n    [\\n        \"from collections.abc import Iterable\",\\n        \"import os\",\\n        \"from pathlib import Path\",\\n        \"import nibabel as nib\",\\n        \"from CPAC.pipeline.schema import valid_options\",\\n        \"from CPAC.utils.docs import docstring_parameter\",\\n    ]\\n)\\n@docstring_parameter(\\n    weight_options=tuple(valid_options[\"centrality\"][\"weight_options\"])\\n)\\ndef sep_nifti_subbriks(nifti_file: Path | str, out_names: Iterable[str]) -> list[str]:\\n    \"\"\"Separate sub-briks of niftis and save specified out\\n\\n    Parameters\\n    ----------\\n    nifti_file : ~pathlib.Path or str\\n        path to NIfTI output of an AFNI centrality tool\\n\\n    out_names : iterable of str\\n        an iterable of strings, each ending with one of {weight_options}\\n\\n    Returns\\n    -------\\n    list of str\\n        paths to each of the specified outputs as its own file\\n    \"\"\"\\n    output_niftis = []\\n    weight_options = valid_options[\"centrality\"][\"weight_options\"]\\n    selected_options = {_[::-1].split(\"_\", 1)[0][::-1]: _ for _ in out_names}\\n\\n    nii_img = nib.load(nifti_file)\\n    nii_arr = nii_img.get_fdata()\\n    nii_affine = nii_img.affine\\n    nii_dims = nii_arr.shape\\n\\n    if nii_dims[-1] != len(weight_options):\\n        if len(nii_dims) == 3 and len(out_names) == 1:  # noqa: PLR2004\\n            pass\\n        else:\\n            err_msg = \"out_names must have same number of elements as nifti sub-briks\"\\n            raise Exception(err_msg)\\n\\n    for brik, option in enumerate(weight_options):\\n        if option in selected_options:\\n            if len(nii_dims) == 3:  # noqa: PLR2004\\n                brik_arr = nii_arr\\n            elif len(nii_dims) > 3:  # noqa: PLR2004\\n                brik_arr = nii_arr[:, :, :, 0, brik]\\n            out_file = os.path.join(os.getcwd(), selected_options[option] + \".nii.gz\")\\n            out_img = nib.Nifti1Image(brik_arr, nii_affine)\\n            out_img.to_filename(out_file)\\n            output_niftis.append(out_file)\\n\\n    return output_niftis\\n', 'out_names': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d784580>'}",
          "outputspec": "{}",
          "inputspec": "{'in_file': '[Undefined]', 'template': '[Undefined]', 'threshold': 0.001}",
          "convert_threshold": "{'function_str': 'def convert_pvalue_to_r(datafile, p_value, two_tailed=False):\\n    \"\"\"\\n    Calculate correlation threshold from p_value.\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        filepath to dataset to extract number of time pts from\\n    p_value : float\\n        significance threshold p-value\\n    two_tailed : boolean (optional); default=False\\n        flag to indicate whether to calculate the two-tailed t-test\\n        threshold for the returned correlation value\\n\\n    Returns\\n    -------\\n    r_value : float\\n        correlation threshold value\\n    \"\"\"\\n    import numpy as np\\n    import nibabel as nib\\n    import scipy.stats\\n\\n    # Get two-tailed distribution\\n    if two_tailed:\\n        p_value = p_value / 2\\n\\n    # Load in data and number of time pts\\n    img = nib.load(datafile).get_fdata()\\n    t_pts = img.shape[-1]\\n\\n    # N-2 degrees of freedom with Pearson correlation (two sample means)\\n    deg_freedom = t_pts - 2\\n\\n    # Inverse Survival Function (Inverse of SF)\\n    # Note: survival function (SF) is also known as the complementary\\n    # cumulative distribution function (CCDF): F_(x) = p = P(X > x) = 1 - F(x)\\n    # The inverse will yield: x = F_^-1(p) = F_^-1(P(X > x))\\n    # where x is a value under the distribution of the random variable X\\n    # such that the probability of getting greater than x, is p\\n    t_value = scipy.stats.t.isf(p_value, deg_freedom)\\n    return np.sqrt(t_value**2 / (deg_freedom + t_value**2))\\n\\n    # Return correlation coefficient\\n', 'two_tailed': '[Undefined]'}"
        },
        "outputs": {
          "afni_centrality": "{'out_file': None}",
          "sep_nifti_subbriks": "{'output_niftis': None}",
          "outputspec": "{'outfile_list': None}",
          "inputspec": "{'in_file': None, 'template': None, 'threshold': None}",
          "convert_threshold": "{'rvalue_threshold': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "afni_centrality",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "thresh": "[Undefined]",
              "polort": "[Undefined]",
              "autoclip": "[Undefined]",
              "automask": "[Undefined]",
              "num_threads": "2",
              "outputtype": "AFNI",
              "out_file": "lfcd_merged.nii.gz",
              "args": "[Undefined]",
              "environ": "{'OMP_NUM_THREADS': '2'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "sep_nifti_subbriks",
            "type": "node",
            "inputs": {
              "function_str": "@Function.sig_imports(\n    [\n        \"from collections.abc import Iterable\",\n        \"import os\",\n        \"from pathlib import Path\",\n        \"import nibabel as nib\",\n        \"from CPAC.pipeline.schema import valid_options\",\n        \"from CPAC.utils.docs import docstring_parameter\",\n    ]\n)\n@docstring_parameter(\n    weight_options=tuple(valid_options[\"centrality\"][\"weight_options\"])\n)\ndef sep_nifti_subbriks(nifti_file: Path | str, out_names: Iterable[str]) -> list[str]:\n    \"\"\"Separate sub-briks of niftis and save specified out\n\n    Parameters\n    ----------\n    nifti_file : ~pathlib.Path or str\n        path to NIfTI output of an AFNI centrality tool\n\n    out_names : iterable of str\n        an iterable of strings, each ending with one of {weight_options}\n\n    Returns\n    -------\n    list of str\n        paths to each of the specified outputs as its own file\n    \"\"\"\n    output_niftis = []\n    weight_options = valid_options[\"centrality\"][\"weight_options\"]\n    selected_options = {_[::-1].split(\"_\", 1)[0][::-1]: _ for _ in out_names}\n\n    nii_img = nib.load(nifti_file)\n    nii_arr = nii_img.get_fdata()\n    nii_affine = nii_img.affine\n    nii_dims = nii_arr.shape\n\n    if nii_dims[-1] != len(weight_options):\n        if len(nii_dims) == 3 and len(out_names) == 1:  # noqa: PLR2004\n            pass\n        else:\n            err_msg = \"out_names must have same number of elements as nifti sub-briks\"\n            raise Exception(err_msg)\n\n    for brik, option in enumerate(weight_options):\n        if option in selected_options:\n            if len(nii_dims) == 3:  # noqa: PLR2004\n                brik_arr = nii_arr\n            elif len(nii_dims) > 3:  # noqa: PLR2004\n                brik_arr = nii_arr[:, :, :, 0, brik]\n            out_file = os.path.join(os.getcwd(), selected_options[option] + \".nii.gz\")\n            out_img = nib.Nifti1Image(brik_arr, nii_affine)\n            out_img.to_filename(out_file)\n            output_niftis.append(out_file)\n\n    return output_niftis\n",
              "nifti_file": "[Undefined]",
              "out_names": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d787e60>"
            },
            "outputs": {
              "output_niftis": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "outfile_list": "[Undefined]"
            },
            "outputs": {
              "outfile_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "template": "[Undefined]",
              "threshold": "0.001"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "template": "[Undefined]",
              "threshold": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "convert_threshold",
            "type": "node",
            "inputs": {
              "function_str": "def convert_pvalue_to_r(datafile, p_value, two_tailed=False):\n    \"\"\"\n    Calculate correlation threshold from p_value.\n\n    Parameters\n    ----------\n    datafile : string\n        filepath to dataset to extract number of time pts from\n    p_value : float\n        significance threshold p-value\n    two_tailed : boolean (optional); default=False\n        flag to indicate whether to calculate the two-tailed t-test\n        threshold for the returned correlation value\n\n    Returns\n    -------\n    r_value : float\n        correlation threshold value\n    \"\"\"\n    import numpy as np\n    import nibabel as nib\n    import scipy.stats\n\n    # Get two-tailed distribution\n    if two_tailed:\n        p_value = p_value / 2\n\n    # Load in data and number of time pts\n    img = nib.load(datafile).get_fdata()\n    t_pts = img.shape[-1]\n\n    # N-2 degrees of freedom with Pearson correlation (two sample means)\n    deg_freedom = t_pts - 2\n\n    # Inverse Survival Function (Inverse of SF)\n    # Note: survival function (SF) is also known as the complementary\n    # cumulative distribution function (CCDF): F_(x) = p = P(X > x) = 1 - F(x)\n    # The inverse will yield: x = F_^-1(p) = F_^-1(P(X > x))\n    # where x is a value under the distribution of the random variable X\n    # such that the probability of getting greater than x, is p\n    t_value = scipy.stats.t.isf(p_value, deg_freedom)\n    return np.sqrt(t_value**2 / (deg_freedom + t_value**2))\n\n    # Return correlation coefficient\n",
              "datafile": "[Undefined]",
              "p_value": "[Undefined]",
              "two_tailed": "[Undefined]"
            },
            "outputs": {
              "rvalue_threshold": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "afni_centrality",
            "target": "sep_nifti_subbriks"
          },
          {
            "origin": "sep_nifti_subbriks",
            "target": "outputspec"
          },
          {
            "origin": "inputspec",
            "target": "afni_centrality"
          },
          {
            "origin": "inputspec",
            "target": "convert_threshold"
          },
          {
            "origin": "convert_threshold",
            "target": "afni_centrality"
          }
        ]
      },
      {
        "name": "space-template_dcb_smooth_AFNI_304",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "smooth": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "fwhm_input": "{'fwhm': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "smooth": "{'out_file': None}",
          "fwhm_input": "{'fwhm': None}",
          "outputspec": "{'fwhm': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "smooth",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "automask": "[Undefined]",
              "fwhm": "[Undefined]",
              "fwhmxy": "[Undefined]",
              "blurmaster": "[Undefined]",
              "mask": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "out_file": "[Undefined]",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fwhm_input",
            "type": "node",
            "inputs": {
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "smooth"
          },
          {
            "origin": "smooth",
            "target": "outputspec"
          },
          {
            "origin": "fwhm_input",
            "target": "smooth"
          },
          {
            "origin": "fwhm_input",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_dcb_zstd_304",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_desc-sm_dcb_zstd_304",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_lfcdb_smooth_AFNI_304",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "smooth": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "fwhm_input": "{'fwhm': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "smooth": "{'out_file': None}",
          "fwhm_input": "{'fwhm': None}",
          "outputspec": "{'fwhm': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "smooth",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "automask": "[Undefined]",
              "fwhm": "[Undefined]",
              "fwhmxy": "[Undefined]",
              "blurmaster": "[Undefined]",
              "mask": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "out_file": "[Undefined]",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fwhm_input",
            "type": "node",
            "inputs": {
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "smooth"
          },
          {
            "origin": "smooth",
            "target": "outputspec"
          },
          {
            "origin": "fwhm_input",
            "target": "smooth"
          },
          {
            "origin": "fwhm_input",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_lfcdb_zstd_304",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_desc-sm_lfcdb_zstd_304",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_lfcdw_smooth_AFNI_304",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "smooth": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "fwhm_input": "{'fwhm': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "smooth": "{'out_file': None}",
          "fwhm_input": "{'fwhm': None}",
          "outputspec": "{'fwhm': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "smooth",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "automask": "[Undefined]",
              "fwhm": "[Undefined]",
              "fwhmxy": "[Undefined]",
              "blurmaster": "[Undefined]",
              "mask": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "out_file": "[Undefined]",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fwhm_input",
            "type": "node",
            "inputs": {
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "smooth"
          },
          {
            "origin": "smooth",
            "target": "outputspec"
          },
          {
            "origin": "fwhm_input",
            "target": "smooth"
          },
          {
            "origin": "fwhm_input",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_lfcdw_zstd_304",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_desc-sm_lfcdw_zstd_304",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "resample_functional_to_template_307",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "reference": "[Undefined]",
          "out_file": "[Undefined]",
          "out_matrix_file": "[Undefined]",
          "out_log": "[Undefined]",
          "in_matrix_file": "/usr/share/fsl/6.0/etc/flirtsch/ident.mat",
          "apply_xfm": "True",
          "apply_isoxfm": "[Undefined]",
          "datatype": "[Undefined]",
          "cost": "[Undefined]",
          "cost_func": "[Undefined]",
          "uses_qform": "[Undefined]",
          "display_init": "[Undefined]",
          "angle_rep": "[Undefined]",
          "interp": "trilinear",
          "sinc_width": "[Undefined]",
          "sinc_window": "[Undefined]",
          "bins": "[Undefined]",
          "dof": "[Undefined]",
          "no_resample": "[Undefined]",
          "force_scaling": "[Undefined]",
          "min_sampling": "[Undefined]",
          "padding_size": "[Undefined]",
          "searchr_x": "[Undefined]",
          "searchr_y": "[Undefined]",
          "searchr_z": "[Undefined]",
          "no_search": "[Undefined]",
          "coarse_search": "[Undefined]",
          "fine_search": "[Undefined]",
          "schedule": "[Undefined]",
          "ref_weight": "[Undefined]",
          "in_weight": "[Undefined]",
          "no_clamp": "[Undefined]",
          "no_resample_blur": "[Undefined]",
          "rigid2D": "[Undefined]",
          "save_log": "[Undefined]",
          "verbose": "[Undefined]",
          "bgvalue": "[Undefined]",
          "wm_seg": "[Undefined]",
          "wmcoords": "[Undefined]",
          "wmnorms": "[Undefined]",
          "fieldmap": "[Undefined]",
          "fieldmapmask": "[Undefined]",
          "pedir": "[Undefined]",
          "echospacing": "[Undefined]",
          "bbrtype": "[Undefined]",
          "bbrslope": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]",
          "out_matrix_file": "[Undefined]",
          "out_log": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "afni_centrality_degree_centrality_307",
        "type": "workflow",
        "inputs": {
          "afni_centrality": "{'args': '[Undefined]', 'autoclip': '[Undefined]', 'automask': '[Undefined]', 'environ': {'OMP_NUM_THREADS': '2'}, 'num_threads': 2, 'oned_file': '[Undefined]', 'out_file': 'degree_centrality_merged.nii.gz', 'outputtype': 'AFNI', 'polort': '[Undefined]', 'thresh': '[Undefined]'}",
          "sep_nifti_subbriks": "{'function_str': '@Function.sig_imports(\\n    [\\n        \"from collections.abc import Iterable\",\\n        \"import os\",\\n        \"from pathlib import Path\",\\n        \"import nibabel as nib\",\\n        \"from CPAC.pipeline.schema import valid_options\",\\n        \"from CPAC.utils.docs import docstring_parameter\",\\n    ]\\n)\\n@docstring_parameter(\\n    weight_options=tuple(valid_options[\"centrality\"][\"weight_options\"])\\n)\\ndef sep_nifti_subbriks(nifti_file: Path | str, out_names: Iterable[str]) -> list[str]:\\n    \"\"\"Separate sub-briks of niftis and save specified out\\n\\n    Parameters\\n    ----------\\n    nifti_file : ~pathlib.Path or str\\n        path to NIfTI output of an AFNI centrality tool\\n\\n    out_names : iterable of str\\n        an iterable of strings, each ending with one of {weight_options}\\n\\n    Returns\\n    -------\\n    list of str\\n        paths to each of the specified outputs as its own file\\n    \"\"\"\\n    output_niftis = []\\n    weight_options = valid_options[\"centrality\"][\"weight_options\"]\\n    selected_options = {_[::-1].split(\"_\", 1)[0][::-1]: _ for _ in out_names}\\n\\n    nii_img = nib.load(nifti_file)\\n    nii_arr = nii_img.get_fdata()\\n    nii_affine = nii_img.affine\\n    nii_dims = nii_arr.shape\\n\\n    if nii_dims[-1] != len(weight_options):\\n        if len(nii_dims) == 3 and len(out_names) == 1:  # noqa: PLR2004\\n            pass\\n        else:\\n            err_msg = \"out_names must have same number of elements as nifti sub-briks\"\\n            raise Exception(err_msg)\\n\\n    for brik, option in enumerate(weight_options):\\n        if option in selected_options:\\n            if len(nii_dims) == 3:  # noqa: PLR2004\\n                brik_arr = nii_arr\\n            elif len(nii_dims) > 3:  # noqa: PLR2004\\n                brik_arr = nii_arr[:, :, :, 0, brik]\\n            out_file = os.path.join(os.getcwd(), selected_options[option] + \".nii.gz\")\\n            out_img = nib.Nifti1Image(brik_arr, nii_affine)\\n            out_img.to_filename(out_file)\\n            output_niftis.append(out_file)\\n\\n    return output_niftis\\n', 'out_names': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d785380>'}",
          "outputspec": "{}",
          "inputspec": "{'in_file': '[Undefined]', 'template': '[Undefined]', 'threshold': 0.1}"
        },
        "outputs": {
          "afni_centrality": "{'oned_file': None, 'out_file': None}",
          "sep_nifti_subbriks": "{'output_niftis': None}",
          "outputspec": "{'outfile_list': None}",
          "inputspec": "{'in_file': None, 'template': None, 'threshold': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "afni_centrality",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "sparsity": "[Undefined]",
              "oned_file": "[Undefined]",
              "mask": "[Undefined]",
              "thresh": "[Undefined]",
              "polort": "[Undefined]",
              "autoclip": "[Undefined]",
              "automask": "[Undefined]",
              "num_threads": "2",
              "outputtype": "AFNI",
              "out_file": "degree_centrality_merged.nii.gz",
              "args": "[Undefined]",
              "environ": "{'OMP_NUM_THREADS': '2'}"
            },
            "outputs": {
              "oned_file": "[Undefined]",
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "sep_nifti_subbriks",
            "type": "node",
            "inputs": {
              "function_str": "@Function.sig_imports(\n    [\n        \"from collections.abc import Iterable\",\n        \"import os\",\n        \"from pathlib import Path\",\n        \"import nibabel as nib\",\n        \"from CPAC.pipeline.schema import valid_options\",\n        \"from CPAC.utils.docs import docstring_parameter\",\n    ]\n)\n@docstring_parameter(\n    weight_options=tuple(valid_options[\"centrality\"][\"weight_options\"])\n)\ndef sep_nifti_subbriks(nifti_file: Path | str, out_names: Iterable[str]) -> list[str]:\n    \"\"\"Separate sub-briks of niftis and save specified out\n\n    Parameters\n    ----------\n    nifti_file : ~pathlib.Path or str\n        path to NIfTI output of an AFNI centrality tool\n\n    out_names : iterable of str\n        an iterable of strings, each ending with one of {weight_options}\n\n    Returns\n    -------\n    list of str\n        paths to each of the specified outputs as its own file\n    \"\"\"\n    output_niftis = []\n    weight_options = valid_options[\"centrality\"][\"weight_options\"]\n    selected_options = {_[::-1].split(\"_\", 1)[0][::-1]: _ for _ in out_names}\n\n    nii_img = nib.load(nifti_file)\n    nii_arr = nii_img.get_fdata()\n    nii_affine = nii_img.affine\n    nii_dims = nii_arr.shape\n\n    if nii_dims[-1] != len(weight_options):\n        if len(nii_dims) == 3 and len(out_names) == 1:  # noqa: PLR2004\n            pass\n        else:\n            err_msg = \"out_names must have same number of elements as nifti sub-briks\"\n            raise Exception(err_msg)\n\n    for brik, option in enumerate(weight_options):\n        if option in selected_options:\n            if len(nii_dims) == 3:  # noqa: PLR2004\n                brik_arr = nii_arr\n            elif len(nii_dims) > 3:  # noqa: PLR2004\n                brik_arr = nii_arr[:, :, :, 0, brik]\n            out_file = os.path.join(os.getcwd(), selected_options[option] + \".nii.gz\")\n            out_img = nib.Nifti1Image(brik_arr, nii_affine)\n            out_img.to_filename(out_file)\n            output_niftis.append(out_file)\n\n    return output_niftis\n",
              "nifti_file": "[Undefined]",
              "out_names": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d7855b0>"
            },
            "outputs": {
              "output_niftis": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "outfile_list": "[Undefined]"
            },
            "outputs": {
              "outfile_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "template": "[Undefined]",
              "threshold": "0.1"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "template": "[Undefined]",
              "threshold": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "afni_centrality",
            "target": "sep_nifti_subbriks"
          },
          {
            "origin": "sep_nifti_subbriks",
            "target": "outputspec"
          },
          {
            "origin": "inputspec",
            "target": "afni_centrality"
          }
        ]
      },
      {
        "name": "centrality_merge_node_307",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.network_centrality.utils.merge_lists",
          "deg_list": "[Undefined]",
          "eig_list": "[Undefined]",
          "lfcd_list": "[Undefined]"
        },
        "outputs": {
          "degree_weighted": "[Undefined]",
          "degree_binarized": "[Undefined]",
          "eigen_weighted": "[Undefined]",
          "eigen_binarized": "[Undefined]",
          "lfcd_weighted": "[Undefined]",
          "lfcd_binarized": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "afni_centrality_local_functional_connectivity_density_307",
        "type": "workflow",
        "inputs": {
          "afni_centrality": "{'args': '[Undefined]', 'autoclip': '[Undefined]', 'automask': '[Undefined]', 'environ': {'OMP_NUM_THREADS': '2'}, 'num_threads': 2, 'out_file': 'lfcd_merged.nii.gz', 'outputtype': 'AFNI', 'polort': '[Undefined]'}",
          "sep_nifti_subbriks": "{'function_str': '@Function.sig_imports(\\n    [\\n        \"from collections.abc import Iterable\",\\n        \"import os\",\\n        \"from pathlib import Path\",\\n        \"import nibabel as nib\",\\n        \"from CPAC.pipeline.schema import valid_options\",\\n        \"from CPAC.utils.docs import docstring_parameter\",\\n    ]\\n)\\n@docstring_parameter(\\n    weight_options=tuple(valid_options[\"centrality\"][\"weight_options\"])\\n)\\ndef sep_nifti_subbriks(nifti_file: Path | str, out_names: Iterable[str]) -> list[str]:\\n    \"\"\"Separate sub-briks of niftis and save specified out\\n\\n    Parameters\\n    ----------\\n    nifti_file : ~pathlib.Path or str\\n        path to NIfTI output of an AFNI centrality tool\\n\\n    out_names : iterable of str\\n        an iterable of strings, each ending with one of {weight_options}\\n\\n    Returns\\n    -------\\n    list of str\\n        paths to each of the specified outputs as its own file\\n    \"\"\"\\n    output_niftis = []\\n    weight_options = valid_options[\"centrality\"][\"weight_options\"]\\n    selected_options = {_[::-1].split(\"_\", 1)[0][::-1]: _ for _ in out_names}\\n\\n    nii_img = nib.load(nifti_file)\\n    nii_arr = nii_img.get_fdata()\\n    nii_affine = nii_img.affine\\n    nii_dims = nii_arr.shape\\n\\n    if nii_dims[-1] != len(weight_options):\\n        if len(nii_dims) == 3 and len(out_names) == 1:  # noqa: PLR2004\\n            pass\\n        else:\\n            err_msg = \"out_names must have same number of elements as nifti sub-briks\"\\n            raise Exception(err_msg)\\n\\n    for brik, option in enumerate(weight_options):\\n        if option in selected_options:\\n            if len(nii_dims) == 3:  # noqa: PLR2004\\n                brik_arr = nii_arr\\n            elif len(nii_dims) > 3:  # noqa: PLR2004\\n                brik_arr = nii_arr[:, :, :, 0, brik]\\n            out_file = os.path.join(os.getcwd(), selected_options[option] + \".nii.gz\")\\n            out_img = nib.Nifti1Image(brik_arr, nii_affine)\\n            out_img.to_filename(out_file)\\n            output_niftis.append(out_file)\\n\\n    return output_niftis\\n', 'out_names': '<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d7855b0>'}",
          "outputspec": "{}",
          "inputspec": "{'in_file': '[Undefined]', 'template': '[Undefined]', 'threshold': 0.001}",
          "convert_threshold": "{'function_str': 'def convert_pvalue_to_r(datafile, p_value, two_tailed=False):\\n    \"\"\"\\n    Calculate correlation threshold from p_value.\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        filepath to dataset to extract number of time pts from\\n    p_value : float\\n        significance threshold p-value\\n    two_tailed : boolean (optional); default=False\\n        flag to indicate whether to calculate the two-tailed t-test\\n        threshold for the returned correlation value\\n\\n    Returns\\n    -------\\n    r_value : float\\n        correlation threshold value\\n    \"\"\"\\n    import numpy as np\\n    import nibabel as nib\\n    import scipy.stats\\n\\n    # Get two-tailed distribution\\n    if two_tailed:\\n        p_value = p_value / 2\\n\\n    # Load in data and number of time pts\\n    img = nib.load(datafile).get_fdata()\\n    t_pts = img.shape[-1]\\n\\n    # N-2 degrees of freedom with Pearson correlation (two sample means)\\n    deg_freedom = t_pts - 2\\n\\n    # Inverse Survival Function (Inverse of SF)\\n    # Note: survival function (SF) is also known as the complementary\\n    # cumulative distribution function (CCDF): F_(x) = p = P(X > x) = 1 - F(x)\\n    # The inverse will yield: x = F_^-1(p) = F_^-1(P(X > x))\\n    # where x is a value under the distribution of the random variable X\\n    # such that the probability of getting greater than x, is p\\n    t_value = scipy.stats.t.isf(p_value, deg_freedom)\\n    return np.sqrt(t_value**2 / (deg_freedom + t_value**2))\\n\\n    # Return correlation coefficient\\n', 'two_tailed': '[Undefined]'}"
        },
        "outputs": {
          "afni_centrality": "{'out_file': None}",
          "sep_nifti_subbriks": "{'output_niftis': None}",
          "outputspec": "{'outfile_list': None}",
          "inputspec": "{'in_file': None, 'template': None, 'threshold': None}",
          "convert_threshold": "{'rvalue_threshold': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "afni_centrality",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "thresh": "[Undefined]",
              "polort": "[Undefined]",
              "autoclip": "[Undefined]",
              "automask": "[Undefined]",
              "num_threads": "2",
              "outputtype": "AFNI",
              "out_file": "lfcd_merged.nii.gz",
              "args": "[Undefined]",
              "environ": "{'OMP_NUM_THREADS': '2'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "sep_nifti_subbriks",
            "type": "node",
            "inputs": {
              "function_str": "@Function.sig_imports(\n    [\n        \"from collections.abc import Iterable\",\n        \"import os\",\n        \"from pathlib import Path\",\n        \"import nibabel as nib\",\n        \"from CPAC.pipeline.schema import valid_options\",\n        \"from CPAC.utils.docs import docstring_parameter\",\n    ]\n)\n@docstring_parameter(\n    weight_options=tuple(valid_options[\"centrality\"][\"weight_options\"])\n)\ndef sep_nifti_subbriks(nifti_file: Path | str, out_names: Iterable[str]) -> list[str]:\n    \"\"\"Separate sub-briks of niftis and save specified out\n\n    Parameters\n    ----------\n    nifti_file : ~pathlib.Path or str\n        path to NIfTI output of an AFNI centrality tool\n\n    out_names : iterable of str\n        an iterable of strings, each ending with one of {weight_options}\n\n    Returns\n    -------\n    list of str\n        paths to each of the specified outputs as its own file\n    \"\"\"\n    output_niftis = []\n    weight_options = valid_options[\"centrality\"][\"weight_options\"]\n    selected_options = {_[::-1].split(\"_\", 1)[0][::-1]: _ for _ in out_names}\n\n    nii_img = nib.load(nifti_file)\n    nii_arr = nii_img.get_fdata()\n    nii_affine = nii_img.affine\n    nii_dims = nii_arr.shape\n\n    if nii_dims[-1] != len(weight_options):\n        if len(nii_dims) == 3 and len(out_names) == 1:  # noqa: PLR2004\n            pass\n        else:\n            err_msg = \"out_names must have same number of elements as nifti sub-briks\"\n            raise Exception(err_msg)\n\n    for brik, option in enumerate(weight_options):\n        if option in selected_options:\n            if len(nii_dims) == 3:  # noqa: PLR2004\n                brik_arr = nii_arr\n            elif len(nii_dims) > 3:  # noqa: PLR2004\n                brik_arr = nii_arr[:, :, :, 0, brik]\n            out_file = os.path.join(os.getcwd(), selected_options[option] + \".nii.gz\")\n            out_img = nib.Nifti1Image(brik_arr, nii_affine)\n            out_img.to_filename(out_file)\n            output_niftis.append(out_file)\n\n    return output_niftis\n",
              "nifti_file": "[Undefined]",
              "out_names": "<generator object _truncate_large_cpac_internals.<locals>.<genexpr> at 0x15211d785540>"
            },
            "outputs": {
              "output_niftis": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "outfile_list": "[Undefined]"
            },
            "outputs": {
              "outfile_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "template": "[Undefined]",
              "threshold": "0.001"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "template": "[Undefined]",
              "threshold": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "convert_threshold",
            "type": "node",
            "inputs": {
              "function_str": "def convert_pvalue_to_r(datafile, p_value, two_tailed=False):\n    \"\"\"\n    Calculate correlation threshold from p_value.\n\n    Parameters\n    ----------\n    datafile : string\n        filepath to dataset to extract number of time pts from\n    p_value : float\n        significance threshold p-value\n    two_tailed : boolean (optional); default=False\n        flag to indicate whether to calculate the two-tailed t-test\n        threshold for the returned correlation value\n\n    Returns\n    -------\n    r_value : float\n        correlation threshold value\n    \"\"\"\n    import numpy as np\n    import nibabel as nib\n    import scipy.stats\n\n    # Get two-tailed distribution\n    if two_tailed:\n        p_value = p_value / 2\n\n    # Load in data and number of time pts\n    img = nib.load(datafile).get_fdata()\n    t_pts = img.shape[-1]\n\n    # N-2 degrees of freedom with Pearson correlation (two sample means)\n    deg_freedom = t_pts - 2\n\n    # Inverse Survival Function (Inverse of SF)\n    # Note: survival function (SF) is also known as the complementary\n    # cumulative distribution function (CCDF): F_(x) = p = P(X > x) = 1 - F(x)\n    # The inverse will yield: x = F_^-1(p) = F_^-1(P(X > x))\n    # where x is a value under the distribution of the random variable X\n    # such that the probability of getting greater than x, is p\n    t_value = scipy.stats.t.isf(p_value, deg_freedom)\n    return np.sqrt(t_value**2 / (deg_freedom + t_value**2))\n\n    # Return correlation coefficient\n",
              "datafile": "[Undefined]",
              "p_value": "[Undefined]",
              "two_tailed": "[Undefined]"
            },
            "outputs": {
              "rvalue_threshold": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "afni_centrality",
            "target": "sep_nifti_subbriks"
          },
          {
            "origin": "sep_nifti_subbriks",
            "target": "outputspec"
          },
          {
            "origin": "inputspec",
            "target": "afni_centrality"
          },
          {
            "origin": "inputspec",
            "target": "convert_threshold"
          },
          {
            "origin": "convert_threshold",
            "target": "afni_centrality"
          }
        ]
      },
      {
        "name": "space-template_dcb_smooth_AFNI_307",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "smooth": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "fwhm_input": "{'fwhm': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "smooth": "{'out_file': None}",
          "fwhm_input": "{'fwhm': None}",
          "outputspec": "{'fwhm': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "smooth",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "automask": "[Undefined]",
              "fwhm": "[Undefined]",
              "fwhmxy": "[Undefined]",
              "blurmaster": "[Undefined]",
              "mask": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "out_file": "[Undefined]",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fwhm_input",
            "type": "node",
            "inputs": {
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "smooth"
          },
          {
            "origin": "smooth",
            "target": "outputspec"
          },
          {
            "origin": "fwhm_input",
            "target": "smooth"
          },
          {
            "origin": "fwhm_input",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_dcb_zstd_307",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_desc-sm_dcb_zstd_307",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_lfcdb_smooth_AFNI_307",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "smooth": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "fwhm_input": "{'fwhm': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "smooth": "{'out_file': None}",
          "fwhm_input": "{'fwhm': None}",
          "outputspec": "{'fwhm': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "smooth",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "automask": "[Undefined]",
              "fwhm": "[Undefined]",
              "fwhmxy": "[Undefined]",
              "blurmaster": "[Undefined]",
              "mask": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "out_file": "[Undefined]",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fwhm_input",
            "type": "node",
            "inputs": {
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "smooth"
          },
          {
            "origin": "smooth",
            "target": "outputspec"
          },
          {
            "origin": "fwhm_input",
            "target": "smooth"
          },
          {
            "origin": "fwhm_input",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_lfcdb_zstd_307",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_desc-sm_lfcdb_zstd_307",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_lfcdw_smooth_AFNI_307",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "smooth": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blurmaster': '[Undefined]', 'environ': {}, 'fwhmxy': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "fwhm_input": "{'fwhm': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "smooth": "{'out_file': None}",
          "fwhm_input": "{'fwhm': None}",
          "outputspec": "{'fwhm': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "smooth",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "automask": "[Undefined]",
              "fwhm": "[Undefined]",
              "fwhmxy": "[Undefined]",
              "blurmaster": "[Undefined]",
              "mask": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "out_file": "[Undefined]",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fwhm_input",
            "type": "node",
            "inputs": {
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fwhm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "smooth"
          },
          {
            "origin": "smooth",
            "target": "outputspec"
          },
          {
            "origin": "fwhm_input",
            "target": "smooth"
          },
          {
            "origin": "fwhm_input",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_lfcdw_zstd_307",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "space-template_desc-sm_lfcdw_zstd_307",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'in_file': '[Undefined]', 'mask': '[Undefined]'}",
          "z_score_std": "{'inputspec': {'input_file': '[Undefined]', 'mask_file': '[Undefined]'}, 'mean': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'standard_deviation': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}, 'op_string': {'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}, 'z_score': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputspec': {}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'in_file': None, 'mask': None}",
          "z_score_std": "{'inputspec': {'input_file': None, 'mask_file': None}, 'mean': {'out_stat': None}, 'standard_deviation': {'out_stat': None}, 'op_string': {'op_string': None}, 'z_score': {'out_file': None}, 'outputspec': {'z_score_img': None}}",
          "outputspec": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "outputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "z_score_std",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'input_file': '[Undefined]', 'mask_file': '[Undefined]'}",
              "mean": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -m', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "standard_deviation": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'op_string': '-k %s -s', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
              "op_string": "{'function_str': 'def get_operand_string(mean, std_dev):\\n    \"\"\"Get operand string for fslmaths.\\n\\n    Parameters\\n    ----------\\n    mean : string\\n        path to img containing mean\\n    std_dev : string\\n        path to img containing standard deviation\\n\\n    Returns\\n    -------\\n    op_string : string\\n        operand string\\n    \"\"\"\\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\\n    return str1 + \" -mas %s\"\\n'}",
              "z_score": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'input_file': None, 'mask_file': None}",
              "mean": "{'out_stat': None}",
              "standard_deviation": "{'out_stat': None}",
              "op_string": "{'op_string': None}",
              "z_score": "{'out_file': None}",
              "outputspec": "{'z_score_img': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "input_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "mean",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -m",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "standard_deviation",
                "type": "node",
                "inputs": {
                  "split_4d": "[Undefined]",
                  "in_file": "[Undefined]",
                  "op_string": "-k %s -s",
                  "mask_file": "[Undefined]",
                  "index_mask_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_stat": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "op_string",
                "type": "node",
                "inputs": {
                  "function_str": "def get_operand_string(mean, std_dev):\n    \"\"\"Get operand string for fslmaths.\n\n    Parameters\n    ----------\n    mean : string\n        path to img containing mean\n    std_dev : string\n        path to img containing standard deviation\n\n    Returns\n    -------\n    op_string : string\n        operand string\n    \"\"\"\n    str1 = \"-sub %f -div %f\" % (float(mean), float(std_dev))\n    return str1 + \" -mas %s\"\n",
                  "mean": "[Undefined]",
                  "std_dev": "[Undefined]"
                },
                "outputs": {
                  "op_string": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "z_score",
                "type": "node",
                "inputs": {
                  "op_string": "[Undefined]",
                  "operand_files": "[Undefined]",
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "z_score_img": "[Undefined]"
                },
                "outputs": {
                  "z_score_img": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "mean"
              },
              {
                "origin": "inputspec",
                "target": "standard_deviation"
              },
              {
                "origin": "inputspec",
                "target": "z_score"
              },
              {
                "origin": "mean",
                "target": "op_string"
              },
              {
                "origin": "standard_deviation",
                "target": "op_string"
              },
              {
                "origin": "op_string",
                "target": "z_score"
              },
              {
                "origin": "z_score",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "z_score_std"
          },
          {
            "origin": "z_score_std",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "id_string_desc-preproc_T1w_39",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "desc-preproc_T1w",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-preproc_T1w_39",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-preproc_T1w_39",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-preproc_T1w_39",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-head_T1w_41",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "desc-head_T1w",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-head_T1w_41",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-head_T1w_41",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-head_T1w_41",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-T1w_desc-brain_mask_34",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-T1w_desc-brain_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-T1w_desc-brain_mask_34",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-T1w_desc-brain_mask_34",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-T1w_desc-brain_mask_34",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-preproc_T1w_48",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_desc-preproc_T1w",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-preproc_T1w_48",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "anat_mni_ants_register",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'ants_para': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}",
          "calc_ants_warp": "{'function_str': 'def hardcoded_reg(\\n    moving_brain,\\n    reference_brain,\\n    moving_skull,\\n    reference_skull,\\n    ants_para,\\n    moving_mask=None,\\n    reference_mask=None,\\n    fixed_image_mask=None,\\n    interp=None,\\n    reg_with_skull=0,\\n):\\n    \"\"\"Run ANTs registration.\"\"\"\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \"dimensionality\":\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = (\\n                        \"Dimensionality specified in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 2, 3, or 4 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--dimensionality\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"verbose\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"Verbose output option in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--verbose\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"float\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"Float option in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--float\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"collapse-output-transforms\":\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = (\\n                        \"collapse-output-transforms specified in ANTs parameters:\"\\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\\n                        \" Change to 0 or 1 and try again\"\\n                    )\\n                    raise ValueError(err_msg)\\n                regcmd.append(\"--collapse-output-transforms\")\\n                regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \"winsorize-image-intensities\":\\n                if (\\n                    ants_para[para_index][para_type][\"lowerQuantile\"] is None\\n                    or ants_para[para_index][para_type][\"upperQuantile\"] is None\\n                ):\\n                    err_msg = (\\n                        \"Please specifiy lowerQuantile and upperQuantile of ANTs\"\\n                        \" parameters --winsorize-image-intensities in pipeline config.\"\\n                    )\\n                    raise RequiredFieldInvalid(err_msg)\\n                regcmd.append(\"--winsorize-image-intensities\")\\n                _quantile = ants_para[para_index][para_type]\\n                regcmd.append(\\n                    f\"[{_quantile[\\'lowerQuantile\\']},{_quantile[\\'upperQuantile\\']}]\"\\n                )\\n\\n            elif para_type == \"initial-moving-transform\":\\n                if ants_para[para_index][para_type][\"initializationFeature\"] is None:\\n                    err_msg = (\\n                        \"Please specifiy initializationFeature of ANTs parameters in\"\\n                        \" pipeline config.\"\\n                    )\\n                    raise RequiredFieldInvalid(err_msg)\\n                regcmd.append(\"--initial-moving-transform\")\\n                initialization_feature = ants_para[para_index][para_type][\\n                    \"initializationFeature\"\\n                ]\\n                if reg_with_skull == 1:\\n                    regcmd.append(\\n                        f\"[{reference_skull},{moving_skull},{initialization_feature}]\"\\n                    )\\n                else:\\n                    regcmd.append(\\n                        f\"[{reference_brain},{moving_brain},{initialization_feature}]\"\\n                    )\\n\\n            elif para_type == \"transforms\":\\n                for trans_index in range(len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type in (\"Rigid\", \"Affine\"):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"gradientStep\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    f\"Please specifiy {trans_type} Gradient Step of\"\\n                                    \" ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            gradient_step = ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"gradientStep\"]\\n                            regcmd.append(f\"{trans_type}[{gradient_step}]\")\\n\\n                        if trans_type == \"SyN\":\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"gradientStep\"]\\n                                is None\\n                            ):\\n                                err_msg = f\"Please specifiy {trans_type} Gradient Step of ANTs parameters in pipeline config.\"\\n                                raise RequiredFieldInvalid(err_msg)\\n                            SyN_para = []\\n                            SyN_para.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"gradientStep\"]\\n                                )\\n                            )\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"updateFieldVarianceInVoxelSpace\"]\\n                                is not None\\n                            ):\\n                                SyN_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"updateFieldVarianceInVoxelSpace\"]\\n                                    )\\n                                )\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"totalFieldVarianceInVoxelSpace\"]\\n                                is not None\\n                            ):\\n                                SyN_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"totalFieldVarianceInVoxelSpace\"]\\n                                    )\\n                                )\\n                            SyN_para = \",\".join([str(elem) for elem in SyN_para])\\n                            regcmd.append(f\"{trans_type}[{SyN_para}]\")\\n\\n                        if (\\n                            ants_para[para_index][para_type][trans_index][trans_type][\\n                                \"metric\"\\n                            ][\"type\"]\\n                            == \"MI\"\\n                        ):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"metricWeight\"]\\n                                is None\\n                                or ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"numberOfBins\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy metricWeight and numberOfBins for\"\\n                                    \" metric MI of ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            MI_para = []\\n                            _metric = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"metric\"]\\n                            MI_para.append(\\n                                f\"{_metric[\\'metricWeight\\']},{_metric[\\'numberOfBins\\']}\"\\n                            )\\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"metric\"] and ants_para[para_index][\\n                                para_type\\n                            ][trans_index][trans_type][\"metric\"][\\n                                \"samplingStrategy\"\\n                            ] in [\"None\", \"Regular\", \"Random\"]:\\n                                MI_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingStrategy\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"samplingPercentage\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"samplingPercentage\"]\\n                                is not None\\n                            ):\\n                                MI_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingPercentage\"]\\n                                    )\\n                                )\\n                            MI_para = \",\".join([str(elem) for elem in MI_para])\\n                            regcmd.append(\"--metric\")\\n                            if reg_with_skull == 1:\\n                                regcmd.append(\\n                                    f\"MI[{reference_skull},{moving_skull},{MI_para}]\"\\n                                )\\n                            else:\\n                                regcmd.append(\\n                                    f\"MI[{reference_brain},{moving_brain},{MI_para}]\"\\n                                )\\n\\n                        if (\\n                            ants_para[para_index][para_type][trans_index][trans_type][\\n                                \"metric\"\\n                            ][\"type\"]\\n                            == \"CC\"\\n                        ):\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"metricWeight\"]\\n                                is None\\n                                or ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"radius\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy metricWeight and radius for metric\"\\n                                    \" CC of ANTs parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            CC_para = []\\n                            _metric = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"metric\"]\\n                            CC_para.append(\\n                                f\"{_metric[\\'metricWeight\\']},{_metric[\\'radius\\']}\"\\n                            )\\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\\n                                trans_index\\n                            ][trans_type][\"metric\"] and ants_para[para_index][\\n                                para_type\\n                            ][trans_index][trans_type][\"metric\"][\\n                                \"samplingStrategy\"\\n                            ] in [\"None\", \"Regular\", \"Random\"]:\\n                                CC_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingStrategy\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"samplingPercentage\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"metric\"][\"samplingPercentage\"]\\n                                is not None\\n                            ):\\n                                CC_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"metric\"][\"samplingPercentage\"]\\n                                    )\\n                                )\\n                            CC_para = \",\".join([str(elem) for elem in CC_para])\\n                            regcmd.append(\"--metric\")\\n                            regcmd.append(\\n                                f\"CC[{reference_skull},{moving_skull},{CC_para}]\"\\n                            )\\n\\n                        if (\\n                            \"convergence\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                        ):\\n                            convergence_para = []\\n                            if (\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"iteration\"]\\n                                is None\\n                            ):\\n                                err_msg = (\\n                                    \"Please specifiy convergence iteration of ANTs\"\\n                                    \" parameters in pipeline config.\"\\n                                )\\n                                raise RequiredFieldInvalid(err_msg)\\n                            convergence_para.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"convergence\"][\"iteration\"]\\n                                )\\n                            )\\n                            if (\\n                                \"convergenceThreshold\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"convergenceThreshold\"]\\n                                is not None\\n                            ):\\n                                convergence_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"convergence\"][\"convergenceThreshold\"]\\n                                    )\\n                                )\\n                            if (\\n                                \"convergenceWindowSize\"\\n                                in ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"]\\n                                and ants_para[para_index][para_type][trans_index][\\n                                    trans_type\\n                                ][\"convergence\"][\"convergenceWindowSize\"]\\n                                is not None\\n                            ):\\n                                convergence_para.append(\\n                                    str(\\n                                        ants_para[para_index][para_type][trans_index][\\n                                            trans_type\\n                                        ][\"convergence\"][\"convergenceWindowSize\"]\\n                                    )\\n                                )\\n                            convergence_para = \",\".join(\\n                                [str(elem) for elem in convergence_para]\\n                            )\\n                            regcmd.append(\"--convergence\")\\n                            regcmd.append(f\"[{convergence_para}]\")\\n\\n                        if (\\n                            \"smoothing-sigmas\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"smoothing-sigmas\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"smoothing-sigmas\"]\\n                                )\\n                            )\\n\\n                        if (\\n                            \"shrink-factors\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"shrink-factors\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\\n                                str(\\n                                    ants_para[para_index][para_type][trans_index][\\n                                        trans_type\\n                                    ][\"shrink-factors\"]\\n                                )\\n                            )\\n\\n                        if (\\n                            \"use-histogram-matching\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                        ):\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"use-histogram-matching\"]:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if (\\n                            \"winsorize-image-intensities\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"][\"lowerQuantile\"]\\n                            is not None\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"][\"upperQuantile\"]\\n                            is not None\\n                        ):\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            _quantile = ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"winsorize-image-intensities\"]\\n                            regcmd.append(\\n                                f\"[{_quantile[\\'lowerQuantile\\']},{_quantile[\\'upperQuantile\\']}]\"\\n                            )\\n\\n                        if (\\n                            \"masks\"\\n                            in ants_para[para_index][para_type][trans_index][trans_type]\\n                            and ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"masks\"]\\n                            is not None\\n                        ):\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type\\n                            ][\"masks\"]:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(f\"[{reference_mask},{moving_mask}]\")\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \"masks\":\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if (\\n                        not ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        err_msg = (\\n                            \"Masks option in ANTs parameters:\"\\n                            f\" {ants_para[para_index][para_type]} is not supported.\"\\n                            \" Please set `fixed_image_mask` as True. Or set both\"\\n                            \" `fixed_image_mask` and `moving_image_mask` as False\"\\n                        )\\n                        raise NotImplementedError(err_msg)\\n                    if (\\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\n                            \"[\" + str(reference_mask) + \",\" + str(moving_mask) + \"]\"\\n                        )\\n                    elif (\\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\\n                    ):\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\"[\" + str(reference_mask) + \"]\")\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(f\"{interp}\")\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \"command.txt\")\\n    with open(command_file, \"wt\") as f:\\n        f.write(\" \".join(regcmd))\\n\\n    try:\\n        subprocess.check_output(regcmd)\\n    except Exception as e:\\n        msg = (\\n            \"[!] ANTS registration did not complete successfully.\"\\n            f\"\\\\n\\\\nError details:\\\\n{e}\\\\n{e.output}\\\\n\"\\n        )\\n        raise RuntimeError(msg)\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\".\") if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        msg = (\\n            \"\\\\n\\\\n[!] No registration output file found. ANTS registration may not have\"\\n            \" completed successfully.\\\\n\\\\n\"\\n        )\\n        raise RuntimeError(msg)\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': '[Undefined]'}",
          "select_forward_initial": "{'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Initial'}",
          "select_forward_rigid": "{'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Rigid'}",
          "select_forward_affine": "{'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Affine'}",
          "select_forward_warp": "{'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Warp'}",
          "select_inverse_warp": "{'function_str': 'def seperate_warps_list(warp_list, selection):\\n    \"\"\"Select the warp from the warp list.\"\"\"\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == \"Warp\":\\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\\n                selected_warp = warp\\n        elif selection in warp:\\n            selected_warp = warp\\n    return selected_warp\\n', 'selection': 'Inverse'}",
          "outputspec": "{'composite_transform': '[Undefined]', 'wait': '[Undefined]'}"
        },
        "outputs": {
          "inputspec": "{'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}",
          "calc_ants_warp": "{'warp_list': None, 'warped_image': None}",
          "select_forward_initial": "{'selected_warp': None}",
          "select_forward_rigid": "{'selected_warp': None}",
          "select_forward_affine": "{'selected_warp': None}",
          "select_forward_warp": "{'selected_warp': None}",
          "select_inverse_warp": "{'selected_warp': None}",
          "outputspec": "{'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "moving_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "moving_skull": "[Undefined]",
              "reference_skull": "[Undefined]",
              "reference_mask": "[Undefined]",
              "moving_mask": "[Undefined]",
              "fixed_image_mask": "None",
              "ants_para": "[{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}]",
              "interp": "[Undefined]"
            },
            "outputs": {
              "moving_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "moving_skull": "[Undefined]",
              "reference_skull": "[Undefined]",
              "reference_mask": "[Undefined]",
              "moving_mask": "[Undefined]",
              "fixed_image_mask": "[Undefined]",
              "ants_para": "[Undefined]",
              "interp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calc_ants_warp",
            "type": "node",
            "inputs": {
              "function_str": "def hardcoded_reg(\n    moving_brain,\n    reference_brain,\n    moving_skull,\n    reference_skull,\n    ants_para,\n    moving_mask=None,\n    reference_mask=None,\n    fixed_image_mask=None,\n    interp=None,\n    reg_with_skull=0,\n):\n    \"\"\"Run ANTs registration.\"\"\"\n    # TODO: expand transforms to cover all in ANTs para\n\n    regcmd = [\"antsRegistration\"]\n    for para_index in range(len(ants_para)):\n        for para_type in ants_para[para_index]:\n            if para_type == \"dimensionality\":\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\n                    err_msg = (\n                        \"Dimensionality specified in ANTs parameters:\"\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\n                        \" Change to 2, 3, or 4 and try again\"\n                    )\n                    raise ValueError(err_msg)\n                regcmd.append(\"--dimensionality\")\n                regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == \"verbose\":\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = (\n                        \"Verbose output option in ANTs parameters:\"\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\n                        \" Change to 0 or 1 and try again\"\n                    )\n                    raise ValueError(err_msg)\n                regcmd.append(\"--verbose\")\n                regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == \"float\":\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = (\n                        \"Float option in ANTs parameters:\"\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\n                        \" Change to 0 or 1 and try again\"\n                    )\n                    raise ValueError(err_msg)\n                regcmd.append(\"--float\")\n                regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == \"collapse-output-transforms\":\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = (\n                        \"collapse-output-transforms specified in ANTs parameters:\"\n                        f\" {ants_para[para_index][para_type]}, is not supported.\"\n                        \" Change to 0 or 1 and try again\"\n                    )\n                    raise ValueError(err_msg)\n                regcmd.append(\"--collapse-output-transforms\")\n                regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == \"winsorize-image-intensities\":\n                if (\n                    ants_para[para_index][para_type][\"lowerQuantile\"] is None\n                    or ants_para[para_index][para_type][\"upperQuantile\"] is None\n                ):\n                    err_msg = (\n                        \"Please specifiy lowerQuantile and upperQuantile of ANTs\"\n                        \" parameters --winsorize-image-intensities in pipeline config.\"\n                    )\n                    raise RequiredFieldInvalid(err_msg)\n                regcmd.append(\"--winsorize-image-intensities\")\n                _quantile = ants_para[para_index][para_type]\n                regcmd.append(\n                    f\"[{_quantile['lowerQuantile']},{_quantile['upperQuantile']}]\"\n                )\n\n            elif para_type == \"initial-moving-transform\":\n                if ants_para[para_index][para_type][\"initializationFeature\"] is None:\n                    err_msg = (\n                        \"Please specifiy initializationFeature of ANTs parameters in\"\n                        \" pipeline config.\"\n                    )\n                    raise RequiredFieldInvalid(err_msg)\n                regcmd.append(\"--initial-moving-transform\")\n                initialization_feature = ants_para[para_index][para_type][\n                    \"initializationFeature\"\n                ]\n                if reg_with_skull == 1:\n                    regcmd.append(\n                        f\"[{reference_skull},{moving_skull},{initialization_feature}]\"\n                    )\n                else:\n                    regcmd.append(\n                        f\"[{reference_brain},{moving_brain},{initialization_feature}]\"\n                    )\n\n            elif para_type == \"transforms\":\n                for trans_index in range(len(ants_para[para_index][para_type])):\n                    for trans_type in ants_para[para_index][para_type][trans_index]:\n                        regcmd.append(\"--transform\")\n                        if trans_type in (\"Rigid\", \"Affine\"):\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"gradientStep\"]\n                                is None\n                            ):\n                                err_msg = (\n                                    f\"Please specifiy {trans_type} Gradient Step of\"\n                                    \" ANTs parameters in pipeline config.\"\n                                )\n                                raise RequiredFieldInvalid(err_msg)\n                            gradient_step = ants_para[para_index][para_type][\n                                trans_index\n                            ][trans_type][\"gradientStep\"]\n                            regcmd.append(f\"{trans_type}[{gradient_step}]\")\n\n                        if trans_type == \"SyN\":\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"gradientStep\"]\n                                is None\n                            ):\n                                err_msg = f\"Please specifiy {trans_type} Gradient Step of ANTs parameters in pipeline config.\"\n                                raise RequiredFieldInvalid(err_msg)\n                            SyN_para = []\n                            SyN_para.append(\n                                str(\n                                    ants_para[para_index][para_type][trans_index][\n                                        trans_type\n                                    ][\"gradientStep\"]\n                                )\n                            )\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"updateFieldVarianceInVoxelSpace\"]\n                                is not None\n                            ):\n                                SyN_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"updateFieldVarianceInVoxelSpace\"]\n                                    )\n                                )\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"totalFieldVarianceInVoxelSpace\"]\n                                is not None\n                            ):\n                                SyN_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"totalFieldVarianceInVoxelSpace\"]\n                                    )\n                                )\n                            SyN_para = \",\".join([str(elem) for elem in SyN_para])\n                            regcmd.append(f\"{trans_type}[{SyN_para}]\")\n\n                        if (\n                            ants_para[para_index][para_type][trans_index][trans_type][\n                                \"metric\"\n                            ][\"type\"]\n                            == \"MI\"\n                        ):\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"][\"metricWeight\"]\n                                is None\n                                or ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"][\"numberOfBins\"]\n                                is None\n                            ):\n                                err_msg = (\n                                    \"Please specifiy metricWeight and numberOfBins for\"\n                                    \" metric MI of ANTs parameters in pipeline config.\"\n                                )\n                                raise RequiredFieldInvalid(err_msg)\n                            MI_para = []\n                            _metric = ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"metric\"]\n                            MI_para.append(\n                                f\"{_metric['metricWeight']},{_metric['numberOfBins']}\"\n                            )\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\n                                trans_index\n                            ][trans_type][\"metric\"] and ants_para[para_index][\n                                para_type\n                            ][trans_index][trans_type][\"metric\"][\n                                \"samplingStrategy\"\n                            ] in [\"None\", \"Regular\", \"Random\"]:\n                                MI_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"metric\"][\"samplingStrategy\"]\n                                    )\n                                )\n                            if (\n                                \"samplingPercentage\"\n                                in ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"]\n                                and ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"][\"samplingPercentage\"]\n                                is not None\n                            ):\n                                MI_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"metric\"][\"samplingPercentage\"]\n                                    )\n                                )\n                            MI_para = \",\".join([str(elem) for elem in MI_para])\n                            regcmd.append(\"--metric\")\n                            if reg_with_skull == 1:\n                                regcmd.append(\n                                    f\"MI[{reference_skull},{moving_skull},{MI_para}]\"\n                                )\n                            else:\n                                regcmd.append(\n                                    f\"MI[{reference_brain},{moving_brain},{MI_para}]\"\n                                )\n\n                        if (\n                            ants_para[para_index][para_type][trans_index][trans_type][\n                                \"metric\"\n                            ][\"type\"]\n                            == \"CC\"\n                        ):\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"][\"metricWeight\"]\n                                is None\n                                or ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"][\"radius\"]\n                                is None\n                            ):\n                                err_msg = (\n                                    \"Please specifiy metricWeight and radius for metric\"\n                                    \" CC of ANTs parameters in pipeline config.\"\n                                )\n                                raise RequiredFieldInvalid(err_msg)\n                            CC_para = []\n                            _metric = ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"metric\"]\n                            CC_para.append(\n                                f\"{_metric['metricWeight']},{_metric['radius']}\"\n                            )\n                            if \"samplingStrategy\" in ants_para[para_index][para_type][\n                                trans_index\n                            ][trans_type][\"metric\"] and ants_para[para_index][\n                                para_type\n                            ][trans_index][trans_type][\"metric\"][\n                                \"samplingStrategy\"\n                            ] in [\"None\", \"Regular\", \"Random\"]:\n                                CC_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"metric\"][\"samplingStrategy\"]\n                                    )\n                                )\n                            if (\n                                \"samplingPercentage\"\n                                in ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"]\n                                and ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"metric\"][\"samplingPercentage\"]\n                                is not None\n                            ):\n                                CC_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"metric\"][\"samplingPercentage\"]\n                                    )\n                                )\n                            CC_para = \",\".join([str(elem) for elem in CC_para])\n                            regcmd.append(\"--metric\")\n                            regcmd.append(\n                                f\"CC[{reference_skull},{moving_skull},{CC_para}]\"\n                            )\n\n                        if (\n                            \"convergence\"\n                            in ants_para[para_index][para_type][trans_index][trans_type]\n                        ):\n                            convergence_para = []\n                            if (\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"convergence\"][\"iteration\"]\n                                is None\n                            ):\n                                err_msg = (\n                                    \"Please specifiy convergence iteration of ANTs\"\n                                    \" parameters in pipeline config.\"\n                                )\n                                raise RequiredFieldInvalid(err_msg)\n                            convergence_para.append(\n                                str(\n                                    ants_para[para_index][para_type][trans_index][\n                                        trans_type\n                                    ][\"convergence\"][\"iteration\"]\n                                )\n                            )\n                            if (\n                                \"convergenceThreshold\"\n                                in ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"convergence\"]\n                                and ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"convergence\"][\"convergenceThreshold\"]\n                                is not None\n                            ):\n                                convergence_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"convergence\"][\"convergenceThreshold\"]\n                                    )\n                                )\n                            if (\n                                \"convergenceWindowSize\"\n                                in ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"convergence\"]\n                                and ants_para[para_index][para_type][trans_index][\n                                    trans_type\n                                ][\"convergence\"][\"convergenceWindowSize\"]\n                                is not None\n                            ):\n                                convergence_para.append(\n                                    str(\n                                        ants_para[para_index][para_type][trans_index][\n                                            trans_type\n                                        ][\"convergence\"][\"convergenceWindowSize\"]\n                                    )\n                                )\n                            convergence_para = \",\".join(\n                                [str(elem) for elem in convergence_para]\n                            )\n                            regcmd.append(\"--convergence\")\n                            regcmd.append(f\"[{convergence_para}]\")\n\n                        if (\n                            \"smoothing-sigmas\"\n                            in ants_para[para_index][para_type][trans_index][trans_type]\n                            and ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"smoothing-sigmas\"]\n                            is not None\n                        ):\n                            regcmd.append(\"--smoothing-sigmas\")\n                            regcmd.append(\n                                str(\n                                    ants_para[para_index][para_type][trans_index][\n                                        trans_type\n                                    ][\"smoothing-sigmas\"]\n                                )\n                            )\n\n                        if (\n                            \"shrink-factors\"\n                            in ants_para[para_index][para_type][trans_index][trans_type]\n                            and ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"shrink-factors\"]\n                            is not None\n                        ):\n                            regcmd.append(\"--shrink-factors\")\n                            regcmd.append(\n                                str(\n                                    ants_para[para_index][para_type][trans_index][\n                                        trans_type\n                                    ][\"shrink-factors\"]\n                                )\n                            )\n\n                        if (\n                            \"use-histogram-matching\"\n                            in ants_para[para_index][para_type][trans_index][trans_type]\n                        ):\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"use-histogram-matching\"]:\n                                regcmd.append(\"--use-histogram-matching\")\n                                regcmd.append(\"1\")\n\n                        if (\n                            \"winsorize-image-intensities\"\n                            in ants_para[para_index][para_type][trans_index][trans_type]\n                            and ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"winsorize-image-intensities\"][\"lowerQuantile\"]\n                            is not None\n                            and ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"winsorize-image-intensities\"][\"upperQuantile\"]\n                            is not None\n                        ):\n                            regcmd.append(\"--winsorize-image-intensities\")\n                            _quantile = ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"winsorize-image-intensities\"]\n                            regcmd.append(\n                                f\"[{_quantile['lowerQuantile']},{_quantile['upperQuantile']}]\"\n                            )\n\n                        if (\n                            \"masks\"\n                            in ants_para[para_index][para_type][trans_index][trans_type]\n                            and ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"masks\"]\n                            is not None\n                        ):\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type\n                            ][\"masks\"]:\n                                regcmd.append(\"--masks\")\n                                regcmd.append(f\"[{reference_mask},{moving_mask}]\")\n                            else:\n                                regcmd.append(\"--masks\")\n                                regcmd.append(\"[NULL,NULL]\")\n\n            elif para_type == \"masks\":\n                # lesion preproc has\n                if fixed_image_mask is not None:\n                    regcmd.append(\"--masks\")\n                    regcmd.append(str(fixed_image_mask))\n                else:\n                    if (\n                        not ants_para[para_index][para_type][\"fixed_image_mask\"]\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\n                    ):\n                        err_msg = (\n                            \"Masks option in ANTs parameters:\"\n                            f\" {ants_para[para_index][para_type]} is not supported.\"\n                            \" Please set `fixed_image_mask` as True. Or set both\"\n                            \" `fixed_image_mask` and `moving_image_mask` as False\"\n                        )\n                        raise NotImplementedError(err_msg)\n                    if (\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\n                    ):\n                        regcmd.append(\"--masks\")\n                        regcmd.append(\n                            \"[\" + str(reference_mask) + \",\" + str(moving_mask) + \"]\"\n                        )\n                    elif (\n                        ants_para[para_index][para_type][\"fixed_image_mask\"]\n                        and ants_para[para_index][para_type][\"moving_image_mask\"]\n                    ):\n                        regcmd.append(\"--masks\")\n                        regcmd.append(\"[\" + str(reference_mask) + \"]\")\n                    else:\n                        continue\n\n    if interp is not None:\n        regcmd.append(\"--interpolation\")\n        regcmd.append(f\"{interp}\")\n\n    regcmd.append(\"--output\")\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\n\n    # write out the actual command-line entry for testing/validation later\n    command_file = os.path.join(os.getcwd(), \"command.txt\")\n    with open(command_file, \"wt\") as f:\n        f.write(\" \".join(regcmd))\n\n    try:\n        subprocess.check_output(regcmd)\n    except Exception as e:\n        msg = (\n            \"[!] ANTS registration did not complete successfully.\"\n            f\"\\n\\nError details:\\n{e}\\n{e.output}\\n\"\n        )\n        raise RuntimeError(msg)\n\n    warp_list = []\n    warped_image = None\n\n    files = [f for f in os.listdir(\".\") if os.path.isfile(f)]\n\n    for f in files:\n        if (\"transform\" in f) and (\"Warped\" not in f):\n            warp_list.append(os.getcwd() + \"/\" + f)\n        if \"Warped\" in f:\n            warped_image = os.getcwd() + \"/\" + f\n\n    if not warped_image:\n        msg = (\n            \"\\n\\n[!] No registration output file found. ANTS registration may not have\"\n            \" completed successfully.\\n\\n\"\n        )\n        raise RuntimeError(msg)\n\n    return warp_list, warped_image\n",
              "moving_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "moving_skull": "[Undefined]",
              "reference_skull": "[Undefined]",
              "ants_para": "[Undefined]",
              "moving_mask": "[Undefined]",
              "reference_mask": "[Undefined]",
              "fixed_image_mask": "[Undefined]",
              "interp": "[Undefined]",
              "reg_with_skull": "[Undefined]"
            },
            "outputs": {
              "warp_list": "[Undefined]",
              "warped_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_forward_initial",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    \"\"\"Select the warp from the warp list.\"\"\"\n    selected_warp = None\n    for warp in warp_list:\n        if selection == \"Warp\":\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\n                selected_warp = warp\n        elif selection in warp:\n            selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Initial"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_forward_rigid",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    \"\"\"Select the warp from the warp list.\"\"\"\n    selected_warp = None\n    for warp in warp_list:\n        if selection == \"Warp\":\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\n                selected_warp = warp\n        elif selection in warp:\n            selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Rigid"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_forward_affine",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    \"\"\"Select the warp from the warp list.\"\"\"\n    selected_warp = None\n    for warp in warp_list:\n        if selection == \"Warp\":\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\n                selected_warp = warp\n        elif selection in warp:\n            selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Affine"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_forward_warp",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    \"\"\"Select the warp from the warp list.\"\"\"\n    selected_warp = None\n    for warp in warp_list:\n        if selection == \"Warp\":\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\n                selected_warp = warp\n        elif selection in warp:\n            selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Warp"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_inverse_warp",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    \"\"\"Select the warp from the warp list.\"\"\"\n    selected_warp = None\n    for warp in warp_list:\n        if selection == \"Warp\":\n            if \"3Warp\" in warp or \"2Warp\" in warp or \"1Warp\" in warp:\n                selected_warp = warp\n        elif selection in warp:\n            selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Inverse"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "ants_initial_xfm": "[Undefined]",
              "ants_rigid_xfm": "[Undefined]",
              "ants_affine_xfm": "[Undefined]",
              "warp_field": "[Undefined]",
              "inverse_warp_field": "[Undefined]",
              "composite_transform": "[Undefined]",
              "wait": "[Undefined]",
              "normalized_output_brain": "[Undefined]"
            },
            "outputs": {
              "ants_initial_xfm": "[Undefined]",
              "ants_rigid_xfm": "[Undefined]",
              "ants_affine_xfm": "[Undefined]",
              "warp_field": "[Undefined]",
              "inverse_warp_field": "[Undefined]",
              "composite_transform": "[Undefined]",
              "wait": "[Undefined]",
              "normalized_output_brain": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "calc_ants_warp"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_forward_initial"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_forward_rigid"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_forward_affine"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_forward_warp"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_inverse_warp"
          },
          {
            "origin": "calc_ants_warp",
            "target": "outputspec"
          },
          {
            "origin": "select_forward_initial",
            "target": "outputspec"
          },
          {
            "origin": "select_forward_rigid",
            "target": "outputspec"
          },
          {
            "origin": "select_forward_affine",
            "target": "outputspec"
          },
          {
            "origin": "select_forward_warp",
            "target": "outputspec"
          },
          {
            "origin": "select_inverse_warp",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "json_space-template_desc-preproc_T1w_48",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-preproc_T1w_48",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-T1w_to-template_mode-image_xfm_49",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "from-T1w_to-template_mode-image_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-T1w_to-template_mode-image_xfm_49",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-T1w_to-template_mode-image_xfm_49",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-T1w_to-template_mode-image_xfm_49",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-template_to-T1w_mode-image_xfm_50",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "from-template_to-T1w_mode-image_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-template_to-T1w_mode-image_xfm_50",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-template_to-T1w_mode-image_xfm_50",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-template_to-T1w_mode-image_xfm_50",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-T1w_to-template_mode-image_desc-linear_xfm_51",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "from-T1w_to-template_mode-image_desc-linear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-T1w_to-template_mode-image_desc-linear_xfm_51",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-T1w_to-template_mode-image_desc-linear_xfm_51",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-T1w_to-template_mode-image_desc-linear_xfm_51",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-template_to-T1w_mode-image_desc-linear_xfm_52",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "from-template_to-T1w_mode-image_desc-linear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-template_to-T1w_mode-image_desc-linear_xfm_52",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-template_to-T1w_mode-image_desc-linear_xfm_52",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-template_to-T1w_mode-image_desc-linear_xfm_52",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "from-T1w_to-template_mode-image_desc-nonlinear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "from-template_to-T1w_mode-image_desc-nonlinear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-head_T1w_58",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_desc-head_T1w",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-head_T1w_58",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_desc-head_T1w_58",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-head_T1w_58",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-brain_mask_62",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_desc-brain_mask",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-brain_mask_62",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_desc-brain_mask_62",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-brain_mask_62",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-CSF_probseg_69",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "label-CSF_probseg",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-CSF_probseg_69",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-CSF_probseg_69",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-CSF_probseg_69",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-GM_probseg_70",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "label-GM_probseg",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-GM_probseg_70",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-GM_probseg_70",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-GM_probseg_70",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-WM_probseg_71",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "label-WM_probseg",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-WM_probseg_71",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-WM_probseg_71",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-WM_probseg_71",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-CSF_mask_72",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "label-CSF_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-CSF_mask_72",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-CSF_mask_72",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-CSF_mask_72",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-GM_mask_73",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "label-GM_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-GM_mask_73",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-GM_mask_73",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-GM_mask_73",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-WM_mask_74",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "label-WM_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-WM_mask_74",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-WM_mask_74",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-WM_mask_74",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-CSF_desc-preproc_mask_75",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "label-CSF_desc-preproc_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-CSF_desc-preproc_mask_75",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-CSF_desc-preproc_mask_75",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-CSF_desc-preproc_mask_75",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-GM_desc-preproc_mask_76",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "label-GM_desc-preproc_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-GM_desc-preproc_mask_76",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-GM_desc-preproc_mask_76",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-GM_desc-preproc_mask_76",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-WM_desc-preproc_mask_77",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "label-WM_desc-preproc_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-WM_desc-preproc_mask_77",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-WM_desc-preproc_mask_77",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-WM_desc-preproc_mask_77",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-preproc_bold_189",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "desc-preproc_bold",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-preproc_bold_189",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-preproc_bold_189",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-preproc_bold_189",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-movementParameters_motion_92",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "desc-movementParameters_motion",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-movementParameters_motion_92",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-movementParameters_motion_92",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-movementParameters_motion_92",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-mean_bold_99",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "desc-mean_bold",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-mean_bold_99",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-mean_bold_99",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-mean_bold_99",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-bold_desc-brain_mask_109",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-bold_desc-brain_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-bold_desc-brain_mask_109",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-bold_desc-brain_mask_109",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-bold_desc-brain_mask_109",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_motion_129",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "motion",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_motion_129",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_motion_129",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_motion_129",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-summary_motion_130",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "desc-summary_motion",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-summary_motion_130",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-summary_motion_130",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-summary_motion_130",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_sbref_131",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "sbref",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_sbref_131",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_sbref_131",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_sbref_131",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-T1w_sbref_139",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-T1w_sbref",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-T1w_sbref_139",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-T1w_sbref_139",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-T1w_sbref_139",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-bold_to-T1w_mode-image_desc-linear_xfm_140",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "from-bold_to-T1w_mode-image_desc-linear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-bold_to-T1w_mode-image_desc-linear_xfm_140",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-bold_to-T1w_mode-image_desc-linear_xfm_140",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-bold_to-T1w_mode-image_desc-linear_xfm_140",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-bold_to-template_mode-image_xfm_147",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "from-bold_to-template_mode-image_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-bold_to-template_mode-image_xfm_147",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-bold_to-template_mode-image_xfm_147",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-bold_to-template_mode-image_xfm_147",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-template_to-bold_mode-image_xfm_148",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "from-template_to-bold_mode-image_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-template_to-bold_mode-image_xfm_148",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "write_composite_inv_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-template_to-bold_mode-image_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "LanczosWindowedSinc",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[True, False]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-template_to-bold_mode-image_xfm_148",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-template_to-bold_mode-image_xfm_148",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-T1w_desc-eroded_mask_151",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-T1w_desc-eroded_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-T1w_desc-eroded_mask_151",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-T1w_desc-eroded_mask_151",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-T1w_desc-eroded_mask_151",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-CSF_desc-eroded_mask_154",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "label-CSF_desc-eroded_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-CSF_desc-eroded_mask_154",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-CSF_desc-eroded_mask_154",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-CSF_desc-eroded_mask_154",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-WM_desc-eroded_mask_157",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "label-WM_desc-eroded_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-WM_desc-eroded_mask_157",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-WM_desc-eroded_mask_157",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-WM_desc-eroded_mask_157",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_reg-parameter_desc-confounds-1_timeseries_241",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "reg-parameter_desc-confounds-1_timeseries",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_reg-parameter_desc-confounds-1_timeseries_241",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_reg-parameter_desc-confounds-1_timeseries_241",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_reg-parameter_desc-confounds-1_timeseries_241",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_reg-aCompCor_desc-confounds-2_timeseries_248",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "reg-aCompCor_desc-confounds-2_timeseries",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_reg-aCompCor_desc-confounds-2_timeseries_248",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_reg-aCompCor_desc-confounds-2_timeseries_248",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_reg-aCompCor_desc-confounds-2_timeseries_248",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-head_bold_202",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_desc-head_bold",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-head_bold_202",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_desc-head_bold_202",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-head_bold_202",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-preproc-1_bold_238",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-preproc-1_bold",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-preproc-1_bold_238",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-preproc-1_bold_238",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-preproc-1_bold_238",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-preproc-2_bold_245",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-preproc-2_bold",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-preproc-2_bold_245",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-preproc-2_bold_245",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-preproc-2_bold_245",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-bold_mask_205",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_desc-bold_mask",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-bold_mask_205",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_desc-bold_mask_205",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-bold_mask_205",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_res-derivative_desc-bold_mask_207",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_res-derivative_desc-bold_mask",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired functional derivative resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_res-derivative_desc-bold_mask_207",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_res-derivative_desc-bold_mask_207",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_res-derivative_desc-bold_mask_207",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_sbref_211",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_sbref",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_sbref_211",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_sbref_211",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_sbref_211",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-Mean-1_timeseries_256",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-Mean-1_timeseries",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-Mean-1_timeseries_256",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-Mean-1_timeseries_256",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-Mean-1_timeseries_256",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-Mean-2_timeseries_260",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-Mean-2_timeseries",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-Mean-2_timeseries_260",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-Mean-2_timeseries_260",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-Mean-2_timeseries_260",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-PearsonNilearn-1_correlations",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-PartialNilearn-1_correlations",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-PartialNilearn-2_correlations",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-1_alff_272",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-1_alff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-1_alff_272",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-1_alff_272",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-1_alff_272",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-2_alff_281",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-2_alff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-2_alff_281",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-2_alff_281",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-2_alff_281",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-sm-1_alff_273",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-sm-1_alff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-sm-1_alff_273",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-sm-1_alff_273",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-sm-1_alff_273",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-sm-2_alff_282",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-sm-2_alff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-sm-2_alff_282",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-sm-2_alff_282",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-sm-2_alff_282",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-zstd-1_alff_275",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-zstd-1_alff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-zstd-1_alff_275",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-zstd-1_alff_275",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-zstd-1_alff_275",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-zstd-2_alff_284",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-zstd-2_alff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-zstd-2_alff_284",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-zstd-2_alff_284",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-zstd-2_alff_284",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-sm-zstd-1_alff_276",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-sm-zstd-1_alff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-sm-zstd-1_alff_276",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-sm-zstd-1_alff_276",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-sm-zstd-1_alff_276",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-sm-zstd-2_alff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-1_falff_277",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-1_falff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-1_falff_277",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-1_falff_277",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-1_falff_277",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-2_falff_286",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-2_falff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-2_falff_286",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-2_falff_286",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-2_falff_286",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-sm-1_falff_278",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-sm-1_falff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-sm-1_falff_278",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-sm-1_falff_278",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-sm-1_falff_278",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-sm-2_falff_287",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-sm-2_falff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-sm-2_falff_287",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-sm-2_falff_287",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-sm-2_falff_287",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-zstd-1_falff_279",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-zstd-1_falff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-zstd-1_falff_279",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-zstd-1_falff_279",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-zstd-1_falff_279",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-zstd-2_falff_288",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-zstd-2_falff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-zstd-2_falff_288",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-zstd-2_falff_288",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-zstd-2_falff_288",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-sm-zstd-1_falff_280",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-sm-zstd-1_falff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-sm-zstd-1_falff_280",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-sm-zstd-1_falff_280",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-sm-zstd-1_falff_280",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-sm-zstd-2_falff",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-1_reho_294",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-1_reho",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-1_reho_294",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-1_reho_294",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-1_reho_294",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-2_reho_299",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-2_reho",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-2_reho_299",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-2_reho_299",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-2_reho_299",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-sm-1_reho_295",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-sm-1_reho",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-sm-1_reho_295",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-sm-1_reho_295",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-sm-1_reho_295",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-sm-2_reho_300",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-sm-2_reho",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-sm-2_reho_300",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-sm-2_reho_300",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-sm-2_reho_300",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-zstd-1_reho_297",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-zstd-1_reho",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-zstd-1_reho_297",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-zstd-1_reho_297",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-zstd-1_reho_297",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-zstd-2_reho_302",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-zstd-2_reho",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-zstd-2_reho_302",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-zstd-2_reho_302",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-zstd-2_reho_302",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-sm-zstd-1_reho_298",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-sm-zstd-1_reho",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-sm-zstd-1_reho_298",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-sm-zstd-1_reho_298",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-sm-zstd-1_reho_298",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-sm-zstd-2_reho",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based whole-head template - /usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-1_dcb_310",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-1_dcb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-1_dcb_310",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-1_dcb_310",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-1_dcb_310",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-2_dcb_323",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-2_dcb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-2_dcb_323",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-2_dcb_323",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-2_dcb_323",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-sm-1_dcb_311",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-sm-1_dcb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-sm-1_dcb_311",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-sm-1_dcb_311",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-sm-1_dcb_311",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-sm-2_dcb_324",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-sm-2_dcb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-sm-2_dcb_324",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-sm-2_dcb_324",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-sm-2_dcb_324",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-zstd-1_dcb_313",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-zstd-1_dcb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-zstd-1_dcb_313",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-zstd-1_dcb_313",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-zstd-1_dcb_313",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-zstd-2_dcb_326",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-zstd-2_dcb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-zstd-2_dcb_326",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-zstd-2_dcb_326",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-zstd-2_dcb_326",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-sm-zstd-1_dcb_314",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-sm-zstd-1_dcb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-sm-zstd-1_dcb_314",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-sm-zstd-1_dcb_314",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-sm-zstd-1_dcb_314",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-sm-zstd-2_dcb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-1_lfcdb_315",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-1_lfcdb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-1_lfcdb_315",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-1_lfcdb_315",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-1_lfcdb_315",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-2_lfcdb_328",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-2_lfcdb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-2_lfcdb_328",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-2_lfcdb_328",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-2_lfcdb_328",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-sm-1_lfcdb_316",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-sm-1_lfcdb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-sm-1_lfcdb_316",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-sm-1_lfcdb_316",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-sm-1_lfcdb_316",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdb_329",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-sm-2_lfcdb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-sm-2_lfcdb_329",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-sm-2_lfcdb_329",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-sm-2_lfcdb_329",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-zstd-1_lfcdb_317",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-zstd-1_lfcdb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-zstd-1_lfcdb_317",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-zstd-1_lfcdb_317",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-zstd-1_lfcdb_317",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-zstd-2_lfcdb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-sm-zstd-1_lfcdb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-1_lfcdw_319",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-1_lfcdw",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-1_lfcdw_319",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-1_lfcdw_319",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-1_lfcdw_319",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-2_lfcdw_332",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-2_lfcdw",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-2_lfcdw_332",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-2_lfcdw_332",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-2_lfcdw_332",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-sm-1_lfcdw_320",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-sm-1_lfcdw",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-sm-1_lfcdw_320",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-sm-1_lfcdw_320",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-sm-1_lfcdw_320",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdw_333",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-sm-2_lfcdw",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-sm-2_lfcdw_333",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-sm-2_lfcdw_333",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-sm-2_lfcdw_333",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-zstd-1_lfcdw_321",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-zstd-1_lfcdw",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-zstd-1_lfcdw_321",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-zstd-1_lfcdw_321",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-zstd-1_lfcdw_321",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-zstd-2_lfcdw",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-parameter_desc-sm-zstd-1_lfcdw",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(\n    cfg,\n    unique_id,\n    resource,\n    scan_id=None,\n    template_desc=None,\n    atlas_id=None,\n    fwhm=None,\n    subdir=None,\n    extension=None,\n):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, res_in_filename\n\n    if atlas_id:\n        if \"_desc-\" in atlas_id:\n            atlas, desc = atlas_id.split(\"_desc-\")\n            if not re.match(r\".*[0-9]$\", atlas) and re.match(r\"[a-z].*\", desc):\n                atlas_id = f\"{atlas}{desc[0].upper()}{desc[1:]}\"\n            else:\n                atlas_id = atlas_id.replace(\"_desc-\", \"\")\n        resource = f\"atlas-{atlas_id}_{resource}\"\n\n    part_id = unique_id.split(\"_\")[0]\n    ses_id = unique_id.split(\"_\")[1]\n    if \"sub-\" not in part_id:\n        part_id = f\"sub-{part_id}\"\n    if \"ses-\" not in ses_id:\n        ses_id = f\"ses-{ses_id}\"\n    if scan_id:\n        out_filename = f\"{part_id}_{ses_id}_task-{scan_id}_{resource}\"\n    else:\n        out_filename = f\"{part_id}_{ses_id}_{resource}\"\n\n    template_tag = template_desc.split(\" -\")[0] if template_desc else \"*\"\n    for prefix in [\"space-\", \"from-\", \"to-\"]:\n        for bidstag in out_filename.split(\"_\"):\n            if prefix in bidstag and \"template\" in bidstag:\n                out_filename = out_filename.replace(bidstag, f\"{prefix}{template_tag}\")\n\n    if fwhm:\n        for tag in resource.split(\"_\"):\n            if \"desc-\" in tag and \"-sm\" in tag:\n                newtag = tag.replace(\"-sm\", f\"-sm{fwhm}\")\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            msg = \"\\n[!] FWHM provided but no desc-sm?\\n\"\n            raise Exception(msg)\n\n    if extension is not None:\n        out_filename = out_filename + \".\" + str(extension)\n\n    # drop space- entities from from native-space filenames\n    if subdir == \"anat\":\n        out_filename = out_filename.replace(\"_space-T1w_\", \"_\")\n    if subdir == \"func\":\n        out_filename = out_filename.replace(\"_space-bold_\", \"_\")\n    return combine_multiple_entity_instances(res_in_filename(cfg, out_filename))\n",
          "cfg": "[C-PAC config]",
          "unique_id": "sub-PA001_ses-V1W1",
          "resource": "space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin6ASym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func",
          "extension": "[Undefined]"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    \"\"\"Write a dictionary to a JSON file.\"\"\"\n    if not basedir:\n        basedir = os.getcwd()\n    if \".gii\" in filename:\n        filename = os.path.splitext(filename)[0]\n        filename = f\"{filename}.json\"\n    if \".json\" not in filename:\n        filename = f\"{filename}.json\"\n\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, \"wt\") as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "[Truncated]",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/bshresth/projects/niwrap/rbc-runs/output/output",
          "container": "pipeline_RBCv0/sub-PA001/ses-V1W1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      }
    ],
    "edges": [
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "bold_scan_params_sub-PA001_ses-V1W1"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "func_deoblique_2"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_desc-preproc_bold_189"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_desc-movementParameters_motion_92"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_desc-mean_bold_99"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-bold_desc-brain_mask_109"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_motion_129"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_desc-summary_motion_130"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_sbref_131"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-T1w_sbref_139"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_from-bold_to-T1w_mode-image_desc-linear_xfm_140"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_from-bold_to-template_mode-image_xfm_147"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_from-template_to-bold_mode-image_xfm_148"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_reg-parameter_desc-confounds-1_timeseries_241"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_reg-aCompCor_desc-confounds-2_timeseries_248"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_desc-head_bold_202"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-preproc-1_bold_238"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-preproc-2_bold_245"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_desc-bold_mask_205"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_res-derivative_desc-bold_mask_207"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_sbref_211"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-Mean-1_timeseries_256"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-Mean-2_timeseries_260"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-1_alff_272"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-2_alff_281"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-sm-1_alff_273"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-2_alff_282"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-zstd-1_alff_275"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-zstd-2_alff_284"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-sm-zstd-1_alff_276"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-1_falff_277"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-2_falff_286"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-sm-1_falff_278"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-2_falff_287"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-zstd-1_falff_279"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-zstd-2_falff_288"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-sm-zstd-1_falff_280"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-1_reho_294"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-2_reho_299"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-sm-1_reho_295"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-2_reho_300"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-zstd-1_reho_297"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-zstd-2_reho_302"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-sm-zstd-1_reho_298"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-1_dcb_310"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-2_dcb_323"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-sm-1_dcb_311"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-2_dcb_324"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-zstd-1_dcb_313"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-zstd-2_dcb_326"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-sm-zstd-1_dcb_314"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-1_lfcdb_315"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-2_lfcdb_328"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-sm-1_lfcdb_316"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdb_329"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-zstd-1_lfcdb_317"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-1_lfcdw_319"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-2_lfcdw_332"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-sm-1_lfcdw_320"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdw_333"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-zstd-1_lfcdw_321"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322"
      },
      {
        "origin": "func_ingress_sub-PA001_ses-V1W1",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335"
      },
      {
        "origin": "bold_scan_params_sub-PA001_ses-V1W1",
        "target": "func_slice_timing_correction_94"
      },
      {
        "origin": "bold_scan_params_sub-PA001_ses-V1W1",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "bold_scan_params_sub-PA001_ses-V1W1",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "bold_scan_params_sub-PA001_ses-V1W1",
        "target": "filtering_bold_and_regressors_space-template_reg-36_parameter_218"
      },
      {
        "origin": "bold_scan_params_sub-PA001_ses-V1W1",
        "target": "filtering_bold_and_regressors_space-template_res-derivative_reg-36_parameter_218"
      },
      {
        "origin": "bold_scan_params_sub-PA001_ses-V1W1",
        "target": "filtering_bold_and_regressors_space-template_reg-aCompCor_228"
      },
      {
        "origin": "bold_scan_params_sub-PA001_ses-V1W1",
        "target": "filtering_bold_and_regressors_space-template_res-derivative_reg-aCompCor_228"
      },
      {
        "origin": "anat_T1w_gather_sub-PA001_ses-V1W1",
        "target": "anat_deoblique_0"
      },
      {
        "origin": "anat_deoblique_0",
        "target": "anat_reorient_0"
      },
      {
        "origin": "anat_reorient_0",
        "target": "anat_skullstrip_ants"
      },
      {
        "origin": "anat_reorient_0",
        "target": "brain_extraction_36"
      },
      {
        "origin": "anat_reorient_0",
        "target": "ANTS_T1_to_template_42"
      },
      {
        "origin": "anat_reorient_0",
        "target": "warp_wholehead_T1w_to_T1template_55"
      },
      {
        "origin": "anat_reorient_0",
        "target": "nii_desc-head_T1w_41"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "brain_extraction_36"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "ANTS_T1_to_template_42"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "warp_T1mask_to_T1template_59"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "CSF_63"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "GM_63"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "WM_63"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "erode_T1w_mask_149"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "erode_CSF_mask_152"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "erode_WM_mask_155"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "nii_space-T1w_desc-brain_mask_34"
      },
      {
        "origin": "brain_extraction_36",
        "target": "ANTS_T1_to_template_42"
      },
      {
        "origin": "brain_extraction_36",
        "target": "segment_63"
      },
      {
        "origin": "brain_extraction_36",
        "target": "CSF_63"
      },
      {
        "origin": "brain_extraction_36",
        "target": "GM_63"
      },
      {
        "origin": "brain_extraction_36",
        "target": "WM_63"
      },
      {
        "origin": "brain_extraction_36",
        "target": "func_to_anat_FLIRT_132"
      },
      {
        "origin": "brain_extraction_36",
        "target": "func_to_anat_bbreg_132"
      },
      {
        "origin": "brain_extraction_36",
        "target": "create_func_to_T1wtemplate_xfm_141"
      },
      {
        "origin": "brain_extraction_36",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "brain_extraction_36",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "brain_extraction_36",
        "target": "convert_bbr2itk_190"
      },
      {
        "origin": "brain_extraction_36",
        "target": "nii_desc-preproc_T1w_39"
      },
      {
        "origin": "resampled_T1w-brain-template",
        "target": "ANTS_T1_to_template_42"
      },
      {
        "origin": "resampled_T1w-template",
        "target": "ANTS_T1_to_template_42"
      },
      {
        "origin": "resampled_T1w-template",
        "target": "warp_wholehead_T1w_to_T1template_55"
      },
      {
        "origin": "resampled_T1w-template",
        "target": "warp_T1mask_to_T1template_59"
      },
      {
        "origin": "resampled_T1w-brain-template-mask",
        "target": "ANTS_T1_to_template_42"
      },
      {
        "origin": "warp_wholehead_T1w_to_T1template_55",
        "target": "nii_space-template_desc-head_T1w_58"
      },
      {
        "origin": "write_composite_xfm",
        "target": "warp_wholehead_T1w_to_T1template_55"
      },
      {
        "origin": "write_composite_xfm",
        "target": "warp_T1mask_to_T1template_59"
      },
      {
        "origin": "write_composite_xfm",
        "target": "create_func_to_T1wtemplate_xfm_141"
      },
      {
        "origin": "write_composite_xfm",
        "target": "collectxfm_func_to_standard_190_"
      },
      {
        "origin": "write_composite_xfm",
        "target": "collectxfm_func_mask_to_standard_190"
      },
      {
        "origin": "write_composite_xfm",
        "target": "collectxfm_deriv_mask_to_standard_190"
      },
      {
        "origin": "write_composite_xfm",
        "target": "nii_from-T1w_to-template_mode-image_xfm_49"
      },
      {
        "origin": "warp_T1mask_to_T1template_59",
        "target": "nii_space-template_desc-brain_mask_62"
      },
      {
        "origin": "segment_63",
        "target": "get_pve_csf_63"
      },
      {
        "origin": "segment_63",
        "target": "get_pve_gm_63"
      },
      {
        "origin": "segment_63",
        "target": "get_pve_wm_63"
      },
      {
        "origin": "segment_63",
        "target": "CSF_63"
      },
      {
        "origin": "segment_63",
        "target": "GM_63"
      },
      {
        "origin": "segment_63",
        "target": "WM_63"
      },
      {
        "origin": "segment_63",
        "target": "get_csf_63"
      },
      {
        "origin": "segment_63",
        "target": "nii_label-GM_probseg_70"
      },
      {
        "origin": "segment_63",
        "target": "nii_label-WM_probseg_71"
      },
      {
        "origin": "segment_63",
        "target": "nii_label-CSF_mask_72"
      },
      {
        "origin": "segment_63",
        "target": "nii_label-GM_mask_73"
      },
      {
        "origin": "segment_63",
        "target": "nii_label-WM_mask_74"
      },
      {
        "origin": "get_pve_wm_63",
        "target": "func_to_anat_bbreg_132"
      },
      {
        "origin": "CSF_63",
        "target": "erode_T1w_mask_149"
      },
      {
        "origin": "CSF_63",
        "target": "erode_CSF_mask_152"
      },
      {
        "origin": "CSF_63",
        "target": "nii_label-CSF_desc-preproc_mask_75"
      },
      {
        "origin": "GM_63",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "GM_63",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "GM_63",
        "target": "nii_label-GM_desc-preproc_mask_76"
      },
      {
        "origin": "WM_63",
        "target": "erode_WM_mask_155"
      },
      {
        "origin": "WM_63",
        "target": "nii_label-WM_desc-preproc_mask_77"
      },
      {
        "origin": "get_csf_63",
        "target": "nii_label-CSF_probseg_69"
      },
      {
        "origin": "func_deoblique_2",
        "target": "func_reorient_2"
      },
      {
        "origin": "func_reorient_2",
        "target": "edit_func_81"
      },
      {
        "origin": "func_reorient_2",
        "target": "func_get_fmriprep_ref_84"
      },
      {
        "origin": "edit_func_81",
        "target": "func_motion_correct_mcflirt_87"
      },
      {
        "origin": "edit_func_81",
        "target": "func_slice_timing_correction_94"
      },
      {
        "origin": "func_get_fmriprep_ref_84",
        "target": "func_motion_correct_mcflirt_87"
      },
      {
        "origin": "func_get_fmriprep_ref_84",
        "target": "func_motion_correct_mcflirt_100"
      },
      {
        "origin": "func_get_fmriprep_ref_84",
        "target": "init_aff_104"
      },
      {
        "origin": "func_get_fmriprep_ref_84",
        "target": "map_brainmask_104"
      },
      {
        "origin": "func_get_fmriprep_ref_84",
        "target": "norm_104"
      },
      {
        "origin": "func_get_fmriprep_ref_84",
        "target": "set_direction_104"
      },
      {
        "origin": "func_get_fmriprep_ref_84",
        "target": "n4_correct_104"
      },
      {
        "origin": "func_get_fmriprep_ref_84",
        "target": "convert_motionxfm2itk_190_"
      },
      {
        "origin": "func_motion_correct_mcflirt_87",
        "target": "norm_motion_params_87"
      },
      {
        "origin": "func_motion_correct_mcflirt_87",
        "target": "get_mcflirt_rms_abs_87"
      },
      {
        "origin": "func_motion_correct_mcflirt_87",
        "target": "gen_motion_stats_115"
      },
      {
        "origin": "func_motion_correct_mcflirt_87",
        "target": "convert_motionxfm2itk_190_"
      },
      {
        "origin": "norm_motion_params_87",
        "target": "gen_motion_stats_115"
      },
      {
        "origin": "norm_motion_params_87",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "norm_motion_params_87",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "norm_motion_params_87",
        "target": "nii_desc-movementParameters_motion_92"
      },
      {
        "origin": "get_mcflirt_rms_abs_87",
        "target": "gen_motion_stats_115"
      },
      {
        "origin": "func_slice_timing_correction_94",
        "target": "func_mean_97"
      },
      {
        "origin": "func_slice_timing_correction_94",
        "target": "func_motion_correct_mcflirt_100"
      },
      {
        "origin": "func_slice_timing_correction_94",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "func_slice_timing_correction_94",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "func_slice_timing_correction_94",
        "target": "split_func_190"
      },
      {
        "origin": "func_mean_97",
        "target": "nii_desc-mean_bold_99"
      },
      {
        "origin": "func_motion_correct_mcflirt_100",
        "target": "norm_motion_params_100"
      },
      {
        "origin": "func_motion_correct_mcflirt_100",
        "target": "get_mcflirt_rms_abs_100"
      },
      {
        "origin": "func_motion_correct_mcflirt_100",
        "target": "func_extract_brain_111"
      },
      {
        "origin": "resampled_FSL-AFNI-bold-ref",
        "target": "init_aff_104"
      },
      {
        "origin": "resampled_FSL-AFNI-bold-ref",
        "target": "norm_104"
      },
      {
        "origin": "init_aff_104",
        "target": "norm_104"
      },
      {
        "origin": "resampled_FSL-AFNI-brain-mask",
        "target": "init_aff_104"
      },
      {
        "origin": "resampled_FSL-AFNI-brain-mask",
        "target": "align_template_mask_to_template_data_space-template_reg-36_parameter_218"
      },
      {
        "origin": "resampled_FSL-AFNI-brain-mask",
        "target": "align_template_mask_to_template_data_space-template_res-derivative_reg-36_parameter_218"
      },
      {
        "origin": "resampled_FSL-AFNI-brain-mask",
        "target": "align_template_mask_to_template_data_space-template_reg-aCompCor_228"
      },
      {
        "origin": "resampled_FSL-AFNI-brain-mask",
        "target": "align_template_mask_to_template_data_space-template_res-derivative_reg-aCompCor_228"
      },
      {
        "origin": "norm_104",
        "target": "map_brainmask_104"
      },
      {
        "origin": "resampled_FSL-AFNI-brain-probseg",
        "target": "map_brainmask_104"
      },
      {
        "origin": "map_brainmask_104",
        "target": "binarize_mask_104"
      },
      {
        "origin": "binarize_mask_104",
        "target": "pre_mask_dilate_104"
      },
      {
        "origin": "pre_mask_dilate_104",
        "target": "print_header_104"
      },
      {
        "origin": "print_header_104",
        "target": "set_direction_104"
      },
      {
        "origin": "set_direction_104",
        "target": "n4_correct_104"
      },
      {
        "origin": "n4_correct_104",
        "target": "skullstrip_first_pass_104"
      },
      {
        "origin": "skullstrip_first_pass_104",
        "target": "skullstrip_first_dilate_104"
      },
      {
        "origin": "skullstrip_first_pass_104",
        "target": "skullstrip_first_mask_104"
      },
      {
        "origin": "skullstrip_first_pass_104",
        "target": "combine_masks_104"
      },
      {
        "origin": "skullstrip_first_dilate_104",
        "target": "skullstrip_first_mask_104"
      },
      {
        "origin": "skullstrip_first_mask_104",
        "target": "unifize_104"
      },
      {
        "origin": "unifize_104",
        "target": "skullstrip_second_pass_104"
      },
      {
        "origin": "unifize_104",
        "target": "extract_ref_brain_bold_104"
      },
      {
        "origin": "skullstrip_second_pass_104",
        "target": "combine_masks_104"
      },
      {
        "origin": "combine_masks_104",
        "target": "extract_ref_brain_bold_104"
      },
      {
        "origin": "combine_masks_104",
        "target": "func_extract_brain_111"
      },
      {
        "origin": "combine_masks_104",
        "target": "gen_motion_stats_115"
      },
      {
        "origin": "combine_masks_104",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "combine_masks_104",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "combine_masks_104",
        "target": "applyxfm_func_mask_to_standard_190"
      },
      {
        "origin": "combine_masks_104",
        "target": "applyxfm_deriv_mask_to_standard_190"
      },
      {
        "origin": "combine_masks_104",
        "target": "nii_space-bold_desc-brain_mask_109"
      },
      {
        "origin": "extract_ref_brain_bold_104",
        "target": "func_to_anat_FLIRT_132"
      },
      {
        "origin": "extract_ref_brain_bold_104",
        "target": "func_to_anat_bbreg_132"
      },
      {
        "origin": "extract_ref_brain_bold_104",
        "target": "create_func_to_T1wtemplate_xfm_141"
      },
      {
        "origin": "extract_ref_brain_bold_104",
        "target": "convert_bbr2itk_190"
      },
      {
        "origin": "extract_ref_brain_bold_104",
        "target": "warp_funcreg-sbref_to_T1wtemplate_208"
      },
      {
        "origin": "extract_ref_brain_bold_104",
        "target": "nii_sbref_131"
      },
      {
        "origin": "func_extract_brain_111",
        "target": "gen_motion_stats_115"
      },
      {
        "origin": "func_extract_brain_111",
        "target": "nii_desc-preproc_bold_189"
      },
      {
        "origin": "gen_motion_stats_115",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "gen_motion_stats_115",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "gen_motion_stats_115",
        "target": "nuisance_regression_space-template_reg-36_parameter_218"
      },
      {
        "origin": "gen_motion_stats_115",
        "target": "nuisance_regression_space-template_res-derivative_reg-36_parameter_218"
      },
      {
        "origin": "gen_motion_stats_115",
        "target": "nuisance_regression_space-template_reg-aCompCor_228"
      },
      {
        "origin": "gen_motion_stats_115",
        "target": "nuisance_regression_space-template_res-derivative_reg-aCompCor_228"
      },
      {
        "origin": "gen_motion_stats_115",
        "target": "nii_motion_129"
      },
      {
        "origin": "gen_motion_stats_115",
        "target": "nii_desc-summary_motion_130"
      },
      {
        "origin": "func_to_anat_FLIRT_132",
        "target": "func_to_anat_bbreg_132"
      },
      {
        "origin": "func_to_anat_bbreg_132",
        "target": "create_func_to_T1wtemplate_xfm_141"
      },
      {
        "origin": "func_to_anat_bbreg_132",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "func_to_anat_bbreg_132",
        "target": "anat_to_func_linear_xfm_36_parameter_158"
      },
      {
        "origin": "func_to_anat_bbreg_132",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "func_to_anat_bbreg_132",
        "target": "anat_to_func_linear_xfm_aCompCor_158"
      },
      {
        "origin": "func_to_anat_bbreg_132",
        "target": "convert_bbr2itk_190"
      },
      {
        "origin": "func_to_anat_bbreg_132",
        "target": "nii_space-T1w_sbref_139"
      },
      {
        "origin": "func_to_anat_bbreg_132",
        "target": "nii_from-bold_to-T1w_mode-image_desc-linear_xfm_140"
      },
      {
        "origin": "resampled_T1w-brain-template-funcreg",
        "target": "create_func_to_T1wtemplate_xfm_141"
      },
      {
        "origin": "resampled_T1w-brain-template-funcreg",
        "target": "applyxfm_func_to_standard_190_"
      },
      {
        "origin": "resampled_T1w-brain-template-funcreg",
        "target": "applyxfm_func_mask_to_standard_190"
      },
      {
        "origin": "resampled_T1w-brain-template-funcreg",
        "target": "warp_funcreg-sbref_to_T1wtemplate_208"
      },
      {
        "origin": "write_composite_inv_xfm",
        "target": "create_func_to_T1wtemplate_xfm_141"
      },
      {
        "origin": "write_composite_inv_xfm",
        "target": "nii_from-template_to-T1w_mode-image_xfm_50"
      },
      {
        "origin": "erode_T1w_mask_149",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "erode_T1w_mask_149",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "erode_T1w_mask_149",
        "target": "nii_space-T1w_desc-eroded_mask_151"
      },
      {
        "origin": "erode_CSF_mask_152",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "erode_CSF_mask_152",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "erode_CSF_mask_152",
        "target": "nii_label-CSF_desc-eroded_mask_154"
      },
      {
        "origin": "erode_WM_mask_155",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "erode_WM_mask_155",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "erode_WM_mask_155",
        "target": "nii_label-WM_desc-eroded_mask_157"
      },
      {
        "origin": "nuisance_regressors_36_parameter_158",
        "target": "nuisance_regression_space-template_reg-36_parameter_218"
      },
      {
        "origin": "nuisance_regressors_36_parameter_158",
        "target": "filtering_bold_and_regressors_space-template_reg-36_parameter_218"
      },
      {
        "origin": "nuisance_regressors_36_parameter_158",
        "target": "nuisance_regression_space-template_res-derivative_reg-36_parameter_218"
      },
      {
        "origin": "nuisance_regressors_36_parameter_158",
        "target": "filtering_bold_and_regressors_space-template_res-derivative_reg-36_parameter_218"
      },
      {
        "origin": "anat_to_func_linear_xfm_36_parameter_158",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "write_composite_invlinear_xfm",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "write_composite_invlinear_xfm",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "write_composite_invlinear_xfm",
        "target": "nii_from-template_to-T1w_mode-image_desc-linear_xfm_52"
      },
      {
        "origin": "write_composite_linear_xfm",
        "target": "nuisance_regressors_36_parameter_158"
      },
      {
        "origin": "write_composite_linear_xfm",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "write_composite_linear_xfm",
        "target": "nii_from-T1w_to-template_mode-image_desc-linear_xfm_51"
      },
      {
        "origin": "nuisance_regressors_aCompCor_158",
        "target": "nuisance_regression_space-template_reg-aCompCor_228"
      },
      {
        "origin": "nuisance_regressors_aCompCor_158",
        "target": "filtering_bold_and_regressors_space-template_reg-aCompCor_228"
      },
      {
        "origin": "nuisance_regressors_aCompCor_158",
        "target": "nuisance_regression_space-template_res-derivative_reg-aCompCor_228"
      },
      {
        "origin": "nuisance_regressors_aCompCor_158",
        "target": "filtering_bold_and_regressors_space-template_res-derivative_reg-aCompCor_228"
      },
      {
        "origin": "anat_to_func_linear_xfm_aCompCor_158",
        "target": "nuisance_regressors_aCompCor_158"
      },
      {
        "origin": "convert_bbr2itk_190",
        "target": "collectxfm_func_to_standard_190_"
      },
      {
        "origin": "convert_bbr2itk_190",
        "target": "collectxfm_func_mask_to_standard_190"
      },
      {
        "origin": "convert_bbr2itk_190",
        "target": "collectxfm_deriv_mask_to_standard_190"
      },
      {
        "origin": "split_func_190",
        "target": "applyxfm_func_to_standard_190_"
      },
      {
        "origin": "split_func_190",
        "target": "applyxfm_derivfunc_to_standard_190_"
      },
      {
        "origin": "convert_motionxfm2itk_190_",
        "target": "collectxfm_func_to_standard_190_"
      },
      {
        "origin": "collectxfm_func_to_standard_190_",
        "target": "applyxfm_func_to_standard_190_"
      },
      {
        "origin": "collectxfm_func_to_standard_190_",
        "target": "applyxfm_derivfunc_to_standard_190_"
      },
      {
        "origin": "applyxfm_func_to_standard_190_",
        "target": "merge_func_to_standard_190"
      },
      {
        "origin": "applyxfm_derivfunc_to_standard_190_",
        "target": "merge_derivfunc_to_standard_190"
      },
      {
        "origin": "resampled_T1w-brain-template-deriv",
        "target": "applyxfm_derivfunc_to_standard_190_"
      },
      {
        "origin": "resampled_T1w-brain-template-deriv",
        "target": "applyxfm_deriv_mask_to_standard_190"
      },
      {
        "origin": "merge_func_to_standard_190",
        "target": "get_func_brain_to_standard_190"
      },
      {
        "origin": "merge_func_to_standard_190",
        "target": "nii_space-template_desc-head_bold_202"
      },
      {
        "origin": "merge_derivfunc_to_standard_190",
        "target": "func_deriv_despiked_template_212"
      },
      {
        "origin": "applyxfm_func_mask_to_standard_190",
        "target": "get_func_brain_to_standard_190"
      },
      {
        "origin": "applyxfm_func_mask_to_standard_190",
        "target": "nii_space-template_desc-bold_mask_205"
      },
      {
        "origin": "collectxfm_func_mask_to_standard_190",
        "target": "applyxfm_func_mask_to_standard_190"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "alff_falff_264"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_alff_smooth_AFNI_264"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_alff_zstd_264"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_desc-sm_alff_zstd_264"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_falff_smooth_AFNI_264"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_falff_zstd_264"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_desc-sm_falff_zstd_264"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "alff_falff_268"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_alff_smooth_AFNI_268"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_alff_zstd_268"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_desc-sm_alff_zstd_268"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_falff_smooth_AFNI_268"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_falff_zstd_268"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_desc-sm_falff_zstd_268"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "reho_290"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_reho_smooth_AFNI_290"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_reho_zstd_290"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_desc-sm_reho_zstd_290"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "reho_292"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_reho_smooth_AFNI_292"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_reho_zstd_292"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "space-template_desc-sm_reho_zstd_292"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_190",
        "target": "nii_space-template_res-derivative_desc-bold_mask_207"
      },
      {
        "origin": "collectxfm_deriv_mask_to_standard_190",
        "target": "applyxfm_deriv_mask_to_standard_190"
      },
      {
        "origin": "get_func_brain_to_standard_190",
        "target": "func_despiked_template_212"
      },
      {
        "origin": "warp_funcreg-sbref_to_T1wtemplate_208",
        "target": "nii_space-template_sbref_211"
      },
      {
        "origin": "write_composite_xfm",
        "target": "warp_funcreg-sbref_to_T1wtemplate_208"
      },
      {
        "origin": "write_composite_xfm",
        "target": "nii_from-bold_to-template_mode-image_xfm_147"
      },
      {
        "origin": "func_despiked_template_212",
        "target": "align_template_mask_to_template_data_space-template_reg-36_parameter_218"
      },
      {
        "origin": "func_despiked_template_212",
        "target": "nuisance_regression_space-template_reg-36_parameter_218"
      },
      {
        "origin": "func_despiked_template_212",
        "target": "align_template_mask_to_template_data_space-template_reg-aCompCor_228"
      },
      {
        "origin": "func_despiked_template_212",
        "target": "nuisance_regression_space-template_reg-aCompCor_228"
      },
      {
        "origin": "func_deriv_despiked_template_212",
        "target": "align_template_mask_to_template_data_space-template_res-derivative_reg-36_parameter_218"
      },
      {
        "origin": "func_deriv_despiked_template_212",
        "target": "nuisance_regression_space-template_res-derivative_reg-36_parameter_218"
      },
      {
        "origin": "func_deriv_despiked_template_212",
        "target": "align_template_mask_to_template_data_space-template_res-derivative_reg-aCompCor_228"
      },
      {
        "origin": "func_deriv_despiked_template_212",
        "target": "nuisance_regression_space-template_res-derivative_reg-aCompCor_228"
      },
      {
        "origin": "align_template_mask_to_template_data_space-template_reg-36_parameter_218",
        "target": "nuisance_regression_space-template_reg-36_parameter_218"
      },
      {
        "origin": "align_template_mask_to_template_data_space-template_reg-36_parameter_218",
        "target": "filtering_bold_and_regressors_space-template_reg-36_parameter_218"
      },
      {
        "origin": "nuisance_regression_space-template_reg-36_parameter_218",
        "target": "filtering_bold_and_regressors_space-template_reg-36_parameter_218"
      },
      {
        "origin": "filtering_bold_and_regressors_space-template_reg-36_parameter_218",
        "target": "resample_functional_roi_252"
      },
      {
        "origin": "filtering_bold_and_regressors_space-template_reg-36_parameter_218",
        "target": "resample_functional_to_template_304"
      },
      {
        "origin": "filtering_bold_and_regressors_space-template_reg-36_parameter_218",
        "target": "nii_space-template_reg-parameter_desc-preproc-1_bold_238"
      },
      {
        "origin": "align_template_mask_to_template_data_space-template_res-derivative_reg-36_parameter_218",
        "target": "nuisance_regression_space-template_res-derivative_reg-36_parameter_218"
      },
      {
        "origin": "align_template_mask_to_template_data_space-template_res-derivative_reg-36_parameter_218",
        "target": "filtering_bold_and_regressors_space-template_res-derivative_reg-36_parameter_218"
      },
      {
        "origin": "nuisance_regression_space-template_res-derivative_reg-36_parameter_218",
        "target": "filtering_bold_and_regressors_space-template_res-derivative_reg-36_parameter_218"
      },
      {
        "origin": "nuisance_regression_space-template_res-derivative_reg-36_parameter_218",
        "target": "alff_falff_264"
      },
      {
        "origin": "filtering_bold_and_regressors_space-template_res-derivative_reg-36_parameter_218",
        "target": "reho_290"
      },
      {
        "origin": "filtering_bold_and_regressors_space-template_res-derivative_reg-36_parameter_218",
        "target": "nii_reg-parameter_desc-confounds-1_timeseries_241"
      },
      {
        "origin": "align_template_mask_to_template_data_space-template_reg-aCompCor_228",
        "target": "nuisance_regression_space-template_reg-aCompCor_228"
      },
      {
        "origin": "align_template_mask_to_template_data_space-template_reg-aCompCor_228",
        "target": "filtering_bold_and_regressors_space-template_reg-aCompCor_228"
      },
      {
        "origin": "nuisance_regression_space-template_reg-aCompCor_228",
        "target": "filtering_bold_and_regressors_space-template_reg-aCompCor_228"
      },
      {
        "origin": "filtering_bold_and_regressors_space-template_reg-aCompCor_228",
        "target": "resample_functional_roi_254"
      },
      {
        "origin": "filtering_bold_and_regressors_space-template_reg-aCompCor_228",
        "target": "resample_functional_to_template_307"
      },
      {
        "origin": "filtering_bold_and_regressors_space-template_reg-aCompCor_228",
        "target": "nii_space-template_reg-aCompCor_desc-preproc-2_bold_245"
      },
      {
        "origin": "align_template_mask_to_template_data_space-template_res-derivative_reg-aCompCor_228",
        "target": "nuisance_regression_space-template_res-derivative_reg-aCompCor_228"
      },
      {
        "origin": "align_template_mask_to_template_data_space-template_res-derivative_reg-aCompCor_228",
        "target": "filtering_bold_and_regressors_space-template_res-derivative_reg-aCompCor_228"
      },
      {
        "origin": "nuisance_regression_space-template_res-derivative_reg-aCompCor_228",
        "target": "filtering_bold_and_regressors_space-template_res-derivative_reg-aCompCor_228"
      },
      {
        "origin": "nuisance_regression_space-template_res-derivative_reg-aCompCor_228",
        "target": "alff_falff_268"
      },
      {
        "origin": "filtering_bold_and_regressors_space-template_res-derivative_reg-aCompCor_228",
        "target": "reho_292"
      },
      {
        "origin": "filtering_bold_and_regressors_space-template_res-derivative_reg-aCompCor_228",
        "target": "nii_reg-aCompCor_desc-confounds-2_timeseries_248"
      },
      {
        "origin": "resample_functional_roi_252",
        "target": "roi_timeseries_252"
      },
      {
        "origin": "resample_functional_roi_252",
        "target": "connectomeNilearnPearson_252"
      },
      {
        "origin": "resample_functional_roi_252",
        "target": "connectomeNilearnPartial_252"
      },
      {
        "origin": "roi_dataflow_252",
        "target": "resample_functional_roi_252"
      },
      {
        "origin": "roi_dataflow_252",
        "target": "connectomeNilearnPearson_252"
      },
      {
        "origin": "roi_dataflow_252",
        "target": "connectomeNilearnPartial_252"
      },
      {
        "origin": "roi_dataflow_252",
        "target": "id_string_space-template_reg-parameter_desc-Mean-1_timeseries_256"
      },
      {
        "origin": "roi_dataflow_252",
        "target": "id_string_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258"
      },
      {
        "origin": "roi_dataflow_252",
        "target": "id_string_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259"
      },
      {
        "origin": "roi_timeseries_252",
        "target": "nii_space-template_reg-parameter_desc-Mean-1_timeseries_256"
      },
      {
        "origin": "connectomeNilearnPearson_252",
        "target": "nii_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258"
      },
      {
        "origin": "connectomeNilearnPartial_252",
        "target": "nii_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259"
      },
      {
        "origin": "resample_functional_roi_254",
        "target": "roi_timeseries_254"
      },
      {
        "origin": "resample_functional_roi_254",
        "target": "connectomeNilearnPearson_254"
      },
      {
        "origin": "resample_functional_roi_254",
        "target": "connectomeNilearnPartial_254"
      },
      {
        "origin": "roi_dataflow_254",
        "target": "resample_functional_roi_254"
      },
      {
        "origin": "roi_dataflow_254",
        "target": "connectomeNilearnPearson_254"
      },
      {
        "origin": "roi_dataflow_254",
        "target": "connectomeNilearnPartial_254"
      },
      {
        "origin": "roi_dataflow_254",
        "target": "id_string_space-template_reg-aCompCor_desc-Mean-2_timeseries_260"
      },
      {
        "origin": "roi_dataflow_254",
        "target": "id_string_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262"
      },
      {
        "origin": "roi_dataflow_254",
        "target": "id_string_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263"
      },
      {
        "origin": "roi_timeseries_254",
        "target": "nii_space-template_reg-aCompCor_desc-Mean-2_timeseries_260"
      },
      {
        "origin": "connectomeNilearnPearson_254",
        "target": "nii_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262"
      },
      {
        "origin": "connectomeNilearnPartial_254",
        "target": "nii_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263"
      },
      {
        "origin": "alff_falff_264",
        "target": "space-template_alff_smooth_AFNI_264"
      },
      {
        "origin": "alff_falff_264",
        "target": "space-template_alff_zstd_264"
      },
      {
        "origin": "alff_falff_264",
        "target": "space-template_falff_smooth_AFNI_264"
      },
      {
        "origin": "alff_falff_264",
        "target": "space-template_falff_zstd_264"
      },
      {
        "origin": "alff_falff_264",
        "target": "nii_space-template_reg-parameter_desc-1_alff_272"
      },
      {
        "origin": "alff_falff_264",
        "target": "nii_space-template_reg-parameter_desc-1_falff_277"
      },
      {
        "origin": "space-template_alff_smooth_AFNI_264",
        "target": "space-template_desc-sm_alff_zstd_264"
      },
      {
        "origin": "space-template_alff_smooth_AFNI_264",
        "target": "nii_space-template_reg-parameter_desc-sm-1_alff_273"
      },
      {
        "origin": "space-template_alff_zstd_264",
        "target": "nii_space-template_reg-parameter_desc-zstd-1_alff_275"
      },
      {
        "origin": "space-template_desc-sm_alff_zstd_264",
        "target": "nii_space-template_reg-parameter_desc-sm-zstd-1_alff_276"
      },
      {
        "origin": "space-template_falff_smooth_AFNI_264",
        "target": "space-template_desc-sm_falff_zstd_264"
      },
      {
        "origin": "space-template_falff_smooth_AFNI_264",
        "target": "id_string_space-template_reg-parameter_desc-sm-1_alff_273"
      },
      {
        "origin": "space-template_falff_smooth_AFNI_264",
        "target": "id_string_space-template_reg-parameter_desc-sm-1_falff_278"
      },
      {
        "origin": "space-template_falff_smooth_AFNI_264",
        "target": "nii_space-template_reg-parameter_desc-sm-1_falff_278"
      },
      {
        "origin": "space-template_falff_zstd_264",
        "target": "nii_space-template_reg-parameter_desc-zstd-1_falff_279"
      },
      {
        "origin": "space-template_desc-sm_falff_zstd_264",
        "target": "nii_space-template_reg-parameter_desc-sm-zstd-1_falff_280"
      },
      {
        "origin": "alff_falff_268",
        "target": "space-template_alff_smooth_AFNI_268"
      },
      {
        "origin": "alff_falff_268",
        "target": "space-template_alff_zstd_268"
      },
      {
        "origin": "alff_falff_268",
        "target": "space-template_falff_smooth_AFNI_268"
      },
      {
        "origin": "alff_falff_268",
        "target": "space-template_falff_zstd_268"
      },
      {
        "origin": "alff_falff_268",
        "target": "nii_space-template_reg-aCompCor_desc-2_alff_281"
      },
      {
        "origin": "alff_falff_268",
        "target": "nii_space-template_reg-aCompCor_desc-2_falff_286"
      },
      {
        "origin": "space-template_alff_smooth_AFNI_268",
        "target": "space-template_desc-sm_alff_zstd_268"
      },
      {
        "origin": "space-template_alff_smooth_AFNI_268",
        "target": "nii_space-template_reg-aCompCor_desc-sm-2_alff_282"
      },
      {
        "origin": "space-template_alff_zstd_268",
        "target": "nii_space-template_reg-aCompCor_desc-zstd-2_alff_284"
      },
      {
        "origin": "space-template_desc-sm_alff_zstd_268",
        "target": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285"
      },
      {
        "origin": "space-template_falff_smooth_AFNI_268",
        "target": "space-template_desc-sm_falff_zstd_268"
      },
      {
        "origin": "space-template_falff_smooth_AFNI_268",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-2_alff_282"
      },
      {
        "origin": "space-template_falff_smooth_AFNI_268",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-2_falff_287"
      },
      {
        "origin": "space-template_falff_smooth_AFNI_268",
        "target": "nii_space-template_reg-aCompCor_desc-sm-2_falff_287"
      },
      {
        "origin": "space-template_falff_zstd_268",
        "target": "nii_space-template_reg-aCompCor_desc-zstd-2_falff_288"
      },
      {
        "origin": "space-template_desc-sm_falff_zstd_268",
        "target": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289"
      },
      {
        "origin": "reho_290",
        "target": "space-template_reho_smooth_AFNI_290"
      },
      {
        "origin": "reho_290",
        "target": "space-template_reho_zstd_290"
      },
      {
        "origin": "reho_290",
        "target": "nii_space-template_reg-parameter_desc-1_reho_294"
      },
      {
        "origin": "space-template_reho_smooth_AFNI_290",
        "target": "space-template_desc-sm_reho_zstd_290"
      },
      {
        "origin": "space-template_reho_smooth_AFNI_290",
        "target": "id_string_space-template_reg-parameter_desc-sm-1_reho_295"
      },
      {
        "origin": "space-template_reho_smooth_AFNI_290",
        "target": "nii_space-template_reg-parameter_desc-sm-1_reho_295"
      },
      {
        "origin": "space-template_reho_zstd_290",
        "target": "nii_space-template_reg-parameter_desc-zstd-1_reho_297"
      },
      {
        "origin": "space-template_desc-sm_reho_zstd_290",
        "target": "nii_space-template_reg-parameter_desc-sm-zstd-1_reho_298"
      },
      {
        "origin": "reho_292",
        "target": "space-template_reho_smooth_AFNI_292"
      },
      {
        "origin": "reho_292",
        "target": "space-template_reho_zstd_292"
      },
      {
        "origin": "reho_292",
        "target": "nii_space-template_reg-aCompCor_desc-2_reho_299"
      },
      {
        "origin": "space-template_reho_smooth_AFNI_292",
        "target": "space-template_desc-sm_reho_zstd_292"
      },
      {
        "origin": "space-template_reho_smooth_AFNI_292",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-2_reho_300"
      },
      {
        "origin": "space-template_reho_smooth_AFNI_292",
        "target": "nii_space-template_reg-aCompCor_desc-sm-2_reho_300"
      },
      {
        "origin": "space-template_reho_zstd_292",
        "target": "nii_space-template_reg-aCompCor_desc-zstd-2_reho_302"
      },
      {
        "origin": "space-template_desc-sm_reho_zstd_292",
        "target": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303"
      },
      {
        "origin": "resample_functional_to_template_304",
        "target": "afni_centrality_degree_centrality_304"
      },
      {
        "origin": "resample_functional_to_template_304",
        "target": "afni_centrality_local_functional_connectivity_density_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "resample_functional_to_template_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "afni_centrality_degree_centrality_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "afni_centrality_local_functional_connectivity_density_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_dcb_smooth_AFNI_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_dcb_zstd_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_desc-sm_dcb_zstd_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_lfcdb_smooth_AFNI_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_lfcdb_zstd_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_desc-sm_lfcdb_zstd_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_lfcdw_smooth_AFNI_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_lfcdw_zstd_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_desc-sm_lfcdw_zstd_304"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "resample_functional_to_template_307"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "afni_centrality_degree_centrality_307"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "afni_centrality_local_functional_connectivity_density_307"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_dcb_smooth_AFNI_307"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_dcb_zstd_307"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_desc-sm_dcb_zstd_307"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_lfcdb_smooth_AFNI_307"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_lfcdb_zstd_307"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_desc-sm_lfcdb_zstd_307"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_lfcdw_smooth_AFNI_307"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_lfcdw_zstd_307"
      },
      {
        "origin": "gather_template-specification-file",
        "target": "space-template_desc-sm_lfcdw_zstd_307"
      },
      {
        "origin": "afni_centrality_degree_centrality_304",
        "target": "centrality_merge_node_304"
      },
      {
        "origin": "centrality_merge_node_304",
        "target": "space-template_dcb_smooth_AFNI_304"
      },
      {
        "origin": "centrality_merge_node_304",
        "target": "space-template_dcb_zstd_304"
      },
      {
        "origin": "centrality_merge_node_304",
        "target": "space-template_lfcdb_smooth_AFNI_304"
      },
      {
        "origin": "centrality_merge_node_304",
        "target": "space-template_lfcdb_zstd_304"
      },
      {
        "origin": "centrality_merge_node_304",
        "target": "space-template_lfcdw_smooth_AFNI_304"
      },
      {
        "origin": "centrality_merge_node_304",
        "target": "space-template_lfcdw_zstd_304"
      },
      {
        "origin": "centrality_merge_node_304",
        "target": "nii_space-template_reg-parameter_desc-1_dcb_310"
      },
      {
        "origin": "centrality_merge_node_304",
        "target": "nii_space-template_reg-parameter_desc-1_lfcdb_315"
      },
      {
        "origin": "centrality_merge_node_304",
        "target": "nii_space-template_reg-parameter_desc-1_lfcdw_319"
      },
      {
        "origin": "afni_centrality_local_functional_connectivity_density_304",
        "target": "centrality_merge_node_304"
      },
      {
        "origin": "space-template_dcb_smooth_AFNI_304",
        "target": "space-template_desc-sm_dcb_zstd_304"
      },
      {
        "origin": "space-template_dcb_smooth_AFNI_304",
        "target": "nii_space-template_reg-parameter_desc-sm-1_dcb_311"
      },
      {
        "origin": "space-template_dcb_zstd_304",
        "target": "nii_space-template_reg-parameter_desc-zstd-1_dcb_313"
      },
      {
        "origin": "space-template_desc-sm_dcb_zstd_304",
        "target": "nii_space-template_reg-parameter_desc-sm-zstd-1_dcb_314"
      },
      {
        "origin": "space-template_lfcdb_smooth_AFNI_304",
        "target": "space-template_desc-sm_lfcdb_zstd_304"
      },
      {
        "origin": "space-template_lfcdb_smooth_AFNI_304",
        "target": "nii_space-template_reg-parameter_desc-sm-1_lfcdb_316"
      },
      {
        "origin": "space-template_lfcdb_zstd_304",
        "target": "nii_space-template_reg-parameter_desc-zstd-1_lfcdb_317"
      },
      {
        "origin": "space-template_desc-sm_lfcdb_zstd_304",
        "target": "nii_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318"
      },
      {
        "origin": "space-template_lfcdw_smooth_AFNI_304",
        "target": "space-template_desc-sm_lfcdw_zstd_304"
      },
      {
        "origin": "space-template_lfcdw_smooth_AFNI_304",
        "target": "id_string_space-template_reg-parameter_desc-sm-1_dcb_311"
      },
      {
        "origin": "space-template_lfcdw_smooth_AFNI_304",
        "target": "id_string_space-template_reg-parameter_desc-sm-1_lfcdb_316"
      },
      {
        "origin": "space-template_lfcdw_smooth_AFNI_304",
        "target": "id_string_space-template_reg-parameter_desc-sm-1_lfcdw_320"
      },
      {
        "origin": "space-template_lfcdw_smooth_AFNI_304",
        "target": "nii_space-template_reg-parameter_desc-sm-1_lfcdw_320"
      },
      {
        "origin": "space-template_lfcdw_zstd_304",
        "target": "nii_space-template_reg-parameter_desc-zstd-1_lfcdw_321"
      },
      {
        "origin": "space-template_desc-sm_lfcdw_zstd_304",
        "target": "nii_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322"
      },
      {
        "origin": "resample_functional_to_template_307",
        "target": "afni_centrality_degree_centrality_307"
      },
      {
        "origin": "resample_functional_to_template_307",
        "target": "afni_centrality_local_functional_connectivity_density_307"
      },
      {
        "origin": "afni_centrality_degree_centrality_307",
        "target": "centrality_merge_node_307"
      },
      {
        "origin": "centrality_merge_node_307",
        "target": "space-template_dcb_smooth_AFNI_307"
      },
      {
        "origin": "centrality_merge_node_307",
        "target": "space-template_dcb_zstd_307"
      },
      {
        "origin": "centrality_merge_node_307",
        "target": "space-template_lfcdb_smooth_AFNI_307"
      },
      {
        "origin": "centrality_merge_node_307",
        "target": "space-template_lfcdb_zstd_307"
      },
      {
        "origin": "centrality_merge_node_307",
        "target": "space-template_lfcdw_smooth_AFNI_307"
      },
      {
        "origin": "centrality_merge_node_307",
        "target": "space-template_lfcdw_zstd_307"
      },
      {
        "origin": "centrality_merge_node_307",
        "target": "nii_space-template_reg-aCompCor_desc-2_dcb_323"
      },
      {
        "origin": "centrality_merge_node_307",
        "target": "nii_space-template_reg-aCompCor_desc-2_lfcdb_328"
      },
      {
        "origin": "centrality_merge_node_307",
        "target": "nii_space-template_reg-aCompCor_desc-2_lfcdw_332"
      },
      {
        "origin": "afni_centrality_local_functional_connectivity_density_307",
        "target": "centrality_merge_node_307"
      },
      {
        "origin": "space-template_dcb_smooth_AFNI_307",
        "target": "space-template_desc-sm_dcb_zstd_307"
      },
      {
        "origin": "space-template_dcb_smooth_AFNI_307",
        "target": "nii_space-template_reg-aCompCor_desc-sm-2_dcb_324"
      },
      {
        "origin": "space-template_dcb_zstd_307",
        "target": "nii_space-template_reg-aCompCor_desc-zstd-2_dcb_326"
      },
      {
        "origin": "space-template_desc-sm_dcb_zstd_307",
        "target": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327"
      },
      {
        "origin": "space-template_lfcdb_smooth_AFNI_307",
        "target": "space-template_desc-sm_lfcdb_zstd_307"
      },
      {
        "origin": "space-template_lfcdb_smooth_AFNI_307",
        "target": "nii_space-template_reg-aCompCor_desc-sm-2_lfcdb_329"
      },
      {
        "origin": "space-template_lfcdb_zstd_307",
        "target": "nii_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330"
      },
      {
        "origin": "space-template_desc-sm_lfcdb_zstd_307",
        "target": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331"
      },
      {
        "origin": "space-template_lfcdw_smooth_AFNI_307",
        "target": "space-template_desc-sm_lfcdw_zstd_307"
      },
      {
        "origin": "space-template_lfcdw_smooth_AFNI_307",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-2_dcb_324"
      },
      {
        "origin": "space-template_lfcdw_smooth_AFNI_307",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdb_329"
      },
      {
        "origin": "space-template_lfcdw_smooth_AFNI_307",
        "target": "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdw_333"
      },
      {
        "origin": "space-template_lfcdw_smooth_AFNI_307",
        "target": "nii_space-template_reg-aCompCor_desc-sm-2_lfcdw_333"
      },
      {
        "origin": "space-template_lfcdw_zstd_307",
        "target": "nii_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334"
      },
      {
        "origin": "space-template_desc-sm_lfcdw_zstd_307",
        "target": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335"
      },
      {
        "origin": "id_string_desc-preproc_T1w_39",
        "target": "nii_desc-preproc_T1w_39"
      },
      {
        "origin": "id_string_desc-preproc_T1w_39",
        "target": "json_desc-preproc_T1w_39"
      },
      {
        "origin": "nii_desc-preproc_T1w_39",
        "target": "sinker_desc-preproc_T1w_39"
      },
      {
        "origin": "json_desc-preproc_T1w_39",
        "target": "sinker_desc-preproc_T1w_39"
      },
      {
        "origin": "id_string_desc-head_T1w_41",
        "target": "nii_desc-head_T1w_41"
      },
      {
        "origin": "id_string_desc-head_T1w_41",
        "target": "json_desc-head_T1w_41"
      },
      {
        "origin": "nii_desc-head_T1w_41",
        "target": "sinker_desc-head_T1w_41"
      },
      {
        "origin": "json_desc-head_T1w_41",
        "target": "sinker_desc-head_T1w_41"
      },
      {
        "origin": "id_string_space-T1w_desc-brain_mask_34",
        "target": "nii_space-T1w_desc-brain_mask_34"
      },
      {
        "origin": "id_string_space-T1w_desc-brain_mask_34",
        "target": "json_space-T1w_desc-brain_mask_34"
      },
      {
        "origin": "nii_space-T1w_desc-brain_mask_34",
        "target": "sinker_space-T1w_desc-brain_mask_34"
      },
      {
        "origin": "json_space-T1w_desc-brain_mask_34",
        "target": "sinker_space-T1w_desc-brain_mask_34"
      },
      {
        "origin": "id_string_space-template_desc-preproc_T1w_48",
        "target": "nii_space-template_desc-preproc_T1w_48"
      },
      {
        "origin": "id_string_space-template_desc-preproc_T1w_48",
        "target": "json_space-template_desc-preproc_T1w_48"
      },
      {
        "origin": "nii_space-template_desc-preproc_T1w_48",
        "target": "sinker_space-template_desc-preproc_T1w_48"
      },
      {
        "origin": "anat_mni_ants_register",
        "target": "nii_space-template_desc-preproc_T1w_48"
      },
      {
        "origin": "anat_mni_ants_register",
        "target": "nii_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53"
      },
      {
        "origin": "anat_mni_ants_register",
        "target": "nii_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54"
      },
      {
        "origin": "json_space-template_desc-preproc_T1w_48",
        "target": "sinker_space-template_desc-preproc_T1w_48"
      },
      {
        "origin": "id_string_from-T1w_to-template_mode-image_xfm_49",
        "target": "nii_from-T1w_to-template_mode-image_xfm_49"
      },
      {
        "origin": "id_string_from-T1w_to-template_mode-image_xfm_49",
        "target": "json_from-T1w_to-template_mode-image_xfm_49"
      },
      {
        "origin": "nii_from-T1w_to-template_mode-image_xfm_49",
        "target": "sinker_from-T1w_to-template_mode-image_xfm_49"
      },
      {
        "origin": "json_from-T1w_to-template_mode-image_xfm_49",
        "target": "sinker_from-T1w_to-template_mode-image_xfm_49"
      },
      {
        "origin": "id_string_from-template_to-T1w_mode-image_xfm_50",
        "target": "nii_from-template_to-T1w_mode-image_xfm_50"
      },
      {
        "origin": "id_string_from-template_to-T1w_mode-image_xfm_50",
        "target": "json_from-template_to-T1w_mode-image_xfm_50"
      },
      {
        "origin": "nii_from-template_to-T1w_mode-image_xfm_50",
        "target": "sinker_from-template_to-T1w_mode-image_xfm_50"
      },
      {
        "origin": "json_from-template_to-T1w_mode-image_xfm_50",
        "target": "sinker_from-template_to-T1w_mode-image_xfm_50"
      },
      {
        "origin": "id_string_from-T1w_to-template_mode-image_desc-linear_xfm_51",
        "target": "nii_from-T1w_to-template_mode-image_desc-linear_xfm_51"
      },
      {
        "origin": "id_string_from-T1w_to-template_mode-image_desc-linear_xfm_51",
        "target": "json_from-T1w_to-template_mode-image_desc-linear_xfm_51"
      },
      {
        "origin": "nii_from-T1w_to-template_mode-image_desc-linear_xfm_51",
        "target": "sinker_from-T1w_to-template_mode-image_desc-linear_xfm_51"
      },
      {
        "origin": "json_from-T1w_to-template_mode-image_desc-linear_xfm_51",
        "target": "sinker_from-T1w_to-template_mode-image_desc-linear_xfm_51"
      },
      {
        "origin": "id_string_from-template_to-T1w_mode-image_desc-linear_xfm_52",
        "target": "nii_from-template_to-T1w_mode-image_desc-linear_xfm_52"
      },
      {
        "origin": "id_string_from-template_to-T1w_mode-image_desc-linear_xfm_52",
        "target": "json_from-template_to-T1w_mode-image_desc-linear_xfm_52"
      },
      {
        "origin": "nii_from-template_to-T1w_mode-image_desc-linear_xfm_52",
        "target": "sinker_from-template_to-T1w_mode-image_desc-linear_xfm_52"
      },
      {
        "origin": "json_from-template_to-T1w_mode-image_desc-linear_xfm_52",
        "target": "sinker_from-template_to-T1w_mode-image_desc-linear_xfm_52"
      },
      {
        "origin": "id_string_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53",
        "target": "nii_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53"
      },
      {
        "origin": "id_string_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53",
        "target": "json_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53"
      },
      {
        "origin": "nii_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53",
        "target": "sinker_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53"
      },
      {
        "origin": "json_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53",
        "target": "sinker_from-T1w_to-template_mode-image_desc-nonlinear_xfm_53"
      },
      {
        "origin": "id_string_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54",
        "target": "nii_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54"
      },
      {
        "origin": "id_string_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54",
        "target": "json_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54"
      },
      {
        "origin": "nii_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54",
        "target": "sinker_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54"
      },
      {
        "origin": "json_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54",
        "target": "sinker_from-template_to-T1w_mode-image_desc-nonlinear_xfm_54"
      },
      {
        "origin": "id_string_space-template_desc-head_T1w_58",
        "target": "nii_space-template_desc-head_T1w_58"
      },
      {
        "origin": "id_string_space-template_desc-head_T1w_58",
        "target": "json_space-template_desc-head_T1w_58"
      },
      {
        "origin": "nii_space-template_desc-head_T1w_58",
        "target": "sinker_space-template_desc-head_T1w_58"
      },
      {
        "origin": "json_space-template_desc-head_T1w_58",
        "target": "sinker_space-template_desc-head_T1w_58"
      },
      {
        "origin": "id_string_space-template_desc-brain_mask_62",
        "target": "nii_space-template_desc-brain_mask_62"
      },
      {
        "origin": "id_string_space-template_desc-brain_mask_62",
        "target": "json_space-template_desc-brain_mask_62"
      },
      {
        "origin": "nii_space-template_desc-brain_mask_62",
        "target": "sinker_space-template_desc-brain_mask_62"
      },
      {
        "origin": "json_space-template_desc-brain_mask_62",
        "target": "sinker_space-template_desc-brain_mask_62"
      },
      {
        "origin": "id_string_label-CSF_probseg_69",
        "target": "nii_label-CSF_probseg_69"
      },
      {
        "origin": "id_string_label-CSF_probseg_69",
        "target": "json_label-CSF_probseg_69"
      },
      {
        "origin": "nii_label-CSF_probseg_69",
        "target": "sinker_label-CSF_probseg_69"
      },
      {
        "origin": "json_label-CSF_probseg_69",
        "target": "sinker_label-CSF_probseg_69"
      },
      {
        "origin": "id_string_label-GM_probseg_70",
        "target": "nii_label-GM_probseg_70"
      },
      {
        "origin": "id_string_label-GM_probseg_70",
        "target": "json_label-GM_probseg_70"
      },
      {
        "origin": "nii_label-GM_probseg_70",
        "target": "sinker_label-GM_probseg_70"
      },
      {
        "origin": "json_label-GM_probseg_70",
        "target": "sinker_label-GM_probseg_70"
      },
      {
        "origin": "id_string_label-WM_probseg_71",
        "target": "nii_label-WM_probseg_71"
      },
      {
        "origin": "id_string_label-WM_probseg_71",
        "target": "json_label-WM_probseg_71"
      },
      {
        "origin": "nii_label-WM_probseg_71",
        "target": "sinker_label-WM_probseg_71"
      },
      {
        "origin": "json_label-WM_probseg_71",
        "target": "sinker_label-WM_probseg_71"
      },
      {
        "origin": "id_string_label-CSF_mask_72",
        "target": "nii_label-CSF_mask_72"
      },
      {
        "origin": "id_string_label-CSF_mask_72",
        "target": "json_label-CSF_mask_72"
      },
      {
        "origin": "nii_label-CSF_mask_72",
        "target": "sinker_label-CSF_mask_72"
      },
      {
        "origin": "json_label-CSF_mask_72",
        "target": "sinker_label-CSF_mask_72"
      },
      {
        "origin": "id_string_label-GM_mask_73",
        "target": "nii_label-GM_mask_73"
      },
      {
        "origin": "id_string_label-GM_mask_73",
        "target": "json_label-GM_mask_73"
      },
      {
        "origin": "nii_label-GM_mask_73",
        "target": "sinker_label-GM_mask_73"
      },
      {
        "origin": "json_label-GM_mask_73",
        "target": "sinker_label-GM_mask_73"
      },
      {
        "origin": "id_string_label-WM_mask_74",
        "target": "nii_label-WM_mask_74"
      },
      {
        "origin": "id_string_label-WM_mask_74",
        "target": "json_label-WM_mask_74"
      },
      {
        "origin": "nii_label-WM_mask_74",
        "target": "sinker_label-WM_mask_74"
      },
      {
        "origin": "json_label-WM_mask_74",
        "target": "sinker_label-WM_mask_74"
      },
      {
        "origin": "id_string_label-CSF_desc-preproc_mask_75",
        "target": "nii_label-CSF_desc-preproc_mask_75"
      },
      {
        "origin": "id_string_label-CSF_desc-preproc_mask_75",
        "target": "json_label-CSF_desc-preproc_mask_75"
      },
      {
        "origin": "nii_label-CSF_desc-preproc_mask_75",
        "target": "sinker_label-CSF_desc-preproc_mask_75"
      },
      {
        "origin": "json_label-CSF_desc-preproc_mask_75",
        "target": "sinker_label-CSF_desc-preproc_mask_75"
      },
      {
        "origin": "id_string_label-GM_desc-preproc_mask_76",
        "target": "nii_label-GM_desc-preproc_mask_76"
      },
      {
        "origin": "id_string_label-GM_desc-preproc_mask_76",
        "target": "json_label-GM_desc-preproc_mask_76"
      },
      {
        "origin": "nii_label-GM_desc-preproc_mask_76",
        "target": "sinker_label-GM_desc-preproc_mask_76"
      },
      {
        "origin": "json_label-GM_desc-preproc_mask_76",
        "target": "sinker_label-GM_desc-preproc_mask_76"
      },
      {
        "origin": "id_string_label-WM_desc-preproc_mask_77",
        "target": "nii_label-WM_desc-preproc_mask_77"
      },
      {
        "origin": "id_string_label-WM_desc-preproc_mask_77",
        "target": "json_label-WM_desc-preproc_mask_77"
      },
      {
        "origin": "nii_label-WM_desc-preproc_mask_77",
        "target": "sinker_label-WM_desc-preproc_mask_77"
      },
      {
        "origin": "json_label-WM_desc-preproc_mask_77",
        "target": "sinker_label-WM_desc-preproc_mask_77"
      },
      {
        "origin": "id_string_desc-preproc_bold_189",
        "target": "nii_desc-preproc_bold_189"
      },
      {
        "origin": "id_string_desc-preproc_bold_189",
        "target": "json_desc-preproc_bold_189"
      },
      {
        "origin": "nii_desc-preproc_bold_189",
        "target": "sinker_desc-preproc_bold_189"
      },
      {
        "origin": "json_desc-preproc_bold_189",
        "target": "sinker_desc-preproc_bold_189"
      },
      {
        "origin": "id_string_desc-movementParameters_motion_92",
        "target": "nii_desc-movementParameters_motion_92"
      },
      {
        "origin": "id_string_desc-movementParameters_motion_92",
        "target": "json_desc-movementParameters_motion_92"
      },
      {
        "origin": "nii_desc-movementParameters_motion_92",
        "target": "sinker_desc-movementParameters_motion_92"
      },
      {
        "origin": "json_desc-movementParameters_motion_92",
        "target": "sinker_desc-movementParameters_motion_92"
      },
      {
        "origin": "id_string_desc-mean_bold_99",
        "target": "nii_desc-mean_bold_99"
      },
      {
        "origin": "id_string_desc-mean_bold_99",
        "target": "json_desc-mean_bold_99"
      },
      {
        "origin": "nii_desc-mean_bold_99",
        "target": "sinker_desc-mean_bold_99"
      },
      {
        "origin": "json_desc-mean_bold_99",
        "target": "sinker_desc-mean_bold_99"
      },
      {
        "origin": "id_string_space-bold_desc-brain_mask_109",
        "target": "nii_space-bold_desc-brain_mask_109"
      },
      {
        "origin": "id_string_space-bold_desc-brain_mask_109",
        "target": "json_space-bold_desc-brain_mask_109"
      },
      {
        "origin": "nii_space-bold_desc-brain_mask_109",
        "target": "sinker_space-bold_desc-brain_mask_109"
      },
      {
        "origin": "json_space-bold_desc-brain_mask_109",
        "target": "sinker_space-bold_desc-brain_mask_109"
      },
      {
        "origin": "id_string_motion_129",
        "target": "nii_motion_129"
      },
      {
        "origin": "id_string_motion_129",
        "target": "json_motion_129"
      },
      {
        "origin": "nii_motion_129",
        "target": "sinker_motion_129"
      },
      {
        "origin": "json_motion_129",
        "target": "sinker_motion_129"
      },
      {
        "origin": "id_string_desc-summary_motion_130",
        "target": "nii_desc-summary_motion_130"
      },
      {
        "origin": "id_string_desc-summary_motion_130",
        "target": "json_desc-summary_motion_130"
      },
      {
        "origin": "nii_desc-summary_motion_130",
        "target": "sinker_desc-summary_motion_130"
      },
      {
        "origin": "json_desc-summary_motion_130",
        "target": "sinker_desc-summary_motion_130"
      },
      {
        "origin": "id_string_sbref_131",
        "target": "nii_sbref_131"
      },
      {
        "origin": "id_string_sbref_131",
        "target": "json_sbref_131"
      },
      {
        "origin": "nii_sbref_131",
        "target": "sinker_sbref_131"
      },
      {
        "origin": "json_sbref_131",
        "target": "sinker_sbref_131"
      },
      {
        "origin": "id_string_space-T1w_sbref_139",
        "target": "nii_space-T1w_sbref_139"
      },
      {
        "origin": "id_string_space-T1w_sbref_139",
        "target": "json_space-T1w_sbref_139"
      },
      {
        "origin": "nii_space-T1w_sbref_139",
        "target": "sinker_space-T1w_sbref_139"
      },
      {
        "origin": "json_space-T1w_sbref_139",
        "target": "sinker_space-T1w_sbref_139"
      },
      {
        "origin": "id_string_from-bold_to-T1w_mode-image_desc-linear_xfm_140",
        "target": "nii_from-bold_to-T1w_mode-image_desc-linear_xfm_140"
      },
      {
        "origin": "id_string_from-bold_to-T1w_mode-image_desc-linear_xfm_140",
        "target": "json_from-bold_to-T1w_mode-image_desc-linear_xfm_140"
      },
      {
        "origin": "nii_from-bold_to-T1w_mode-image_desc-linear_xfm_140",
        "target": "sinker_from-bold_to-T1w_mode-image_desc-linear_xfm_140"
      },
      {
        "origin": "json_from-bold_to-T1w_mode-image_desc-linear_xfm_140",
        "target": "sinker_from-bold_to-T1w_mode-image_desc-linear_xfm_140"
      },
      {
        "origin": "id_string_from-bold_to-template_mode-image_xfm_147",
        "target": "nii_from-bold_to-template_mode-image_xfm_147"
      },
      {
        "origin": "id_string_from-bold_to-template_mode-image_xfm_147",
        "target": "json_from-bold_to-template_mode-image_xfm_147"
      },
      {
        "origin": "nii_from-bold_to-template_mode-image_xfm_147",
        "target": "sinker_from-bold_to-template_mode-image_xfm_147"
      },
      {
        "origin": "json_from-bold_to-template_mode-image_xfm_147",
        "target": "sinker_from-bold_to-template_mode-image_xfm_147"
      },
      {
        "origin": "id_string_from-template_to-bold_mode-image_xfm_148",
        "target": "nii_from-template_to-bold_mode-image_xfm_148"
      },
      {
        "origin": "id_string_from-template_to-bold_mode-image_xfm_148",
        "target": "json_from-template_to-bold_mode-image_xfm_148"
      },
      {
        "origin": "nii_from-template_to-bold_mode-image_xfm_148",
        "target": "sinker_from-template_to-bold_mode-image_xfm_148"
      },
      {
        "origin": "write_composite_inv_xfm",
        "target": "nii_from-template_to-bold_mode-image_xfm_148"
      },
      {
        "origin": "json_from-template_to-bold_mode-image_xfm_148",
        "target": "sinker_from-template_to-bold_mode-image_xfm_148"
      },
      {
        "origin": "id_string_space-T1w_desc-eroded_mask_151",
        "target": "nii_space-T1w_desc-eroded_mask_151"
      },
      {
        "origin": "id_string_space-T1w_desc-eroded_mask_151",
        "target": "json_space-T1w_desc-eroded_mask_151"
      },
      {
        "origin": "nii_space-T1w_desc-eroded_mask_151",
        "target": "sinker_space-T1w_desc-eroded_mask_151"
      },
      {
        "origin": "json_space-T1w_desc-eroded_mask_151",
        "target": "sinker_space-T1w_desc-eroded_mask_151"
      },
      {
        "origin": "id_string_label-CSF_desc-eroded_mask_154",
        "target": "nii_label-CSF_desc-eroded_mask_154"
      },
      {
        "origin": "id_string_label-CSF_desc-eroded_mask_154",
        "target": "json_label-CSF_desc-eroded_mask_154"
      },
      {
        "origin": "nii_label-CSF_desc-eroded_mask_154",
        "target": "sinker_label-CSF_desc-eroded_mask_154"
      },
      {
        "origin": "json_label-CSF_desc-eroded_mask_154",
        "target": "sinker_label-CSF_desc-eroded_mask_154"
      },
      {
        "origin": "id_string_label-WM_desc-eroded_mask_157",
        "target": "nii_label-WM_desc-eroded_mask_157"
      },
      {
        "origin": "id_string_label-WM_desc-eroded_mask_157",
        "target": "json_label-WM_desc-eroded_mask_157"
      },
      {
        "origin": "nii_label-WM_desc-eroded_mask_157",
        "target": "sinker_label-WM_desc-eroded_mask_157"
      },
      {
        "origin": "json_label-WM_desc-eroded_mask_157",
        "target": "sinker_label-WM_desc-eroded_mask_157"
      },
      {
        "origin": "id_string_reg-parameter_desc-confounds-1_timeseries_241",
        "target": "nii_reg-parameter_desc-confounds-1_timeseries_241"
      },
      {
        "origin": "id_string_reg-parameter_desc-confounds-1_timeseries_241",
        "target": "json_reg-parameter_desc-confounds-1_timeseries_241"
      },
      {
        "origin": "nii_reg-parameter_desc-confounds-1_timeseries_241",
        "target": "sinker_reg-parameter_desc-confounds-1_timeseries_241"
      },
      {
        "origin": "json_reg-parameter_desc-confounds-1_timeseries_241",
        "target": "sinker_reg-parameter_desc-confounds-1_timeseries_241"
      },
      {
        "origin": "id_string_reg-aCompCor_desc-confounds-2_timeseries_248",
        "target": "nii_reg-aCompCor_desc-confounds-2_timeseries_248"
      },
      {
        "origin": "id_string_reg-aCompCor_desc-confounds-2_timeseries_248",
        "target": "json_reg-aCompCor_desc-confounds-2_timeseries_248"
      },
      {
        "origin": "nii_reg-aCompCor_desc-confounds-2_timeseries_248",
        "target": "sinker_reg-aCompCor_desc-confounds-2_timeseries_248"
      },
      {
        "origin": "json_reg-aCompCor_desc-confounds-2_timeseries_248",
        "target": "sinker_reg-aCompCor_desc-confounds-2_timeseries_248"
      },
      {
        "origin": "id_string_space-template_desc-head_bold_202",
        "target": "nii_space-template_desc-head_bold_202"
      },
      {
        "origin": "id_string_space-template_desc-head_bold_202",
        "target": "json_space-template_desc-head_bold_202"
      },
      {
        "origin": "nii_space-template_desc-head_bold_202",
        "target": "sinker_space-template_desc-head_bold_202"
      },
      {
        "origin": "json_space-template_desc-head_bold_202",
        "target": "sinker_space-template_desc-head_bold_202"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-preproc-1_bold_238",
        "target": "nii_space-template_reg-parameter_desc-preproc-1_bold_238"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-preproc-1_bold_238",
        "target": "json_space-template_reg-parameter_desc-preproc-1_bold_238"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-preproc-1_bold_238",
        "target": "sinker_space-template_reg-parameter_desc-preproc-1_bold_238"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-preproc-1_bold_238",
        "target": "sinker_space-template_reg-parameter_desc-preproc-1_bold_238"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-preproc-2_bold_245",
        "target": "nii_space-template_reg-aCompCor_desc-preproc-2_bold_245"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-preproc-2_bold_245",
        "target": "json_space-template_reg-aCompCor_desc-preproc-2_bold_245"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-preproc-2_bold_245",
        "target": "sinker_space-template_reg-aCompCor_desc-preproc-2_bold_245"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-preproc-2_bold_245",
        "target": "sinker_space-template_reg-aCompCor_desc-preproc-2_bold_245"
      },
      {
        "origin": "id_string_space-template_desc-bold_mask_205",
        "target": "nii_space-template_desc-bold_mask_205"
      },
      {
        "origin": "id_string_space-template_desc-bold_mask_205",
        "target": "json_space-template_desc-bold_mask_205"
      },
      {
        "origin": "nii_space-template_desc-bold_mask_205",
        "target": "sinker_space-template_desc-bold_mask_205"
      },
      {
        "origin": "json_space-template_desc-bold_mask_205",
        "target": "sinker_space-template_desc-bold_mask_205"
      },
      {
        "origin": "id_string_space-template_res-derivative_desc-bold_mask_207",
        "target": "nii_space-template_res-derivative_desc-bold_mask_207"
      },
      {
        "origin": "id_string_space-template_res-derivative_desc-bold_mask_207",
        "target": "json_space-template_res-derivative_desc-bold_mask_207"
      },
      {
        "origin": "nii_space-template_res-derivative_desc-bold_mask_207",
        "target": "sinker_space-template_res-derivative_desc-bold_mask_207"
      },
      {
        "origin": "json_space-template_res-derivative_desc-bold_mask_207",
        "target": "sinker_space-template_res-derivative_desc-bold_mask_207"
      },
      {
        "origin": "id_string_space-template_sbref_211",
        "target": "nii_space-template_sbref_211"
      },
      {
        "origin": "id_string_space-template_sbref_211",
        "target": "json_space-template_sbref_211"
      },
      {
        "origin": "nii_space-template_sbref_211",
        "target": "sinker_space-template_sbref_211"
      },
      {
        "origin": "json_space-template_sbref_211",
        "target": "sinker_space-template_sbref_211"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-Mean-1_timeseries_256",
        "target": "nii_space-template_reg-parameter_desc-Mean-1_timeseries_256"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-Mean-1_timeseries_256",
        "target": "json_space-template_reg-parameter_desc-Mean-1_timeseries_256"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-Mean-1_timeseries_256",
        "target": "sinker_space-template_reg-parameter_desc-Mean-1_timeseries_256"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-Mean-1_timeseries_256",
        "target": "sinker_space-template_reg-parameter_desc-Mean-1_timeseries_256"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-Mean-2_timeseries_260",
        "target": "nii_space-template_reg-aCompCor_desc-Mean-2_timeseries_260"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-Mean-2_timeseries_260",
        "target": "json_space-template_reg-aCompCor_desc-Mean-2_timeseries_260"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-Mean-2_timeseries_260",
        "target": "sinker_space-template_reg-aCompCor_desc-Mean-2_timeseries_260"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-Mean-2_timeseries_260",
        "target": "sinker_space-template_reg-aCompCor_desc-Mean-2_timeseries_260"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258",
        "target": "nii_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258",
        "target": "json_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258",
        "target": "sinker_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258",
        "target": "sinker_space-template_reg-parameter_desc-PearsonNilearn-1_correlations_258"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262",
        "target": "nii_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262",
        "target": "json_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262",
        "target": "sinker_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262",
        "target": "sinker_space-template_reg-aCompCor_desc-PearsonNilearn-2_correlations_262"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259",
        "target": "nii_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259",
        "target": "json_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259",
        "target": "sinker_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259",
        "target": "sinker_space-template_reg-parameter_desc-PartialNilearn-1_correlations_259"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263",
        "target": "nii_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263",
        "target": "json_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263",
        "target": "sinker_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263",
        "target": "sinker_space-template_reg-aCompCor_desc-PartialNilearn-2_correlations_263"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-1_alff_272",
        "target": "nii_space-template_reg-parameter_desc-1_alff_272"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-1_alff_272",
        "target": "json_space-template_reg-parameter_desc-1_alff_272"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-1_alff_272",
        "target": "sinker_space-template_reg-parameter_desc-1_alff_272"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-1_alff_272",
        "target": "sinker_space-template_reg-parameter_desc-1_alff_272"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-2_alff_281",
        "target": "nii_space-template_reg-aCompCor_desc-2_alff_281"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-2_alff_281",
        "target": "json_space-template_reg-aCompCor_desc-2_alff_281"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-2_alff_281",
        "target": "sinker_space-template_reg-aCompCor_desc-2_alff_281"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-2_alff_281",
        "target": "sinker_space-template_reg-aCompCor_desc-2_alff_281"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-1_alff_273",
        "target": "nii_space-template_reg-parameter_desc-sm-1_alff_273"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-1_alff_273",
        "target": "json_space-template_reg-parameter_desc-sm-1_alff_273"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-sm-1_alff_273",
        "target": "sinker_space-template_reg-parameter_desc-sm-1_alff_273"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-sm-1_alff_273",
        "target": "sinker_space-template_reg-parameter_desc-sm-1_alff_273"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-2_alff_282",
        "target": "nii_space-template_reg-aCompCor_desc-sm-2_alff_282"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-2_alff_282",
        "target": "json_space-template_reg-aCompCor_desc-sm-2_alff_282"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-sm-2_alff_282",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-2_alff_282"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-sm-2_alff_282",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-2_alff_282"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-zstd-1_alff_275",
        "target": "nii_space-template_reg-parameter_desc-zstd-1_alff_275"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-zstd-1_alff_275",
        "target": "json_space-template_reg-parameter_desc-zstd-1_alff_275"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-zstd-1_alff_275",
        "target": "sinker_space-template_reg-parameter_desc-zstd-1_alff_275"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-zstd-1_alff_275",
        "target": "sinker_space-template_reg-parameter_desc-zstd-1_alff_275"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-zstd-2_alff_284",
        "target": "nii_space-template_reg-aCompCor_desc-zstd-2_alff_284"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-zstd-2_alff_284",
        "target": "json_space-template_reg-aCompCor_desc-zstd-2_alff_284"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-zstd-2_alff_284",
        "target": "sinker_space-template_reg-aCompCor_desc-zstd-2_alff_284"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-zstd-2_alff_284",
        "target": "sinker_space-template_reg-aCompCor_desc-zstd-2_alff_284"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-zstd-1_alff_276",
        "target": "nii_space-template_reg-parameter_desc-sm-zstd-1_alff_276"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-zstd-1_alff_276",
        "target": "json_space-template_reg-parameter_desc-sm-zstd-1_alff_276"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-sm-zstd-1_alff_276",
        "target": "sinker_space-template_reg-parameter_desc-sm-zstd-1_alff_276"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-sm-zstd-1_alff_276",
        "target": "sinker_space-template_reg-parameter_desc-sm-zstd-1_alff_276"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285",
        "target": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285",
        "target": "json_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_alff_285"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-1_falff_277",
        "target": "nii_space-template_reg-parameter_desc-1_falff_277"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-1_falff_277",
        "target": "json_space-template_reg-parameter_desc-1_falff_277"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-1_falff_277",
        "target": "sinker_space-template_reg-parameter_desc-1_falff_277"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-1_falff_277",
        "target": "sinker_space-template_reg-parameter_desc-1_falff_277"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-2_falff_286",
        "target": "nii_space-template_reg-aCompCor_desc-2_falff_286"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-2_falff_286",
        "target": "json_space-template_reg-aCompCor_desc-2_falff_286"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-2_falff_286",
        "target": "sinker_space-template_reg-aCompCor_desc-2_falff_286"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-2_falff_286",
        "target": "sinker_space-template_reg-aCompCor_desc-2_falff_286"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-1_falff_278",
        "target": "nii_space-template_reg-parameter_desc-sm-1_falff_278"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-1_falff_278",
        "target": "json_space-template_reg-parameter_desc-sm-1_falff_278"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-sm-1_falff_278",
        "target": "sinker_space-template_reg-parameter_desc-sm-1_falff_278"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-sm-1_falff_278",
        "target": "sinker_space-template_reg-parameter_desc-sm-1_falff_278"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-2_falff_287",
        "target": "nii_space-template_reg-aCompCor_desc-sm-2_falff_287"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-2_falff_287",
        "target": "json_space-template_reg-aCompCor_desc-sm-2_falff_287"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-sm-2_falff_287",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-2_falff_287"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-sm-2_falff_287",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-2_falff_287"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-zstd-1_falff_279",
        "target": "nii_space-template_reg-parameter_desc-zstd-1_falff_279"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-zstd-1_falff_279",
        "target": "json_space-template_reg-parameter_desc-zstd-1_falff_279"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-zstd-1_falff_279",
        "target": "sinker_space-template_reg-parameter_desc-zstd-1_falff_279"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-zstd-1_falff_279",
        "target": "sinker_space-template_reg-parameter_desc-zstd-1_falff_279"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-zstd-2_falff_288",
        "target": "nii_space-template_reg-aCompCor_desc-zstd-2_falff_288"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-zstd-2_falff_288",
        "target": "json_space-template_reg-aCompCor_desc-zstd-2_falff_288"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-zstd-2_falff_288",
        "target": "sinker_space-template_reg-aCompCor_desc-zstd-2_falff_288"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-zstd-2_falff_288",
        "target": "sinker_space-template_reg-aCompCor_desc-zstd-2_falff_288"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-zstd-1_falff_280",
        "target": "nii_space-template_reg-parameter_desc-sm-zstd-1_falff_280"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-zstd-1_falff_280",
        "target": "json_space-template_reg-parameter_desc-sm-zstd-1_falff_280"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-sm-zstd-1_falff_280",
        "target": "sinker_space-template_reg-parameter_desc-sm-zstd-1_falff_280"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-sm-zstd-1_falff_280",
        "target": "sinker_space-template_reg-parameter_desc-sm-zstd-1_falff_280"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289",
        "target": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289",
        "target": "json_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_falff_289"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-1_reho_294",
        "target": "nii_space-template_reg-parameter_desc-1_reho_294"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-1_reho_294",
        "target": "json_space-template_reg-parameter_desc-1_reho_294"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-1_reho_294",
        "target": "sinker_space-template_reg-parameter_desc-1_reho_294"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-1_reho_294",
        "target": "sinker_space-template_reg-parameter_desc-1_reho_294"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-2_reho_299",
        "target": "nii_space-template_reg-aCompCor_desc-2_reho_299"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-2_reho_299",
        "target": "json_space-template_reg-aCompCor_desc-2_reho_299"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-2_reho_299",
        "target": "sinker_space-template_reg-aCompCor_desc-2_reho_299"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-2_reho_299",
        "target": "sinker_space-template_reg-aCompCor_desc-2_reho_299"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-1_reho_295",
        "target": "nii_space-template_reg-parameter_desc-sm-1_reho_295"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-1_reho_295",
        "target": "json_space-template_reg-parameter_desc-sm-1_reho_295"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-sm-1_reho_295",
        "target": "sinker_space-template_reg-parameter_desc-sm-1_reho_295"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-sm-1_reho_295",
        "target": "sinker_space-template_reg-parameter_desc-sm-1_reho_295"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-2_reho_300",
        "target": "nii_space-template_reg-aCompCor_desc-sm-2_reho_300"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-2_reho_300",
        "target": "json_space-template_reg-aCompCor_desc-sm-2_reho_300"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-sm-2_reho_300",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-2_reho_300"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-sm-2_reho_300",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-2_reho_300"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-zstd-1_reho_297",
        "target": "nii_space-template_reg-parameter_desc-zstd-1_reho_297"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-zstd-1_reho_297",
        "target": "json_space-template_reg-parameter_desc-zstd-1_reho_297"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-zstd-1_reho_297",
        "target": "sinker_space-template_reg-parameter_desc-zstd-1_reho_297"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-zstd-1_reho_297",
        "target": "sinker_space-template_reg-parameter_desc-zstd-1_reho_297"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-zstd-2_reho_302",
        "target": "nii_space-template_reg-aCompCor_desc-zstd-2_reho_302"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-zstd-2_reho_302",
        "target": "json_space-template_reg-aCompCor_desc-zstd-2_reho_302"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-zstd-2_reho_302",
        "target": "sinker_space-template_reg-aCompCor_desc-zstd-2_reho_302"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-zstd-2_reho_302",
        "target": "sinker_space-template_reg-aCompCor_desc-zstd-2_reho_302"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-zstd-1_reho_298",
        "target": "nii_space-template_reg-parameter_desc-sm-zstd-1_reho_298"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-zstd-1_reho_298",
        "target": "json_space-template_reg-parameter_desc-sm-zstd-1_reho_298"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-sm-zstd-1_reho_298",
        "target": "sinker_space-template_reg-parameter_desc-sm-zstd-1_reho_298"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-sm-zstd-1_reho_298",
        "target": "sinker_space-template_reg-parameter_desc-sm-zstd-1_reho_298"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303",
        "target": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303",
        "target": "json_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_reho_303"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-1_dcb_310",
        "target": "nii_space-template_reg-parameter_desc-1_dcb_310"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-1_dcb_310",
        "target": "json_space-template_reg-parameter_desc-1_dcb_310"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-1_dcb_310",
        "target": "sinker_space-template_reg-parameter_desc-1_dcb_310"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-1_dcb_310",
        "target": "sinker_space-template_reg-parameter_desc-1_dcb_310"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-2_dcb_323",
        "target": "nii_space-template_reg-aCompCor_desc-2_dcb_323"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-2_dcb_323",
        "target": "json_space-template_reg-aCompCor_desc-2_dcb_323"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-2_dcb_323",
        "target": "sinker_space-template_reg-aCompCor_desc-2_dcb_323"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-2_dcb_323",
        "target": "sinker_space-template_reg-aCompCor_desc-2_dcb_323"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-1_dcb_311",
        "target": "nii_space-template_reg-parameter_desc-sm-1_dcb_311"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-1_dcb_311",
        "target": "json_space-template_reg-parameter_desc-sm-1_dcb_311"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-sm-1_dcb_311",
        "target": "sinker_space-template_reg-parameter_desc-sm-1_dcb_311"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-sm-1_dcb_311",
        "target": "sinker_space-template_reg-parameter_desc-sm-1_dcb_311"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-2_dcb_324",
        "target": "nii_space-template_reg-aCompCor_desc-sm-2_dcb_324"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-2_dcb_324",
        "target": "json_space-template_reg-aCompCor_desc-sm-2_dcb_324"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-sm-2_dcb_324",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-2_dcb_324"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-sm-2_dcb_324",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-2_dcb_324"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-zstd-1_dcb_313",
        "target": "nii_space-template_reg-parameter_desc-zstd-1_dcb_313"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-zstd-1_dcb_313",
        "target": "json_space-template_reg-parameter_desc-zstd-1_dcb_313"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-zstd-1_dcb_313",
        "target": "sinker_space-template_reg-parameter_desc-zstd-1_dcb_313"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-zstd-1_dcb_313",
        "target": "sinker_space-template_reg-parameter_desc-zstd-1_dcb_313"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-zstd-2_dcb_326",
        "target": "nii_space-template_reg-aCompCor_desc-zstd-2_dcb_326"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-zstd-2_dcb_326",
        "target": "json_space-template_reg-aCompCor_desc-zstd-2_dcb_326"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-zstd-2_dcb_326",
        "target": "sinker_space-template_reg-aCompCor_desc-zstd-2_dcb_326"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-zstd-2_dcb_326",
        "target": "sinker_space-template_reg-aCompCor_desc-zstd-2_dcb_326"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-zstd-1_dcb_314",
        "target": "nii_space-template_reg-parameter_desc-sm-zstd-1_dcb_314"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-zstd-1_dcb_314",
        "target": "json_space-template_reg-parameter_desc-sm-zstd-1_dcb_314"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-sm-zstd-1_dcb_314",
        "target": "sinker_space-template_reg-parameter_desc-sm-zstd-1_dcb_314"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-sm-zstd-1_dcb_314",
        "target": "sinker_space-template_reg-parameter_desc-sm-zstd-1_dcb_314"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327",
        "target": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327",
        "target": "json_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_dcb_327"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-1_lfcdb_315",
        "target": "nii_space-template_reg-parameter_desc-1_lfcdb_315"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-1_lfcdb_315",
        "target": "json_space-template_reg-parameter_desc-1_lfcdb_315"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-1_lfcdb_315",
        "target": "sinker_space-template_reg-parameter_desc-1_lfcdb_315"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-1_lfcdb_315",
        "target": "sinker_space-template_reg-parameter_desc-1_lfcdb_315"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-2_lfcdb_328",
        "target": "nii_space-template_reg-aCompCor_desc-2_lfcdb_328"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-2_lfcdb_328",
        "target": "json_space-template_reg-aCompCor_desc-2_lfcdb_328"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-2_lfcdb_328",
        "target": "sinker_space-template_reg-aCompCor_desc-2_lfcdb_328"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-2_lfcdb_328",
        "target": "sinker_space-template_reg-aCompCor_desc-2_lfcdb_328"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-1_lfcdb_316",
        "target": "nii_space-template_reg-parameter_desc-sm-1_lfcdb_316"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-1_lfcdb_316",
        "target": "json_space-template_reg-parameter_desc-sm-1_lfcdb_316"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-sm-1_lfcdb_316",
        "target": "sinker_space-template_reg-parameter_desc-sm-1_lfcdb_316"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-sm-1_lfcdb_316",
        "target": "sinker_space-template_reg-parameter_desc-sm-1_lfcdb_316"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdb_329",
        "target": "nii_space-template_reg-aCompCor_desc-sm-2_lfcdb_329"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdb_329",
        "target": "json_space-template_reg-aCompCor_desc-sm-2_lfcdb_329"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-sm-2_lfcdb_329",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-2_lfcdb_329"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-sm-2_lfcdb_329",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-2_lfcdb_329"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-zstd-1_lfcdb_317",
        "target": "nii_space-template_reg-parameter_desc-zstd-1_lfcdb_317"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-zstd-1_lfcdb_317",
        "target": "json_space-template_reg-parameter_desc-zstd-1_lfcdb_317"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-zstd-1_lfcdb_317",
        "target": "sinker_space-template_reg-parameter_desc-zstd-1_lfcdb_317"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-zstd-1_lfcdb_317",
        "target": "sinker_space-template_reg-parameter_desc-zstd-1_lfcdb_317"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330",
        "target": "nii_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330",
        "target": "json_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330",
        "target": "sinker_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330",
        "target": "sinker_space-template_reg-aCompCor_desc-zstd-2_lfcdb_330"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318",
        "target": "nii_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318",
        "target": "json_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318",
        "target": "sinker_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318",
        "target": "sinker_space-template_reg-parameter_desc-sm-zstd-1_lfcdb_318"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331",
        "target": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331",
        "target": "json_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdb_331"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-1_lfcdw_319",
        "target": "nii_space-template_reg-parameter_desc-1_lfcdw_319"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-1_lfcdw_319",
        "target": "json_space-template_reg-parameter_desc-1_lfcdw_319"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-1_lfcdw_319",
        "target": "sinker_space-template_reg-parameter_desc-1_lfcdw_319"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-1_lfcdw_319",
        "target": "sinker_space-template_reg-parameter_desc-1_lfcdw_319"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-2_lfcdw_332",
        "target": "nii_space-template_reg-aCompCor_desc-2_lfcdw_332"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-2_lfcdw_332",
        "target": "json_space-template_reg-aCompCor_desc-2_lfcdw_332"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-2_lfcdw_332",
        "target": "sinker_space-template_reg-aCompCor_desc-2_lfcdw_332"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-2_lfcdw_332",
        "target": "sinker_space-template_reg-aCompCor_desc-2_lfcdw_332"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-1_lfcdw_320",
        "target": "nii_space-template_reg-parameter_desc-sm-1_lfcdw_320"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-1_lfcdw_320",
        "target": "json_space-template_reg-parameter_desc-sm-1_lfcdw_320"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-sm-1_lfcdw_320",
        "target": "sinker_space-template_reg-parameter_desc-sm-1_lfcdw_320"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-sm-1_lfcdw_320",
        "target": "sinker_space-template_reg-parameter_desc-sm-1_lfcdw_320"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdw_333",
        "target": "nii_space-template_reg-aCompCor_desc-sm-2_lfcdw_333"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-2_lfcdw_333",
        "target": "json_space-template_reg-aCompCor_desc-sm-2_lfcdw_333"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-sm-2_lfcdw_333",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-2_lfcdw_333"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-sm-2_lfcdw_333",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-2_lfcdw_333"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-zstd-1_lfcdw_321",
        "target": "nii_space-template_reg-parameter_desc-zstd-1_lfcdw_321"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-zstd-1_lfcdw_321",
        "target": "json_space-template_reg-parameter_desc-zstd-1_lfcdw_321"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-zstd-1_lfcdw_321",
        "target": "sinker_space-template_reg-parameter_desc-zstd-1_lfcdw_321"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-zstd-1_lfcdw_321",
        "target": "sinker_space-template_reg-parameter_desc-zstd-1_lfcdw_321"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334",
        "target": "nii_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334",
        "target": "json_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334",
        "target": "sinker_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334",
        "target": "sinker_space-template_reg-aCompCor_desc-zstd-2_lfcdw_334"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322",
        "target": "nii_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322"
      },
      {
        "origin": "id_string_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322",
        "target": "json_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322"
      },
      {
        "origin": "nii_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322",
        "target": "sinker_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322"
      },
      {
        "origin": "json_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322",
        "target": "sinker_space-template_reg-parameter_desc-sm-zstd-1_lfcdw_322"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335",
        "target": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335"
      },
      {
        "origin": "id_string_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335",
        "target": "json_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335"
      },
      {
        "origin": "nii_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335"
      },
      {
        "origin": "json_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335",
        "target": "sinker_space-template_reg-aCompCor_desc-sm-zstd-2_lfcdw_335"
      }
    ]
  }
}